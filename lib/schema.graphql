directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

input AcceptPromptonRequestInput {
  requestId: String!
}

enum AccessType {
  """公開"""
  PUBLIC

  """公開"""
  SILENT

  """非公開"""
  PRIVATE

  """限定公開"""
  LIMITED
}

input AddPromptonTagToWorkInput {
  workId: String!
  tagNameJA: String!
}

input AddPromptonWorkToFolderInput {
  folderId: String!
  workId: String!
}

"""作品のシリーズ"""
type AlbumNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """スラッグ"""
  slug: String

  """タイトル"""
  title: String!

  """説明"""
  description: String!

  """作成者"""
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """いいね数"""
  likesCount: Int!

  """閲覧数"""
  viewsCount: Int!

  """
  作品
  ※キャッシュ不可
  """
  works(offset: Int!, limit: Int!): [WorkNode!]!

  """サムネイル画像のURL"""
  thumbnailImageURL: String

  """サムネイル"""
  thumbnailImage: ImageNode

  """センシティブである"""
  isSensitive: Boolean!

  """Open Graph タイトル"""
  openGraphTitle: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """シェア"""
  shareText: String

  """いいねしている"""
  isLiked: Boolean!

  """保存している"""
  isWatched: Boolean!
  viewer: AlbumViewerNode @deprecated(reason: "isLikedを使用する")
}

input AlbumsWhereInput {
  search: String
  isSensitive: Boolean
}

type AlbumViewerNode implements Node {
  id: ID! @deprecated
  isLiked: Boolean! @deprecated
  isWatched: Boolean! @deprecated
}

"""運営のお知らせ"""
type AnnouncementNode implements Node {
  id: ID!

  """タイトル"""
  title: String!

  """本文"""
  body: String!

  """作成日"""
  publishedAt: Int!
}

input AwardsWhereInput {
  type: AwardType
  workType: WorkType
  date: String
  year: Int
  month: Int
  day: Int
}

"""アワードの種類"""
enum AwardType {
  """月別"""
  MONTHLY

  """週別"""
  WEEKLY

  """日別"""
  DAILY

  """日別（テーマなし）"""
  DAILY_NO_THEME
}

input BlockPromptonUserInput {
  userId: String!
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input CancelImageGenerationMemoInput {
  nanoid: String!
}

input CancelImageGenerationReservedTaskInput {
  nanoid: String!
}

input CancelImageGenerationTaskInput {
  nanoid: String!
}

input CancelPromptonRequestInput {
  requestId: String!
}

"""カテゴリ"""
type CategoryNode implements Node {
  id: ID!

  """名前"""
  name: String!
  isWatched: Boolean!
  viewer: CategoryViewerNode
}

type CategoryViewerNode implements Node {
  id: ID!
  isWatched: Boolean!
}

input ChangePromptonFolderToPaidInput {
  folderId: String!
  price: Int!
  featureCommercialUse: Boolean!
}

input ClosePromptonRequestInput {
  requestId: String!
}

"""コメント"""
type CommentNode implements Node {
  id: ID!
  userId: ID
  user: UserNode
  workId: ID

  """作品"""
  work: WorkNode

  """スタンプ"""
  sticker: StickerNode

  """作成日"""
  createdAt: Int!

  """内容"""
  text: String!

  """レスポンス"""
  responses(offset: Int!, limit: Int!): [CommentNode!]!

  """削除済み"""
  isDeleted: Boolean!
}

input CommentsOrderBy {
  createdAt: Direction
}

input CommentsWhereInput {
  isSensitive: Boolean
}

interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}

input CreateAccountInput {
  idToken: String!
}

input CreateAlbumInput {
  title: String!
}

input CreateAlbumWorkInput {
  albumId: ID!
  workId: ID!
}

input CreateFolderInput {
  title: String!
}

input CreateFolderWorkInput {
  folderId: ID!
  workId: ID!
}

input CreateImageGenerationMemoInput {
  title: String!
  explanation: String!
  prompts: String!
  negativePrompts: String!
  sampler: String!
  vae: String!
  seed: Int!
  steps: Int!
  scale: Int!
  clipSkip: Int!
  width: Int!
  height: Int!
  modelId: ID!
}

input CreateImageGenerationTaskInput {
  """生成する枚数"""
  count: Int!

  """生成の方式"""
  type: ImageGenerationType!
  model: String!
  vae: String!
  prompt: String!
  negativePrompt: String!
  seed: Float!
  steps: Int!
  scale: Int!
  sampler: String!
  clipSkip: Int

  """画像のサイズ"""
  sizeType: ImageGenerationSizeType!

  """t2tパラメータ"""
  t2tImageUrl: String
  t2tMaskImageUrl: String
  t2tDenoisingStrengthSize: String
  t2tInpaintingFillSize: String
}

input CreateMessageInput {
  recipientId: ID!
  text: String!
}

input CreateNoteInput {
  text: String!
}

input CreateNovelInput {
  text: String!
}

input CreatePassCheckoutSessionInput {
  passType: PassType!
}

input CreatePromptonAipicRequestInput {
  note: String!
  recipientId: String!
  fee: Int
}

input CreatePromptonChatMessageInput {
  text: String!
}

input CreatePromptonCoffeeRequestInput {
  note: String!
  recipientId: String!
}

input CreatePromptonDeliverableInput {
  requestId: String!
  fileId: String!
  name: String
  description: String
  fileType: String!
}

input CreatePromptonFileInput {
  fileId: String!
  fileType: String!
  width: Int
  height: Int
  path: String!
}

input CreatePromptonFolderInput {
  name: String!
  description: String!
  isPublic: Boolean!
}

input CreatePromptonFolderKeyInput {
  folderId: String!
}

input CreatePromptonImageGenerationInput {
  model: String!
  prompt: String!
  size: String!
  quality: String!
  style: String!
}

input CreatePromptonInquiryInput {
  name: String!
  companyName: String
  email: String!
  phoneNumber: String
  body: String!
}

input CreatePromptonPaymentMethodInput {
  redirectURL: String
}

type CreatePromptonPaymentMethodResult {
  checkoutURL: String!
}

input CreatePromptonPlanInput {
  category: String!
  name: String!
  description: String!
  message: String!
  unitPrice: Int!
  minimumQuantity: Int!
  maximumQuantity: Int!
  styleSlugs: [String!]!
  objectSlugs: [String!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  imageFileId: String
}

input CreatePromptonPlanRequestInput {
  planId: String!
  quantity: Int!
  note: String!
  recipientId: String!
  fileIds: [String!]!
}

input CreatePromptonProfileBlockInput {
  siteURL: String
  title: String
  description: String
}

input CreatePromptonPromptCategoryInput {
  name: String!
  description: String
  slug: String!
}

input CreatePromptonPromptInput {
  name: String
  description: String
  text: String!
  isNsfw: Boolean!
  isBase: Boolean!
  isSingle: Boolean!
}

input CreatePromptonPromptWorkInput {
  fileId: String!
  fileName: String!
  isPublic: Boolean!
  promptId: String!
}

input CreatePromptonReactionInput {
  workId: String!
  text: String!
}

input CreatePromptonUserFromTokenInput {
  token: String!
  userId: String!
}

input CreatePromptonUserInput {
  name: String!
}

input CreatePromptonWorkInput {
  fileId: String!
  fileName: String!
  folderId: String
  tagNameJA: String
  fileType: String!
}

input CreatePromptonWorkLikeInput {
  workId: String!
}

input CreateReservedImageGenerationTaskInput {
  """生成する枚数"""
  count: Int!

  """生成の方式"""
  type: ImageGenerationType!
  model: String!
  vae: String!
  prompt: String!
  negativePrompt: String!
  seed: Float!
  steps: Int!
  scale: Int!
  sampler: String!
  clipSkip: Int

  """画像のサイズ"""
  sizeType: ImageGenerationSizeType!

  """t2tパラメータ"""
  t2tImageUrl: String
  t2tMaskImageUrl: String
  t2tDenoisingStrengthSize: String
  t2tInpaintingFillSize: String
}

input CreateResponseCommentInput {
  commentId: ID!
  text: String!
  stickerId: ID
}

input CreateStickerInput {
  title: String!
}

input CreateUserStickerInput {
  stickerId: ID!
}

input CreateWorkCommentInput {
  workId: ID!
  text: String!
  stickerId: ID
}

input CreateWorkInput {
  title: String!
}

input CreateWorkLikeInput {
  workId: ID!
}

"""作品の日別テーマ"""
type DailyThemeNode implements Node {
  id: ID!

  """不明"""
  type: String!

  """タイトル"""
  title: String!

  """日付"""
  dateText: String!

  """年"""
  year: Int!

  """月"""
  month: Int!

  """日にち"""
  day: Int!

  """開始時刻"""
  startTime: Int!

  """作品"""
  works(offset: Int!, limit: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """作品数"""
  worksCount: Int!

  """作品"""
  firstWork: WorkNode
}

input DailyThemesWhereInput {
  search: String
  year: Int
  month: Int
  day: Int
  startDate: String
  endDate: String
}

input DecrementPromptonPlanSort {
  planId: String!
}

input DecrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}

input DeleteAlbumInput {
  albumId: ID!
}

input DeleteAlbumWorkInput {
  albumId: ID!
  workId: ID!
}

input DeleteCommentInput {
  commentId: ID!
}

input DeleteFolderInput {
  folderId: ID!
}

input DeleteFolderWorkInput {
  folderId: ID!
  workId: ID!
}

input DeleteImageGenerationMemoInput {
  nanoid: String!
}

input DeleteImageGenerationTaskInput {
  nanoid: String!
}

input DeleteMessageInput {
  messageId: ID!
}

input DeleteNoteInput {
  noteId: ID!
}

input DeleteNovelInput {
  novelId: ID!
}

input DeletePromptonFolderInput {
  folderId: String!
}

input DeletePromptonIntegrationInput {
  integrationId: String!
}

input DeletePromptonPlanInput {
  planId: String!
}

input DeletePromptonProfileBlockInput {
  profileBlockId: String!
}

input DeletePromptonPromptCategoryInput {
  promptCategoryId: String!
}

input DeletePromptonPromptInput {
  promptId: String!
}

input DeletePromptonReactionInput {
  workId: String!
  text: String!
}

input DeletePromptonWorkInput {
  workId: String!
}

input DeletePromptonWorkLikeInput {
  workId: String!
}

input DeleteStickerInput {
  stickerId: ID!
}

input DeleteUserStickerInput {
  stickerId: ID!
}

input DeleteWorkInput {
  workId: ID!
}

input DeleteWorkLikeInput {
  workId: ID!
}

enum Direction {
  ASC
  DESC
}

interface Edge {
  cursor: String!
  node: Node!
}

input FlipPromptonFolderWorkIndexInput {
  folderId: String!
  workId: String!
  nextWorkId: String!
}

enum FolderMode {
  NORMAL
  COMIC_VERTICAL
  COMIC_HORIZONTAL
}

"""フォルダ"""
type FolderNode implements Node {
  id: ID!

  """ID"""
  nanoid: ID!

  """作成日"""
  createdAt: Int!

  """更新日"""
  updatedAt: Int!

  """タイトル"""
  title: String!

  """説明"""
  description: String!

  """レーティング"""
  rating: Rating

  """ユーザID"""
  userId: ID

  """ユーザ"""
  user: UserNode

  """作品"""
  works(offset: Int!, limit: Int!): [WorkNode!]!

  """サムネイル画像"""
  thumbnailImageURL: String

  """削除済み"""
  isDeleted: Boolean!

  """非公開である"""
  isPrivate: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """Open Graph タイトル"""
  openGraphTitle: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """シェア"""
  shareText: String
}

input FoldersWhereInput {
  search: String
  isSensitive: Boolean
}

"""通知（フォロー）"""
type FollowNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID

  """ユーザ"""
  user: UserNode
}

input FollowPromptonUserInput {
  userId: String!
}

input FollowUserInput {
  userId: ID!
}

input HotWorksWhereInput {
  isSensitive: Boolean
}

type ImageGenerationEngineStatus {
  """通常の生成タスク数"""
  normalTasksCount: Int!

  """優先1の生成タスク数"""
  standardTasksCount: Int!

  """通常の予測生成秒数"""
  normalPredictionGenerationSeconds: Int!

  """優先1の予測生成秒数"""
  standardPredictionGenerationSeconds: Int!
}

"""画像生成メモ"""
type ImageGenerationMemoNode implements Node {
  id: ID!
  nanoid: String!

  """ユーザID"""
  userId: ID

  """タイトル"""
  title: String!

  """説明"""
  explanation: String!

  """プロンプト"""
  prompts: String!

  """ネガティブプロンプト"""
  negativePrompts: String!

  """サンプラー"""
  sampler: String!

  """VAE"""
  vae: String!

  """モデル"""
  model: ImageGeneratorNode!
  seed: Int!
  steps: Int!
  scale: Int!
  clipSkip: Int!
  width: Int!
  height: Int!

  """削除済み"""
  isDeleted: Boolean!

  """作成時刻"""
  createdAt: Int
}

input ImageGenerationMemoOrderBy {
  createdAt: Direction
}

"""予約済み画像生成"""
type ImageGenerationReservedTaskNode implements Node {
  id: ID!

  """予約開始した時刻"""
  createdAt: Int

  """削除済み"""
  isDeleted: Boolean!

  """生成済み"""
  isGenerated: Boolean!

  """生成の方式"""
  generationType: ImageGenerationType!
  model: ImageGeneratorNode!
  vae: String
  prompt: String!
  negativePrompt: String!
  seed: Float!
  steps: Int!
  scale: Int!
  clipSkip: Int!
  sampler: String!
  sizeType: ImageGenerationSizeType!
  t2tImageUrl: String
  t2tMaskImageUrl: String
  t2tDenoisingStrengthSize: String
  t2tInpaintingFillSize: String
  token: String
  nanoid: String
}

enum ImageGenerationSizeType {
  SD2_768_768
  SD2_768_1200
  SD2_1200_768
  SD2_768_1152
  SD2_1152_768
  SD2_576_1440
  SD2_1440_576
  SD1_512_512
  SD1_512_768
  SD1_768_512
  SD1_384_960
  SD1_960_384
  SD3_1216_1216
  SD3_832_1216
  SD3_1216_832
  SD3_960_384
  SD3_640_1536
  SD3_1536_640
  SD3_1024_1024
  SD3_896_1152
  SD3_1152_896
  SD3_1152_1152
  SD3_896_896
}

enum ImageGenerationStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELED
  ERROR
  RESERVED
}

"""画像生成"""
type ImageGenerationTaskNode implements Node {
  id: ID!

  """お気に入り度"""
  rating: Int

  """保護済みかどうか"""
  isProtected: Boolean

  """生成が完了した時刻"""
  completedAt: Int

  """生成状態"""
  status: ImageGenerationStatus!

  """削除済み"""
  isDeleted: Boolean!
  count: Int!

  """生成の方式"""
  generationType: ImageGenerationType!
  model: ImageGeneratorNode!
  vae: String
  prompt: String!
  negativePrompt: String!
  seed: Float!
  steps: Int!
  scale: Int!
  sampler: String!
  sizeType: ImageGenerationSizeType!
  t2tImageUrl: String
  t2tMaskImageUrl: String
  t2tDenoisingStrengthSize: String
  t2tInpaintingFillSize: String
  token: String
  thumbnailToken: String
  nanoid: String
  clipSkip: Int!

  """予想生成秒数"""
  estimatedSeconds: Int
}

enum ImageGenerationTaskOrderBy {
  DATE_CREATED
}

input ImageGenerationTasksWhereInput {
  dateText: String
  fromDate: String
  rating: Int
  isProtected: Boolean
  minRating: Int
}

enum ImageGenerationType {
  TEXT_TO_IMAGE
  IMAGE_TO_IMAGE
  INPAINTING
}

"""画像生成サービス"""
type ImageGeneratorNode implements Node {
  id: ID!

  """名前"""
  name: String!

  """SD種別（SD1, SD2, SDXL）"""
  type: String!

  """推奨プロンプト"""
  recommendedPrompt: String!
}

"""画像生成LoRA"""
type ImageLoraModelNode implements Node {
  id: ID!

  """名前"""
  name: String!

  """説明"""
  description: String

  """サムネイル画像のURL"""
  thumbnailImageURL: String

  """コード"""
  slug: String!

  """ライセンス"""
  license: String

  """プロンプト"""
  prompts: [String!]!

  """種別"""
  genre: String
}

enum ImageModelCategory {
  """少女イラスト"""
  ILLUSTRATION_GIRL

  """男子イラスト"""
  ILLUSTRATION_BOY

  """グラビア"""
  BIKINI_MODEL

  """背景"""
  BACKGROUND

  """獣"""
  ANIMAL

  """フィギュア"""
  FIGURE
}

"""画像生成モデル"""
type ImageModelNode implements Node {
  id: ID!

  """名前"""
  name: String!

  """名前"""
  displayName: String!

  """説明"""
  description: String

  """サムネイル画像"""
  thumbnailImageURL: String

  """コード"""
  slug: String!

  """StableDiffusionの種類"""
  type: String!

  """ライセンス"""
  license: String

  """スタイル"""
  style: ImageStyle!

  """プロンプト"""
  prompts: [String!]!

  """カテゴリ"""
  category: ImageModelCategory!

  """参考作品"""
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]!
}

"""画像"""
type ImageNode implements Node {
  id: ID!

  """ダウンロードURL"""
  downloadURL: String!

  """種類"""
  type: String!
}

enum ImageStyle {
  """リアル"""
  REAL
  SEMI_REAL
  ILLUSTRATION
}

input IncrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}

"""通知（いいねされた作品）"""
type LikedWorkNotificationNode implements Node {
  id: ID!

  """時刻"""
  createdAt: Int!

  """いいねしたユーザ"""
  user: UserNode
  userId: ID

  """作品"""
  work: WorkNode
  workId: ID

  """匿名かどうか"""
  isAnonymous: Boolean!
}

"""通知（作品のいいね集計）"""
type LikedWorksSummaryNotificationNode implements Node {
  id: ID!

  """時刻"""
  createdAt: Int!

  """メッセージ"""
  message: String
}

type LoginResult {
  token: String!
}

input LoginWithPasswordInput {
  login: String!
  password: String!
}

input MarkPromptonFolderAsPrivateInput {
  folderId: String!
}

input MarkPromptonFolderAsPublicInput {
  folderId: String!
}

input MarkPromptonPlanAsPrivateInput {
  planId: String!
}

input MarkPromptonPlanAsPublicInput {
  planId: String!
}

input MarkPromptonWorkAsPrivateInput {
  workId: String!
}

input MarkPromptonWorkAsPublicInput {
  workId: String!
}

input MarkPromptonWorkAsUserHeaderInput {
  workId: String!
}

"""メッセージ"""
type MessageNode implements Node {
  id: ID!
  createdAt: Int!

  """メッセージ"""
  text: String

  """送信者"""
  user: UserNode!

  """既読済みである"""
  isRead: Boolean!

  """自身である"""
  isViewer: Boolean!
}

"""メッセージのスレッド"""
type MessageThreadNode implements Node {
  id: ID!
  updatedAt: Int!
  recipient: UserNode!
  latestMessage: MessageNode!
  messages(offset: Int!, limit: Int!): [MessageNode!]!
}

"""メッセージのスレッド"""
type MilestoneNode implements Node {
  id: ID!
  title: String!
  version: String!
  description: String!
  pageURL: String!
  isDone: Boolean!
}

input MilestonesWhereInput {
  repository: String!
}

type Mutation {
  """アカウントを作成する"""
  createAccount(input: CreateAccountInput!): UserNode!

  """シリーズを作成する"""
  createAlbum(input: CreateAlbumInput!): AlbumNode!

  """フォルダに作品を追加する"""
  createAlbumWork(input: CreateAlbumWorkInput!): WorkNode!

  """カスタマーポータルのURLを作成する"""
  createCustomerPortalSession: String!

  """フォルダに作品を追加する"""
  createFolder(input: CreateFolderInput!): WorkNode!

  """フォルダに作品を追加する"""
  createFolderWork(input: CreateFolderWorkInput!): WorkNode!

  """画像生成のタスクを作成する"""
  createImageGenerationTask(input: CreateImageGenerationTaskInput!): ImageGenerationTaskNode!

  """画像生成のメモを作成する"""
  createImageGenerationMemo(input: CreateImageGenerationMemoInput!): ImageGenerationMemoNode!

  """予約画像生成のタスクを作成する"""
  createReservedImageGenerationTask(input: CreateReservedImageGenerationTaskInput!): ImageGenerationReservedTaskNode!

  """画像生成のタスクのレーティングを変更する"""
  updateRatingImageGenerationTask(input: UpdateRatingImageGenerationTaskInput!): ImageGenerationTaskNode!

  """画像生成のタスクの保護を変更する"""
  updateProtectedImageGenerationTask(input: UpdateProtectedImageGenerationTaskInput!): ImageGenerationTaskNode!

  """画像生成のモデルのレーティングを変更する"""
  updateRatingImageGenerationModel(input: UpdateRatingImageGenerationModelInput!): UserSettingNode!

  """画像生成のメモを変更する"""
  updateImageGenerationMemo(input: UpdateImageGenerationMemoInput!): ImageGenerationMemoNode!

  """メッセージを作成する"""
  createMessage(input: CreateMessageInput!): MessageNode!

  """コラムを作成する"""
  createNote(input: CreateNoteInput!): NoteNode!

  """小説を作成する"""
  createNovel(input: CreateNovelInput!): NovelNode!

  """リプライのコメントを作成する"""
  createResponseComment(input: CreateResponseCommentInput!): CommentNode!

  """スタンプを作成する"""
  createSticker(input: CreateStickerInput!): StickerNode!

  """マイスタンプを追加する"""
  createUserSticker(input: CreateUserStickerInput!): StickerNode!

  """パスのチェックアウトのURLを作成する"""
  createPassCheckoutSession(input: CreatePassCheckoutSessionInput): String!

  """作品を作成する"""
  createWork(input: CreateWorkInput!): WorkNode!

  """作品のコメントを作成する"""
  createWorkComment(input: CreateWorkCommentInput!): CommentNode!

  """作品のスキを作成する"""
  createWorkLike(input: CreateWorkLikeInput!): WorkNode!

  """シリーズを削除する"""
  deleteAlbum(input: DeleteAlbumInput!): AlbumNode!

  """シリーズから作品を削除する"""
  deleteAlbumWork(input: DeleteAlbumWorkInput!): WorkNode!

  """作品のコメントを削除する"""
  deleteComment(input: DeleteCommentInput!): CommentNode!

  """シリーズを削除する"""
  deleteFolder(input: DeleteFolderInput!): FolderNode!

  """フォルダから作品を削除する"""
  deleteFolderWork(input: DeleteFolderWorkInput!): WorkNode!

  """生成履歴を削除する"""
  deleteImageGenerationTask(input: DeleteImageGenerationTaskInput!): ImageGenerationTaskNode!

  """生成メモを削除する"""
  deleteImageGenerationMemo(input: DeleteImageGenerationMemoInput!): ImageGenerationMemoNode!

  """予約生成履歴を削除する"""
  deleteReservedImageGenerationTasks: [ImageGenerationReservedTaskNode]!

  """メッセージを削除する"""
  deleteMessage(input: DeleteMessageInput!): MessageNode!

  """コラムを削除する"""
  deleteNote(input: DeleteNoteInput!): NoteNode!

  """小説を削除する"""
  deleteNovel(input: DeleteNovelInput!): NovelNode!

  """スタンプを削除する"""
  deleteSticker(input: DeleteStickerInput!): StickerNode!

  """ユーザースタンプを削除する"""
  deleteUserSticker(input: DeleteUserStickerInput!): StickerNode!

  """作品を削除する"""
  deleteWork(input: DeleteWorkInput!): WorkNode!

  """作品のスキを削除する"""
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode!

  """生成をキャンセルする"""
  cancelImageGenerationTask(input: CancelImageGenerationTaskInput!): ImageGenerationTaskNode!

  """予約生成をキャンセルする"""
  cancelImageGenerationReservedTask(input: CancelImageGenerationReservedTaskInput!): ImageGenerationTaskNode!

  """ユーザをフォローする"""
  followUser(input: FollowUserInput!): UserNode!

  """パスワードでログインする"""
  loginWithPassword(input: LoginWithPasswordInput!): LoginResult!

  """タグをミュートする"""
  muteTag(input: MuteTagInput!): TagNode

  """ユーザをミュートする"""
  muteUser(input: MuteUserInput!): UserNode!

  """シリーズを報告する"""
  reportAlbum(input: ReportAlbumInput!): Boolean

  """コメントを報告する"""
  reportComment(input: ReportCommentInput!): Boolean

  """フォルダを報告する"""
  reportFolder(input: ReportFolderInput!): Boolean

  """スタンプを報告する"""
  reportSticker(input: ReportStickerInput!): Boolean

  """ユーザを報告する"""
  reportUser(input: ReportUserInput!): Boolean

  """作品を報告する"""
  reportWork(input: ReportWorkInput!): Boolean

  """ユーザのフォローを解除する"""
  signImageGenerationTerms(input: SignImageGenerationTermsInput!): UserNode!

  """ユーザのフォローを解除する"""
  unfollowUser(input: UnfollowUserInput!): UserNode!

  """タグのミュートを解除する"""
  unmuteTag(input: UnmuteTagInput!): TagNode!

  """ユーザのミュートを解除する"""
  unmuteUser(input: UnmuteUserInput!): UserNode!

  """フォルダのウォッチを解除する"""
  unwatchFolder(input: UnwatchFolderInput!): UserNode!

  """アカウントのログインIDを作成する"""
  updateAccountLogin(input: UpdateAccountLoginInput!): UserNode!

  """アカウントのパスワードを変更する"""
  updateAccountPassword(input: UpdateAccountPasswordInput!): UserNode!

  """アカウントのFCMトークンを変更する"""
  updateAccountFcmToken(input: UpdateAccountFcmTokenInput!): UserNode!

  """アカウントのWebFCMトークンを変更する"""
  updateAccountWebFcmToken(input: UpdateAccountWebFcmTokenInput!): UserNode!

  """シリーズを更新する"""
  updateAlbum(input: UpdateAlbumInput!): AlbumNode!

  """シリーズを更新する"""
  updateFolder(input: UpdateFolderInput!): FolderNode!

  """ノートを更新する"""
  updateNote(input: UpdateNoteInput!): NoteNode!

  """小説を更新する"""
  updateNovel(input: UpdateNovelInput!): NovelNode!

  """スタンプを更新する"""
  updateSticker(input: UpdateStickerInput!): StickerNode!

  """ユーザのプロフィールを作成する"""
  updateUserProfile(input: UpdateUserProfileInput!): UserNode!

  """作品を更新する"""
  updateWork(input: UpdateWorkInput!): WorkNode!

  """フォルダをウォッチする"""
  watchFolder(input: WatchFolderInput!): FolderNode!

  """ユーザを作成する"""
  createPromptonChatMessage(input: CreatePromptonChatMessageInput!): [PromptonMessageNode!]!

  """Aipictorsのトークンからユーザを作成する"""
  createPromptonUserFromToken(input: CreatePromptonUserFromTokenInput!): Boolean

  """ユーザを作成する"""
  createPromptonUser(input: CreatePromptonUserInput!): Boolean

  """ユーザのアイコンを更新する"""
  updatePromptonUserAvatar(input: UpdatePromptonUserAvatarInput!): PromptonUserNode!

  """ユーザのヘッダー画像を更新する"""
  updatePromptonUserHeaderImage(input: UpdatePromptonUserHeaderImageInput!): PromptonUserNode!

  """ユーザのプロフィールを更新する"""
  updatePromptonUserProfile(input: UpdatePromptonUserProfileInput!): PromptonUserNode!

  """ユーザのユーザ名を更新する"""
  updatePromptonUserLogin(input: UpdatePromptonUserLoginInput!): PromptonUserNode!

  """ファイルを作成する"""
  createPromptonFile(input: CreatePromptonFileInput!): PromptonFileNode!

  """作品を作成する"""
  createPromptonWork(input: CreatePromptonWorkInput!): PromptonWorkNode!

  """作品を削除する"""
  deletePromptonWork(input: DeletePromptonWorkInput!): PromptonWorkNode!

  """作品を更新する"""
  updatePromptonWork(input: UpdatePromptonWorkInput!): PromptonWorkNode!

  """作品を公開にする"""
  markPromptonWorkAsPublic(input: MarkPromptonWorkAsPublicInput!): PromptonWorkNode!

  """作品を非公開にする"""
  markPromptonWorkAsPrivate(input: MarkPromptonWorkAsPrivateInput!): PromptonWorkNode!

  """作品をピン留めする"""
  pinPromptonWork(input: PinPromptonWorkInput!): PromptonWorkNode!

  """作品のピン留めを解除する"""
  unpinPromptonWork(input: UnpinPromptonWorkInput!): PromptonWorkNode!

  """作品をフォルダに追加する"""
  addPromptonTagToWork(input: AddPromptonTagToWorkInput!): PromptonWorkNode!

  """作品をフォルダから削除する"""
  removePromptonTagFromWork(input: RemovePromptonTagFromWorkInput!): PromptonWorkNode!

  """作品のスキを作成する"""
  createPromptonWorkLike(input: CreatePromptonWorkLikeInput!): PromptonWorkNode!

  """作品のスキを削除する"""
  deletePromptonWorkLike(input: DeletePromptonWorkLikeInput!): PromptonWorkNode!

  """作品をユーザのヘッダーに設定する"""
  markPromptonWorkAsUserHeader(input: MarkPromptonWorkAsUserHeaderInput!): PromptonUserNode

  """ユーザのプロフィールのインデックスを更新する"""
  flipPromptonFolderWorkIndex(input: FlipPromptonFolderWorkIndexInput!): [PromptonWorkNode!]!

  """ユーザをフォローする"""
  followPromptonUser(input: FollowPromptonUserInput!): PromptonUserNode

  """ユーザのフォローは解除する"""
  unfollowPromptonUser(input: UnfollowPromptonUserInput!): PromptonUserNode

  """ユーザのプロフィールを作成する"""
  createPromptonProfileBlock(input: CreatePromptonProfileBlockInput!): PromptonUserNode!

  """ユーザのインボイスの登録番号を更新する"""
  updatePromptonUserInvoiceRegistrationNumber(input: UpdatePromptonUserInvoiceRegistrationNumberInput!): PromptonUserNode!

  """ユーザのプロフィールを更新する"""
  updatePromptonProfileBlock(input: UpdatePromptonProfileBlockInput!): PromptonUserNode!

  """ユーザのプロフィールのインデックスを更新する"""
  incrementPromptonProfileBlockIndex(input: IncrementPromptonProfileBlockIndexInput!): PromptonUserNode!

  """ユーザのプロフィールのインデックスを更新する"""
  decrementPromptonProfileBlockIndex(input: DecrementPromptonProfileBlockIndexInput!): PromptonUserNode!

  """ユーザのプロフィールのインデックスを更新する"""
  deletePromptonProfileBlock(input: DeletePromptonProfileBlockInput!): PromptonUserNode!

  """フォルダを作成する"""
  createPromptonFolder(input: CreatePromptonFolderInput!): PromptonFolderNode!

  """フォルダを更新する"""
  updatePromptonFolder(input: UpdatePromptonFolderInput!): PromptonFolderNode!

  """フォルダを削除する"""
  deletePromptonFolder(input: DeletePromptonFolderInput!): PromptonFolderNode!

  """フォルダを公開する"""
  markPromptonFolderAsPublic(input: MarkPromptonFolderAsPublicInput!): PromptonFolderNode!

  """フォルダを非公開にする"""
  markPromptonFolderAsPrivate(input: MarkPromptonFolderAsPrivateInput!): PromptonFolderNode!

  """フォルダを有償化にする"""
  changePromptonFolderToPaid(input: ChangePromptonFolderToPaidInput!): PromptonFolderNode!

  """作品をフォルダに追加する"""
  addPromptonWorkToFolder(input: AddPromptonWorkToFolderInput!): PromptonFolderNode!

  """作品をフォルダから削除する"""
  removePromptonWorkFromFolder(input: RemovePromptonWorkFromFolderInput!): PromptonFolderNode!

  """フォルダの鍵を作成する"""
  createPromptonFolderKey(input: CreatePromptonFolderKeyInput!): PromptonFolderKeyNode!

  """プランを作成する"""
  createPromptonPlan(input: CreatePromptonPlanInput!): PromptonPlanNode!

  """プランを更新する"""
  updatePromptonPlan(input: UpdatePromptonPlanInput!): PromptonPlanNode!

  """プランを順序を上げる"""
  updatePromptonPlanSort(input: UpdatePromptonPlanSortInput!): PromptonPlanNode!

  """プランを削除する"""
  deletePromptonPlan(input: DeletePromptonPlanInput!): PromptonPlanNode!

  """プランを公開する"""
  markPromptonPlanAsPublic(input: MarkPromptonPlanAsPublicInput!): PromptonPlanNode!

  """プランを非公開にする"""
  markPromptonPlanAsPrivate(input: MarkPromptonPlanAsPrivateInput!): PromptonPlanNode!

  """支援リクエストを作成する"""
  createPromptonAipicRequest(input: CreatePromptonAipicRequestInput!): PromptonRequestNode!

  """プランリクエストを作成する"""
  createPromptonPlanRequest(input: CreatePromptonPlanRequestInput!): PromptonRequestNode!

  """コーヒーリクエストを作成する"""
  createPromptonCoffeeRequest(input: CreatePromptonCoffeeRequestInput!): PromptonRequestNode!

  """リクエストを受諾する"""
  acceptPromptonRequest(input: AcceptPromptonRequestInput!): PromptonRequestNode!

  """リクエストを拒否する"""
  rejectPromptonRequest(input: RejectPromptonRequestInput!): PromptonRequestNode!

  """リクエストをキャンセルする"""
  cancelPromptonRequest(input: CancelPromptonRequestInput!): PromptonRequestNode!

  """リクエストを完了とする"""
  closePromptonRequest(input: ClosePromptonRequestInput!): PromptonRequestNode!

  """納品物を作成する"""
  createPromptonDeliverable(input: CreatePromptonDeliverableInput!): PromptonWorkNode!

  """決済方法を登録する"""
  createPromptonPaymentMethod(input: CreatePromptonPaymentMethodInput!): CreatePromptonPaymentMethodResult

  """決済方法を削除する"""
  deletePromptonPaymentMethod: Boolean

  """プロンプトを作成する"""
  createPromptonPrompt(input: CreatePromptonPromptInput!): PromptonPromptNode!

  """プロンプトを更新する"""
  updatePromptonPrompt(input: UpdatePromptonPromptInput!): PromptonPromptNode!

  """プロンプトを削除する"""
  deletePromptonPrompt(input: DeletePromptonPromptInput!): PromptonPromptNode!

  """プロンプトの作品を追加する"""
  createPromptonPromptWork(input: CreatePromptonPromptWorkInput!): PromptonPromptNode!

  """お問い合わせを作成する"""
  createPromptonInquiry(input: CreatePromptonInquiryInput!): Boolean

  """画像生成のタスクを作成する"""
  createPromptonImageGeneration(input: CreatePromptonImageGenerationInput!): PromptonImageGenerationNode

  """インテグレーション（LINE）を削除する"""
  deletePromptonIntegration(input: DeletePromptonIntegrationInput!): PromptonViewer!

  """テスト通知を送信する"""
  testPromptonIntegration(input: TestPromptonIntegrationInput!): Boolean

  """ユーザをブロックする"""
  blockPromptonUser(input: BlockPromptonUserInput!): PromptonUserNode!
}

input MuteTagInput {
  tagName: String!
}

input MuteUserInput {
  userId: ID!
}

"""ノード"""
interface Node {
  id: ID!
}

"""ノート"""
type NoteNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode!
}

"""通知"""
union NotificationNode = LikedWorkNotificationNode | LikedWorksSummaryNotificationNode | WorkAwardNotificationNode | WorkCommentNotificationNode | WorkCommentReplyNotificationNode | FollowNotificationNode

"""通知の種類"""
enum NotificationType {
  """作品のいいね"""
  LIKED_WORK

  """いいねの集計"""
  LIKED_WORKS_SUMMARY

  """作品のランキング結果"""
  WORK_AWARD

  """作品のコメント"""
  WORK_COMMENT

  """コメントの返信"""
  COMMENT_REPLY

  """フォロー"""
  FOLLOW
}

"""小説"""
type NovelNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type PassNode implements Node {
  id: ID!
  type: PassType!
  user: UserNode!
  payment: PaymentNode

  """無効である"""
  isDisabled: Boolean!
  createdAt: Int!
  periodEnd: Int!
  periodStart: Int!
  trialPeriodStart: Int
  trialPeriodEnd: Int
  isExpired: Boolean!
  price: Int!
}

"""パスの種類"""
enum PassType {
  """ライト"""
  LITE

  """スタンダード"""
  STANDARD

  """プレミアム"""
  PREMIUM

  """2日プラン"""
  TWO_DAYS
}

"""決済履歴"""
type PaymentNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode!
  type: PaymentType!
  amount: Int!
  isRefunded: Boolean!
  stripeInvoiceId: String
  stripePaymentIntentId: String
  pass: PassNode
}

enum PaymentType {
  PASS_STANDARD
  PASS_PREMIUM
  PASS_LITE
}

input PinPromptonWorkInput {
  workId: String!
}

input PopularWorksWhereInput {
  date: String
  isSensitive: Boolean

  """廃止予定"""
  rating: Rating
}

"""プロモーション"""
type PromotionNode implements Node {
  id: ID!
  title: String!
  description: String!
  imageURL: String
  pageURL: String
  startDateTime: Int!
  endDateTime: Int!
}

"""プロンプトのカテゴリー"""
type PromptCategoryNode implements Node {
  id: ID!
  name: String!
  prompts: [PromptNode!]!
}

"""プロンプト"""
type PromptNode implements Node {
  id: ID!
  name: String!
  words: [String!]!
}

"""Stripeのアカウント"""
type PromptonAccountNode implements Node {
  id: ID!
  detailsSubmitted: Boolean!
  payoutsEnabled: Boolean!
  chargesEnabled: Boolean!
  loginLink: String
}

"""Stripeの顧客"""
type PromptonCustomerNode implements Node {
  id: ID!
}

"""ファイル"""
type PromptonFileNode implements Node {
  id: ID!
  createdAt: Int!
  path: String!
  height: Int
  width: Int
  type: String!
  downloadURL: String
  name: String!

  """画像URL"""
  imageURL: String!

  """サムネイルのURL"""
  thumbnailImageURL: String!

  """大きいサイズの画像URL"""
  headerImageURL: String!

  """画像URL"""
  rectangleImageURL: String!

  """サムネイルのURL"""
  rectangleThumbnailImageURL: String!

  """サムネイルの正方形の画像URL"""
  squareThumbnailImageURL: String!
}

type PromptonFolderKeyNode implements Node {
  id: ID!
  createdAt: Int!
  folderId: ID!
  folder: PromptonFolderNode!
  userId: ID!
  user: PromptonUserNode!
  payments: [PromptonPaymentNode!]!
}

"""フォルダ"""
type PromptonFolderNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """作成日"""
  updatedAt: Int!

  """名前"""
  name: String!

  """説明"""
  description: String

  """作品"""
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!

  """作品数"""
  worksCount: Int!

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!

  """色"""
  color: String

  """公開されているかどうか"""
  isPublic: Boolean!

  """ユーザID"""
  userId: ID!

  """ユーザ"""
  user: PromptonUserNode!

  """プラン"""
  plans: [PromptonPlanNode!]!

  """削除済み"""
  isDeleted: Boolean!

  """有償"""
  isPaid: Boolean!

  """NSFW"""
  isNSFW: Boolean!

  """NSFW理由"""
  nsfwReason: String

  """値段"""
  price: Int!

  """商用利用"""
  featureCommercialUse: Boolean

  """ログインユーザ"""
  viewer: PromptonFolderViewerNode

  """画像ファイルのID"""
  imageFileId: ID

  """画像ファイル"""
  imageFile: PromptonFileNode!

  """表示形式"""
  mode: FolderMode!

  """フォルダの鍵のID"""
  viewerFolderId: ID!

  """フォルダの鍵"""
  viewerFolderKey: PromptonFolderKeyNode @deprecated
}

input PromptonFoldersWhereInput {
  userId: String
  search: String
  isPaid: Boolean
}

type PromptonFolderViewerNode implements Node {
  id: ID! @deprecated
  folderId: ID! @deprecated
  folderKey: PromptonFolderKeyNode @deprecated
}

"""ユーザの関係"""
type PromptonFriendshipNode implements Node {
  id: ID!
  createdAt: Int!
  followeeId: ID!
  followee: PromptonUserNode!
  followerId: ID!
  follower: PromptonUserNode!
  status: String!
}

"""画像生成"""
type PromptonImageGenerationNode implements Node {
  id: ID!
  createdAt: Int!
  promptText: String!
  model: String!
  size: String!
  isDeleted: Boolean!
  isError: Boolean!
  isPublic: Boolean!
  user: PromptonUserNode
  image: PromptonFileNode
}

input PromptonImageGenerationsWhereInput {
  search: String
}

type PromptonIntegrationNode implements Node {
  id: ID!
  applicationId: ID!
  userId: ID!
  user: PromptonUserNode!
  createdAt: Int!
}

"""ラベル"""
type PromptonLabelNode implements Node {
  id: ID!
  name: String!
  nameJA: String!
  count: Int!
  firstWork: PromptonWorkNode
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}

input PromptonLabelsWhereInput {
  search: String
}

"""チャット"""
type PromptonMessageNode implements Node {
  id: ID!
  createdAt: Int!
  role: String!
  text: String!
  senderId: ID
  sender: PromptonUserNode
  recipientId: ID
  recipient: PromptonUserNode
  isDeleted: Boolean!
  type: String!
  contextId: ID
}

"""決済履歴"""
type PromptonPaymentIntentNode implements Node {
  id: ID!
}

type PromptonPaymentMethodNode implements Node {
  id: ID!
  type: String!
  cardBrand: String!
  cardLast4: String!
  cardExpMonth: String!
  cardExpYear: String!
  cardFunding: String!
  isLiveMode: Boolean!
}

"""決済"""
type PromptonPaymentNode implements Node {
  id: ID!
  createdAt: Int!
  user: PromptonUserNode!
  purpose: String!
  purposeText: String!
  request: PromptonRequestNode
  amount: Int!
  isError: Boolean!
  transactionId: String
}

"""出金履歴"""
type PromptonPayoutNode implements Node {
  id: ID!
}

"""プラン"""
type PromptonPlanNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  message: String
  unitPrice: Int!
  description: String!
  category: String!
  categoryText: String!
  categoryDescription: String!
  sort: Int!
  userId: ID!
  user: PromptonUserNode!
  minimumQuantity: Int!
  maximumQuantity: Int!
  minimumFee: Int!
  maximumFee: Int!
  isFlexible: Boolean!
  isDeleted: Boolean!
  isPublic: Boolean!
  isActive: Boolean!
  requests: [PromptonRequestNode!]!
  requestsCount: Int!
  styleSlugs: [PromptonSlug!]!
  objectSlugs: [PromptonSlug!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  folders: [PromptonFolderNode!]!

  """画像ファイルのID"""
  imageFileId: ID

  """画像ファイル"""
  imageFile: PromptonFileNode!
}

input PromptonPlansWhereInput {
  search: String
  isUnique: Boolean
  styleSlugs: [String!]
  objectSlugs: [String!]
  category: String
  isPaid: Boolean
}

type PromptonProfileBlockNode {
  id: ID!
  index: Int!
  type: String!
  title: String
  description: String
  siteURL: String
  imageURL: String
  userId: ID!
}

"""プロンプト"""
type PromptonPromptNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  text: String!
  texts: [String!]!
  title: String
  titleJA: String
  description: String
  user: PromptonUserNode
  likesCount: Int!
  isPublic: Boolean!
  isNsfw: Boolean!
  isDeleted: Boolean!
  isSingle: Boolean!
  isBase: Boolean!
  firstWork: PromptonWorkNode
  secondWork: PromptonWorkNode
  works: [PromptonWorkNode!]!
}

"""リクエスト"""
type PromptonRequestNode implements Node {
  id: ID!
  createdAt: Int!
  folder: PromptonFolderNode
  senderId: ID!

  """送ったユーザ"""
  sender: PromptonUserNode!
  recipientId: ID!

  """受け取ったユーザ"""
  recipient: PromptonUserNode!

  """納品物"""
  deliverables: [PromptonWorkNode!]!
  firstDeliverable: PromptonWorkNode
  files: [PromptonFileNode!]!
  note: String!
  noteTruncated: String!
  fee: Int!
  isPending: Boolean!
  isAccepted: Boolean!
  isRejected: Boolean!
  isCompleted: Boolean!
  isCanceled: Boolean!
  isCanceledBySender: Boolean!
  isCanceledByRecipient: Boolean!
  isTimeout: Boolean!

  """公開されているかどうか"""
  isPublic: Boolean!

  """関連する決済"""
  payments: [PromptonPaymentNode!]!
  hasSignature: Boolean!
  signature: String

  """手数料"""
  commission: Int!
  quantity: Int!
  unitPrice: Int!
  planId: String
  plan: PromptonPlanNode
  planName: String
  planDescription: String
  planUnitPrice: Int
  planFeaturePrivate: Boolean
  planFeatureCopyrightFree: Boolean
  planFeatureCommercialUse: Boolean
  planFeatureFanFiction: Boolean
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  isCoffee: Boolean!
  isAipic: Boolean!
}

input PromptonRequestsWhereInput {
  status: String
}

type PromptonSlug {
  name: String!
  value: String!
}

type PromptonTagNode implements Node {
  id: ID!
  updatedAt: Int!
  name: String!
  nameJA: String!
  slug: String
  firstWork: PromptonWorkNode
  worksCount: Int!
  folders: [PromptonFolderNode!]!
  foldersCount: Int!
  users: [PromptonUserNode!]!
  usersCount: Int!
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}

input PromptonTagsWhereInput {
  search: String
  isPinned: Boolean
}

"""ユーザ"""
type PromptonUserNode implements Node {
  id: ID!
  updatedAt: Int!

  """名前（日本語の使用が可能）"""
  name: String!

  """ログイン名（英数字のみ）"""
  login: String!

  """作品"""
  firstWork: PromptonWorkNode

  """アイコンの画像URL"""
  avatarImageURL: String

  """アイコンのID"""
  avatarImageId: String

  """アイコンのファイル"""
  avatarImageFile: PromptonFileNode
  headerImageFileId: String

  """マイページのヘッダー画像のファイル"""
  headerImageFile: PromptonFileNode!

  """自己紹介"""
  biography: String!

  """メッセージ"""
  message: String!
  hasProfileURL: Boolean!

  """ユーザ名"""
  twitterUsername: String
  twitterURL: String

  """ユーザ名"""
  githubUsername: String
  githubURL: String

  """ユーザ名"""
  instagramUsername: String
  instagramURL: String

  """ユーザ名"""
  pixivUsername: String
  pixivURL: String

  """ユーザ名"""
  tumblrUsername: String
  tumblrURL: String

  """ユーザ名"""
  deviantartUsername: String
  deviantartURL: String

  """サイトURL"""
  siteURL: String
  siteTitle: String
  siteDescription: String
  siteImageURL: String

  """関連する作品"""
  works(offset: Int!, limit: Int!, where: PromptonUserWorksWhereInput): [PromptonWorkNode!]!

  """最新の作品"""
  latestWork: PromptonWorkNode

  """リクエストされた作品"""
  latestRequestedWork: PromptonWorkNode

  """リクエストされた作品"""
  requestedWorks: [PromptonWorkNode!]!

  """フォローされている数"""
  followersCount: Int

  """フォローしている数"""
  followeesCount: Int

  """依頼した数"""
  requestsCount: Int!

  """依頼された数"""
  acceptedRequestsCount: Int!

  """対応中のリクエスト数"""
  queueRequestsCount: Int!

  """作品の数"""
  worksCount: Int!

  """ログインしているユーザにフォローされているかどうか"""
  isFollower: Boolean!

  """ログインしているユーザをフォローしているかどうか"""
  isFollowee: Boolean!

  """関係"""
  friendships: [PromptonFriendshipNode!]!
  imageGenerations(offset: Int!, limit: Int!, where: PromptonImageGenerationsWhereInput): [PromptonImageGenerationNode!]!

  """制作依頼を受け付けているかどうか"""
  isRequestable: Boolean!

  """Stripeの決済方法"""
  paymentMethod: PromptonPaymentMethodNode

  """プラン"""
  plans: [PromptonPlanNode!]!

  """フォルダ"""
  firstFolder: PromptonFolderNode

  """フォルダ"""
  folders(offset: Int!, limit: Int!): [PromptonFolderNode!]!

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!

  """Stripeの顧客ID"""
  customerId: String

  """Stripeの顧客"""
  customer: PromptonCustomerNode

  """StripeのアカウントID"""
  accountId: String

  """Stripeのアカウントの登録のリンク"""
  accountLink: String

  """Stripeのアカウントのトークンを取得する"""
  accountSessionClientSecret: String

  """Stripeのアカウント"""
  account: PromptonAccountNode

  """Stripeの決済履歴"""
  payments(offset: Int!, limit: Int!): [PromptonPaymentNode!]!

  """Stripeの決済履歴"""
  paymentIntents(offset: Int!, limit: Int!): [PromptonPaymentIntentNode!]!

  """Stripeの出金履歴"""
  payouts(offset: Int!, limit: Int!): [PromptonPayoutNode!]!

  """プロフィール"""
  profileBlocks: [PromptonProfileBlockNode!]!

  """削除済みかどうか"""
  isDeleted: Boolean!

  """承認済みのリクエスト"""
  acceptedRequests: [PromptonRequestNode!]!

  """リクエスト作品"""
  requestWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!

  """ユーザー"""
  rootUser: UserNode

  """ユーザー"""
  user: UserNode

  """登録番号"""
  invoiceRegistrationNumber: String
}

input PromptonUsersWhereInput {
  search: String
}

input PromptonUserWorksWhereInput {
  isUncategorized: Boolean
}

"""ログインしているユーザ"""
type PromptonViewer {
  id: ID!
  user: PromptonUserNode!
  likedWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  followees(offset: Int!, limit: Int!): [PromptonUserNode!]!
  requests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  sentRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  receivedRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  pendingRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  currentRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  deliverables(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  prompts(offset: Int!, limit: Int!): [PromptonPromptNode!]!
  nextRequests: [PromptonRequestNode!]!
  hasNextRequests: Boolean!
  integrations(offset: Int!, limit: Int!): [PromptonIntegrationNode!]!
  imageGenerations(offset: Int!, limit: Int!, where: PromptonImageGenerationsWhereInput): [PromptonImageGenerationNode!]!
}

input PromptonViewerWorksWhereInput {
  isUncategorized: Boolean
}

"""作品"""
type PromptonWorkNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!

  """タイトル"""
  title: String

  """説明"""
  body: String

  """ファイルのID"""
  fileId: String

  """ファイルのID"""
  file: PromptonFileNode!

  """ファイルのID"""
  rectangleImageFile: PromptonFileNode

  """プロンプト"""
  inputtedPrompt: String

  """検出されたプロンプト"""
  detectedPrompt: String

  """プロンプト"""
  runtimePrompt: String

  """ソフトウェア"""
  software: String

  """検出されたソフトウェア"""
  detectedSoftware: String

  """シード値"""
  seed: String

  """検出されたシード値"""
  detectedSeed: String

  """いいね数"""
  likesCount: Int!

  """ユーザ"""
  user: PromptonUserNode!
  folderIndex: Int!
  homeIndex: Int!

  """関連する色"""
  colors: [String!]!

  """関連するWebカラー"""
  webColors: [String!]!

  """関連するラベル"""
  labels: [PromptonLabelNode!]!

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!

  """セーフサーチ・アダルト関連の内容である可能性"""
  annotationAdult: String

  """セーフサーチ・悪ふざけの内容である可能性"""
  annotationSpoof: String

  """セーフサーチ・医療関連の内容である可能性"""
  annotationMedical: String

  """セーフサーチ・性的な内容である可能性"""
  annotationRacy: String

  """セーフサーチ・暴力的な内容である可能性"""
  annotationViolence: String

  """関連するリクエスト"""
  request: PromptonRequestNode

  """ログインしているユーザが作品に対していいね済みかどうか"""
  isLiked: Boolean!

  """ログインしているユーザが作品に対してブックマーク済みかどうか"""
  isBookmarked: Boolean!

  """削除されているかどうか"""
  isDeleted: Boolean!

  """自分の作品かどうか"""
  isMine: Boolean!

  """公開されているかどうか"""
  isPublic: Boolean!

  """ピン留めされているかどうか"""
  isPinned: Boolean!

  """プライベートリクエストかどうか"""
  isPrivateRequest: Boolean!

  """著作権を譲渡しているかどうか"""
  isCopyrightFreeRequest: Boolean!

  """リクエスト作品かどうか"""
  isRequest: Boolean!

  """NSFW作品かどうか"""
  isNSFW: Boolean!

  """閲覧数"""
  viewsCount: Int!

  """NSFW理由"""
  nsfwReason: String

  """関連する作品"""
  relatedWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}

input PromptonWorksWhereInput {
  tagSlugs: [String!]
  search: String
  color: String
}

type Query {
  """シリーズ"""
  album(id: ID!): AlbumNode

  """シリーズ"""
  albums(offset: Int!, limit: Int!, where: AlbumsWhereInput): [AlbumNode!]

  """運営からのお知らせ"""
  announcements(offset: Int!, limit: Int!): [AnnouncementNode!]!

  """
  全期間の人気作品
  ※キャッシュ不可
  """
  bestWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """カテゴリ"""
  categories: [CategoryNode!]!

  """カテゴリ"""
  category(id: ID!): CategoryNode!

  """コメント"""
  comments(offset: Int!, limit: Int!, where: CommentsWhereInput!, orderBy: CommentsOrderBy!): [CommentNode!]!

  """日別テーマ"""
  dailyTheme(id: ID, year: Int, month: Int, day: Int): DailyThemeNode

  """日別テーマ"""
  dailyThemes(offset: Int!, limit: Int!, where: DailyThemesWhereInput): [DailyThemeNode!]!

  """フォルダ"""
  folder(id: ID!): FolderNode

  """フォルダ"""
  folders(offset: Int!, limit: Int!, where: FoldersWhereInput): [FolderNode!]

  """ホームのタグ"""
  homeTags: [TagNode!]!

  """トレンドのタグ"""
  hotTags: [TagNode!]!

  """
  1日以内の人気の作品
  ※キャッシュ不可
  """
  hotWorks(where: HotWorksWhereInput): [WorkNode!]!

  """画像生成のタスク状況"""
  imageGenerationEngineStatus: ImageGenerationEngineStatus!

  """画像生成サービス"""
  imageGenerators: [ImageGeneratorNode!]!

  """画像生成モデル"""
  imageLoraModel(id: ID!): ImageLoraModelNode!

  """画像生成モデル"""
  imageLoraModels: [ImageLoraModelNode!]!

  """画像生成モデル"""
  imageModel(id: ID!): ImageModelNode!

  """画像生成モデル"""
  imageModels: [ImageModelNode!]!

  """画像生成履歴"""
  imageGenerationTask(id: ID!): ImageGenerationTaskNode!

  """予約画像生成履歴"""
  imageGenerationReservedTask(id: ID!): ImageGenerationTaskNode!

  """画像生成メモ"""
  imageGenerationMemo(id: ID!): ImageGenerationMemoNode!

  """画像生成メモ一覧"""
  imageGenerationMemos(offset: Int!, limit: Int!, orderBy: ImageGenerationMemoOrderBy): [ImageGenerationMemoNode]!

  """マイルストーン"""
  milestones(where: MilestonesWhereInput!): [MilestoneNode!]!

  """
  全期間の人気作品
  ※キャッシュ不可
  """
  popularWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """プロモーション"""
  promotion(id: ID!): PromotionNode

  """プロモーション"""
  promotions(offset: Int!, limit: Int!): [PromotionNode!]!

  """画像生成キーワード"""
  promptCategories: [PromptCategoryNode!]!

  """スタンプ"""
  sticker(id: ID!): StickerNode

  """スタンプ"""
  stickers(offset: Int!, limit: Int!, where: StickersWhereInput): [StickerNode!]!

  """タグ"""
  tag(name: String!): TagNode

  """全てのタグ"""
  tags(offset: Int!, limit: Int!, where: TagsWhereInput): [TagNode!]!

  """ユーザ"""
  user(id: ID!): UserNode

  """ユーザ"""
  users(offset: Int!, limit: Int!, where: UsersWhereInput): [UserNode!]!

  """ユーザ設定"""
  userSetting: UserSettingNode

  """ログイン中のユーザ"""
  viewer: Viewer

  """作品"""
  work(id: ID!): WorkNode

  """
  ランキング履歴
  ※キャッシュ不可
  """
  workAwards(offset: Int!, limit: Int!, where: WorkAwardsWhereInput!): [WorkAwardNode!]!

  """
  作品
  ※キャッシュ不可
  """
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]!

  """プロンプトン"""
  promptonViewer: PromptonViewer!
  promptonFolder(id: ID!): PromptonFolderNode
  promptonFolders(offset: Int!, limit: Int!, where: PromptonFoldersWhereInput): [PromptonFolderNode!]!
  promptonImageGenerations(offset: Int!, limit: Int!, where: PromptonImageGenerationsWhereInput): [PromptonImageGenerationNode!]!
  promptonLabel(id: ID, name: String): PromptonLabelNode
  promptonLabels(offset: Int!, limit: Int!, where: PromptonLabelsWhereInput): [PromptonLabelNode!]!
  promptonPlan(id: ID!): PromptonPlanNode
  promptonPlans(offset: Int!, limit: Int!, where: PromptonPlansWhereInput): [PromptonPlanNode!]!
  promptonRequest(id: ID!): PromptonRequestNode
  promptonTag(id: ID, slug: String): PromptonTagNode
  promptonTags(offset: Int!, limit: Int!, where: PromptonTagsWhereInput): [PromptonTagNode!]!
  promptonUser(id: ID!): PromptonUserNode
  promptonUsers(offset: Int!, limit: Int!, where: PromptonUsersWhereInput): [PromptonUserNode!]!
  promptonWork(id: ID!): PromptonWorkNode
  promptonWorks(offset: Int!, limit: Int!, where: PromptonWorksWhereInput): [PromptonWorkNode!]!
}

"""年齢制限"""
enum Rating {
  """全年齢"""
  G

  """R15"""
  R15

  """R18"""
  R18

  """R18+"""
  R18G
}

input RejectPromptonRequestInput {
  requestId: String!
}

input RemovePromptonTagFromWorkInput {
  workId: String!
  tagId: String!
}

input RemovePromptonWorkFromFolderInput {
  folderId: String!
  workId: String!
}

input ReportAlbumInput {
  albumId: ID!
  reason: ReportReason!
}

input ReportCommentInput {
  commentId: ID!
  reason: ReportReason!
}

input ReportFolderInput {
  folderId: ID!
  reason: ReportReason!
}

"""報告理由"""
enum ReportReason {
  """誹謗中傷"""
  SLANDER

  """著作権侵害"""
  COPYRIGHT

  """センシティブ"""
  SENSITIVE

  """スパム"""
  SPAM

  """その他"""
  OTHER
}

input ReportStickerInput {
  stickerId: ID!
  reason: ReportReason!
}

input ReportUserInput {
  userId: ID!
  reason: ReportReason!
}

input ReportWorkInput {
  workId: ID!
  reason: ReportReason!
}

input SignImageGenerationTermsInput {
  version: Int!
}

enum StickerGenre {
  """人物"""
  CHARACTER

  """動物"""
  ANIMAL

  """機械"""
  MACHINE

  """背景"""
  BACKGROUND

  """物"""
  OBJECT
}

"""スタンプ"""
type StickerNode implements Node {
  id: ID!
  createdAt: Int!

  """タイトル"""
  title: String!
  imageId: ID

  """画像"""
  image: ImageNode
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """閲覧の種類"""
  accessType: AccessType!

  """いいね数"""
  likesCount: Int!

  """使用回数"""
  usesCount: Int!

  """ダウンロード数"""
  downloadsCount: Int!

  """いいねしている"""
  isLiked: Boolean!

  """マイスタンプに追加している"""
  isDownloaded: Boolean!

  """ジャンル"""
  genre: StickerGenre!

  """カテゴリ"""
  categories: [String!]!

  """削除済み"""
  isDeleted: Boolean!
  viewer: StickerViewerNode @deprecated(reason: "isLikedを使用する")
}

input StickersWhereInput {
  search: String
  isSensitive: Boolean
}

type StickerViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
}

type SubWorkNode implements Node {
  id: ID!
  imageId: ID

  """画像のURL"""
  image: ImageNode!
  thumbnailImageId: ID!

  """サムネイル画像のURL"""
  thumbnailImage: ImageNode!
}

"""タグ"""
type TagNode implements Node {
  id: ID!

  """名前"""
  name: String!

  """関連する作品"""
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]!

  """作品数"""
  worksCount: Int!

  """いいね数"""
  likesCount: Int!

  """最初の作品"""
  firstWork: WorkNode

  """いいねしている"""
  isLiked: Boolean!

  """保存している"""
  isWatched: Boolean!

  """ミュートしている"""
  isMuted: Boolean!
  viewer: TagViewerNode @deprecated
}

input TagsWhereInput {
  search: String
}

type TagViewerNode implements Node {
  id: ID!
  isLiked: Boolean! @deprecated
  isWatched: Boolean! @deprecated
  isMuted: Boolean! @deprecated
}

input TestPromptonIntegrationInput {
  integrationId: String!
}

input UnfollowPromptonUserInput {
  userId: String!
}

input UnfollowUserInput {
  userId: ID!
}

input UnmuteTagInput {
  tagName: String!
}

input UnmuteUserInput {
  userId: ID!
}

input UnpinPromptonWorkInput {
  workId: String!
}

input UnwatchFolderInput {
  userId: ID!
}

input UpdateAccountFcmTokenInput {
  token: String
}

input UpdateAccountLoginInput {
  login: String!
}

input UpdateAccountPasswordInput {
  currentPassword: String
  newPassword: String!
}

input UpdateAccountWebFcmTokenInput {
  token: String
}

input UpdateAlbumInput {
  albumId: ID!
}

input UpdateFolderInput {
  folderId: ID!
  title: String!
}

input UpdateImageGenerationMemoInput {
  nanoid: String!
  title: String!
  explanation: String!
  prompts: String!
  negativePrompts: String!
  sampler: String!
  vae: String!
  modelId: ID!
  seed: Int!
  steps: Int!
  scale: Int!
  clipSkip: Int!
  width: Int!
  height: Int!
}

input UpdateNoteInput {
  noteId: ID!
}

input UpdateNovelInput {
  novelId: ID!
}

input UpdatePromptonFolderInput {
  folderId: String!
  name: String!
  description: String!
  imageFileId: String
}

input UpdatePromptonFolderSortInput {
  folderId: String!
}

input UpdatePromptonPlanInput {
  planId: String!
  category: String!
  name: String!
  message: String!
  description: String!
  unitPrice: Int!
  minimumQuantity: Int!
  maximumQuantity: Int!
  styleSlugs: [String!]!
  objectSlugs: [String!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  imageFileId: String
}

input UpdatePromptonPlanSortInput {
  planId: String!
}

input UpdatePromptonProfileBlockInput {
  profileBlockId: String!
  siteURL: String
  title: String
  description: String
}

input UpdatePromptonPromptCategoryInput {
  promptCategoryId: String!
  name: String!
  description: String
}

input UpdatePromptonPromptInput {
  promptId: String!
  name: String!
  description: String
  isNsfw: Boolean!
  isBase: Boolean!
  isSingle: Boolean!
}

input UpdatePromptonUserAvatarInput {
  avatarFileId: String
}

input UpdatePromptonUserHeaderImageInput {
  imageFileId: String!
}

input UpdatePromptonUserInvoiceRegistrationNumberInput {
  invoiceRegistrationNumber: String
}

input UpdatePromptonUserLoginInput {
  login: String!
}

input UpdatePromptonUserProfileInput {
  name: String!
  biography: String
  twitterUsername: String
  githubUsername: String
  instagramUsername: String
  pixivUsername: String
  tumblrUsername: String
  deviantartUsername: String
}

input UpdatePromptonWorkInput {
  workId: String!
  title: String
  body: String
}

input UpdateProtectedImageGenerationTaskInput {
  nanoid: String!
  isProtected: Boolean!
}

input UpdateRatingImageGenerationModelInput {
  modelId: ID!
  rating: Int!
}

input UpdateRatingImageGenerationTaskInput {
  nanoid: String!
  rating: Int!
}

input UpdateStickerInput {
  stickerId: ID!
  title: String!
}

input UpdateUserProfileInput {
  displayName: String!
  biography: String!
}

input UpdateWorkInput {
  workId: ID!
  title: String!
}

input UserAlbumInput {
  search: String
  isSensitive: Boolean
}

input UserFolderInput {
  search: String
  isSensitive: Boolean
}

"""ユーザ"""
type UserNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """表示名"""
  name: String!

  """ログインID"""
  login: String!

  """サイトURL"""
  siteURL: String

  """受け取ったいいね数"""
  receivedLikesCount: Int!

  """受け取った閲覧数"""
  receivedViewsCount: Int!

  """フォロワー数"""
  followersCount: Int!

  """入賞回数"""
  awardsCount: Int!

  """投稿した作品数"""
  worksCount: Int!

  """
  作品
  ※キャッシュ不可
  """
  works(offset: Int!, limit: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """フォロワー（ユーザをフォローしているユーザ）"""
  followers(offset: Int!, limit: Int!): [UserNode!]!

  """フォロー（ユーザがフォローしているユーザ)"""
  followees(offset: Int!, limit: Int!): [UserNode!]!

  """アワード（作品）"""
  workAwards(offset: Int!, limit: Int!, where: AwardsWhereInput): [WorkAwardNode!]!

  """スタンプ"""
  stickers(offset: Int!, limit: Int!): [StickerNode!]!

  """シリーズ"""
  albums(offset: Int!, limit: Int!, where: UserAlbumInput): [AlbumNode!]!

  """フォルダ"""
  folders(offset: Int!, limit: Int!, where: UserFolderInput): [FolderNode!]!

  """アイコン画像のID"""
  iconImageId: ID

  """アイコン画像"""
  iconImage: ImageNode

  """ヘッダー画像のID"""
  headerImageId: ID

  """ヘッダー画像"""
  headerImage: ImageNode

  """X"""
  twitterAccountId: String

  """Instagram"""
  instagramAccountId: String

  """GitHub"""
  githubAccountId: String

  """紹介"""
  biography: String
  workCreatedAt: Int

  """プロンプトンのユーザ"""
  promptonUser: PromptonUserNode

  """Open Graph タイトル"""
  openGraphTitle: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """シェア"""
  shareText: String

  """FCMトークン"""
  fcmToken: String

  """WebFCMトークン"""
  webFcmToken: String

  """画像生成機能の利用規約に同意済みである"""
  hasSignedImageGenerationTerms: Boolean!

  """フォローされている"""
  isFollower: Boolean!

  """フォローしている"""
  isFollowee: Boolean!

  """ミュートしている"""
  isMuted: Boolean!
  viewer: UserViewerNode @deprecated
  nanoid: String
}

"""ユーザの設定"""
type UserSettingNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  favoritedImageGenerationModelIds: [Int!]!

  """ダークモードを使用する"""
  useDarkMode: Boolean!
  useDisableGenerateTime: Int!
}

input UsersWhereInput {
  search: String
}

type UserViewerNode implements Node {
  id: ID! @deprecated
  isFollower: Boolean! @deprecated
  isFollowee: Boolean! @deprecated
  isMuted: Boolean! @deprecated
}

input UserWorksWhereInput {
  search: String
  isSensitive: Boolean
}

"""ログイン中のユーザ"""
type Viewer {
  """シリーズ"""
  albums(offset: Int!, limit: Int!): [AlbumNode!]!

  """現在の有効な画像生成のタスク"""
  currentImageGenerationTasks: [ImageGenerationTaskNode!]!

  """現在の有効な画像生成のメモ"""
  currentImageGenerationMemos: [ImageGenerationMemoNode!]!

  """お気に入りのモデル一覧"""
  favoritedImageGenerationModels: [ImageModelNode!]!

  """現在の生成中の画像生成のタスク"""
  inProgressImageGenerationTasksCount: Int!

  """現在の予約生成中の画像生成のタスク"""
  inProgressImageGenerationReservedTasksCount: Int!

  """今日の有効な画像生成のタスクの数"""
  remainingImageGenerationTasksCount: Int!

  """現在の有効な画像生成の累計タスクの数"""
  remainingImageGenerationTasksTotalCount: Int!

  """利用可能な最大タスク数"""
  availableImageGenerationMaxTasksCount: Int!

  """利用可能なLoRA数"""
  availableImageGenerationLoraModelsCount: Int!

  """連続で生成可能な最大タスク数"""
  availableConsecutiveImageGenerationsCount: Int!

  """レーティング可能な最大数"""
  availableImageGenerationMaxRatingCount: Int!

  """生成待ち人数（自身も含む）"""
  imageGenerationWaitCount: Int!

  """現在のパス"""
  currentPass: PassNode

  """
  カスタマーポータル
  ※非推奨
  """
  customerPortalURL: String

  """フィードの作品"""
  feedWorks(offset: Int!, limit: Int!): [WorkNode!]!

  """コレクション"""
  folders(offset: Int!, limit: Int!): [FolderNode!]!

  """有効な画像生成のタスク"""
  imageGenerationTasks(offset: Int!, limit: Int!, where: ImageGenerationTasksWhereInput): [ImageGenerationTaskNode!]!

  """いいねした作品"""
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!

  """メッセージのスレッド"""
  messageThreads(offset: Int!, limit: Int!): [MessageThreadNode!]!

  """メッセージのスレッド"""
  messageThread(threadId: ID!): MessageThreadNode

  """ミュートしたタグ"""
  mutedTags(offset: Int!, limit: Int!): [TagNode!]!

  """ミュートしたユーザ"""
  mutedUsers(offset: Int!, limit: Int!): [UserNode!]!

  """通知"""
  notifications(offset: Int!, limit: Int!): [NotificationNode!]!

  """決済履歴"""
  payments: [PaymentNode!]!

  """作成したスタンプ"""
  stickers(offset: Int!, limit: Int!): [StickerNode!]!

  """お問い合わせ対応のメッセージ"""
  supportMessages(offset: Int!, limit: Int!): [MessageNode!]!

  """ユーザ"""
  user: UserNode!

  """保存したスタンプ"""
  userStickers(offset: Int!, limit: Int!): [StickerNode!]!

  """保存したコレクション"""
  watchedFolders(offset: Int!, limit: Int!): [FolderNode!]!

  """自分の作品"""
  works(offset: Int!, limit: Int!): [WorkNode!]!
}

input WatchFolderInput {
  folderId: ID!
}

"""アワード（作品）"""
type WorkAwardNode implements Node {
  id: ID!
  index: Int!
  userId: ID!

  """ユーザ"""
  user: UserNode!
  workId: ID

  """作品"""
  work: WorkNode!
  dateText: String!
}

"""通知（作品のランキング）"""
type WorkAwardNotificationNode implements Node {
  id: ID!

  """時刻"""
  createdAt: Int!

  """メッセージ"""
  message: String

  """作品"""
  work: WorkNode
  workId: ID
}

input WorkAwardsWhereInput {
  type: AwardType
  date: String
  year: Int
  month: Int
  day: Int
  weekIndex: Int
}

"""通知（コメント）"""
type WorkCommentNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode
  userId: ID
  message: String
  sticker: StickerNode
  stickerId: ID
  work: WorkNode
  workId: ID
}

"""通知（リプライ）"""
type WorkCommentReplyNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID

  """ユーザ"""
  user: UserNode

  """メッセージ"""
  message: String
  stickerId: ID

  """スタンプ"""
  sticker: StickerNode
  workId: ID

  """作品"""
  work: WorkNode
}

"""作品のコンテスト"""
type WorkEventNode implements Node {
  id: ID!
  title: String
  link: String
  description: String
  startTime: Int!
  endTime: Int!
  users(offset: Int!, limit: Int!): [UserNode!]!
}

"""作品"""
type WorkNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """年齢制限"""
  rating: Rating

  """センシティブである"""
  isSensitive: Boolean!

  """タイトル"""
  title: String!

  """説明"""
  description: String

  """種類"""
  type: String!

  """テーマ"""
  dailyTheme: DailyThemeNode

  """閲覧権限の種類"""
  accessType: AccessType!

  """プロンプトの閲覧権限の種類"""
  promptAccessType: AccessType!

  """いいね数"""
  likesCount: Int!

  """いいね数"""
  commentsCount: Int!

  """閲覧数"""
  viewsCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!

  """画像URL"""
  imageURL: String!

  """画像ID"""
  imageId: ID! @deprecated

  """画像"""
  image: ImageNode @deprecated

  """画像の幅"""
  imageWidth: Int!

  """画像の高さ"""
  imageHeight: Int!

  """画像の比率"""
  imageAspectRatio: Float!

  """サムネイル画像の位置"""
  thumbnailImagePosition: Int

  """画像URL（サムネイル）"""
  thumbnailImageId: ID!
  thumbnailImage: ImageNode @deprecated

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!
  largeThumbnailImageId: ID! @deprecated

  """画像（大）URL（サムネイル）"""
  largeThumbnailImage: ImageNode @deprecated

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!

  """OGP画像"""
  ogpThumbnailImageId: ID!

  """画像URL（サムネイル）"""
  ogpThumbnailImage: ImageNode

  """プロンプト"""
  prompt: String

  """ネガティブプロンプト"""
  negativePrompt: String

  """シード値"""
  seed: Float

  """画像生成関連の設定"""
  steps: Int

  """画像生成関連の設定"""
  scale: Int

  """画像生成関連の設定"""
  model: String

  """画像生成関連の設定"""
  modelHash: String

  """画像生成関連の設定"""
  sampler: String

  """ユーザID"""
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """コメント"""
  comment(id: ID!): CommentNode! @deprecated

  """コメント"""
  comments(offset: Int!, limit: Int!): [CommentNode!]!

  """作品"""
  subWorks: [SubWorkNode!]!

  """Open Graph タイトル"""
  openGraphTitle: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """シェア"""
  shareText: String

  """次の作品"""
  nextWork: WorkNode

  """前の作品"""
  previousWork: WorkNode

  """関連するタグ"""
  relatedTags(offset: Int!, limit: Int!): [TagNode!]!

  """関連する作品"""
  relatedWorks(offset: Int!, limit: Int!): [WorkNode!]!

  """いいねしている"""
  isLiked: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """非推奨"""
  viewer: WorkViewerNode @deprecated(reason: "isLikedを使用する")
}

enum WorkOrderBy {
  DATE_CREATED
  LIKES_COUNT
}

input WorksWhereInput {
  """検索"""
  search: String

  """プロンプト"""
  prompts: [String!]

  """プロンプトが存在する"""
  hasPrompt: Boolean

  """画像生成用のプロンプトが存在する"""
  hasGeneratorPrompt: Boolean

  """スタイル"""
  style: ImageStyle

  """ソート"""
  orderBy: WorkOrderBy

  """検索の対象"""
  searchTargets: [String!]

  """センシティブである"""
  isSensitive: Boolean

  """タグの名前"""
  tagNames: [String!]
}

"""作品の種類"""
enum WorkType {
  """画像"""
  WORK

  """小説"""
  NOVEL

  """動画"""
  VIDEO
}

type WorkViewerNode implements Node {
  id: ID! @deprecated
  isLiked: Boolean! @deprecated
  isBookmarked: Boolean! @deprecated
}

