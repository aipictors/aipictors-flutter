directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) on SCHEMA

directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) on OBJECT | INTERFACE

directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION

directive @federation__external(reason: String) on OBJECT | FIELD_DEFINITION

directive @federation__tag(name: String!) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__extends on OBJECT | INTERFACE

directive @shareable on OBJECT | FIELD_DEFINITION

directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @federation__override(from: String!) on FIELD_DEFINITION

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

scalar _Any

union _Entity = CommentNode | ContributorNode | DailyThemeNode | FolderLikeNode | FolderNode | FriendshipNode | ImageNode | MutedTagNode | MutedUserNode | NotificationNode | StickerNode | SubWorkNode | TagNode | UserNode | UserSettingNode | WorkAwardNode | WorkBookmarkNode | WorkEventNode | WorkLikeNode | WorkNode | WorkViewerNode

type _Service {
  sdl: String
}

enum AccessType {
  """公開"""
  PUBLIC

  """公開"""
  SILENT

  """非公開"""
  PRIVATE

  """限定公開"""
  LIMITED
}

input AwardsWhereInput {
  type: AwardType
  postType: PostType
  date: String
  year: Int
  month: Int
  day: Int
}

enum AwardType {
  MONTHLY
  WEEKLY
  DAILY
  DAILY_NO_THEME
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

"""コメント"""
type CommentNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID
  work: WorkNode
  stickerId: ID
  sticker: StickerNode
  type: String!
  createdAt: Int!
  text: String!
  responses(offset: Int!, limit: Int!): [CommentNode!]!
}

"""コントリビューター"""
type ContributorNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  types: [ContributorType!]!
}

"""コントリビューターの種類"""
enum ContributorType {
  """Wiki編集者"""
  WIKI_EDITOR

  """Webサイト開発者"""
  WEB_DEVELOPER

  """Flutterアプリ開発者"""
  FLUTTER_DEVELOPER

  """考案"""
  PRODUCT_DESIGNER

  """支援"""
  SUPPORTER
}

input CreateCommentInput {
  commentId: ID!
}

input CreateFolderInput {
  title: String!
}

input CreateStickerInput {
  title: String!
}

input CreateUserInput {
  idToken: String!
}

input CreateWorkBookmarkInput {
  workId: ID!
}

input CreateWorkInput {
  title: String!
}

input CreateWorkLikeInput {
  workId: ID!
}

"""作品の日別テーマ"""
type DailyThemeNode implements Node {
  id: ID!
  type: String!

  """タイトル"""
  title: String!

  """日付"""
  dateText: String!

  """年"""
  year: Int!

  """月"""
  month: Int!

  """日にち"""
  day: Int!

  """開始時刻"""
  startTime: Int!

  """作品"""
  works(offset: Int!, limit: Int!): [WorkNode!]!

  """作品数"""
  worksCount: Int!

  """作品"""
  firstWork: WorkNode
}

input DailyThemesWhereInput {
  search: String
  year: Int
  month: Int
  day: Int
  startDate: String
  endDate: String
}

input DeleteCommentInput {
  commentId: ID!
}

input DeleteFolderInput {
  folderId: ID!
}

input DeleteStickerInput {
  stickerId: ID!
}

input DeleteWorkBookmarkInput {
  workId: ID!
}

input DeleteWorkInput {
  workId: ID!
}

input DeleteWorkLikeInput {
  workId: ID!
}

scalar federation__FieldSet

"""作品のフォルダのイイネ"""
type FolderLikeNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID!

  """ユーザ"""
  user: UserNode!
  folderId: ID!

  """フォルダ"""
  folder: FolderNode!
}

"""作品のフォルダ"""
type FolderNode implements Node {
  id: ID!
  createdAt: Int!

  """スラッグ"""
  slug: String

  """タイトル"""
  title: String!

  """説明"""
  description: String!
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """いいね数"""
  likesCount: Int!

  """閲覧数"""
  viewsCount: Int!

  """年齢制限"""
  rating: Rating!

  """作品"""
  works(offset: Int!, limit: Int!): [WorkNode!]!

  """サムネイル"""
  thumbnailImageId: ID

  """サムネイル"""
  thumbnailImage: ImageNode
}

input FoldersWhereInput {
  search: String
}

input FollowUserInput {
  userId: ID!
}

"""ユーザのフォロ"""
type FriendshipNode implements Node {
  id: ID!
  followerId: ID!

  """フォローしたユーザ"""
  follower: UserNode!

  """フォローされたユーザ"""
  followeeId: ID!
  followee: UserNode!
  createdAt: Int!
}

"""画像"""
type ImageNode implements Node {
  id: ID!
  downloadURL: String!
  type: String!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type LoginResult {
  token: String!
}

input LoginWithPasswordInput {
  login: String!
  password: String!
}

type Mutation {
  loginWithPassword(input: LoginWithPasswordInput!): LoginResult!

  """ユーザを作成する"""
  createUser(input: CreateUserInput!): UserNode!

  """ユーザのプロフィールを作成する"""
  updateUserProfile(input: UpdateUserProfileInput!): UserNode!

  """作品を作成する"""
  createWork(input: CreateWorkInput!): WorkNode!

  """作品を削除する"""
  deleteWork(input: DeleteWorkInput!): WorkNode!

  """作品のコメントを作成する"""
  createComment(input: CreateCommentInput!): CommentNode!

  """作品のコメントを作成する"""
  deleteComment(input: DeleteCommentInput!): CommentNode!

  """作品のスキを作成する"""
  createWorkLike(input: CreateWorkLikeInput!): WorkNode!

  """作品のスキを削除する"""
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode!

  """作品のブックマークを作成する"""
  createWorkBookmark(input: CreateWorkBookmarkInput!): WorkNode!

  """作品のブックマークを削除する"""
  deleteWorkBookmark(input: DeleteWorkBookmarkInput!): WorkNode!

  """ユーザをフォローする"""
  followUser(input: FollowUserInput!): UserNode!

  """ユーザのフォローを解除する"""
  unfollowUser(input: UnfollowUserInput!): UserNode!

  """ユーザをミュートする"""
  muteUser(input: MuteUserInput!): UserNode!

  """ユーザのミュートを解除する"""
  unmuteUser(input: UnmuteUserInput!): UserNode!

  """タグをミュートする"""
  muteTag(input: MuteTagInput!): TagNode!

  """タグのミュートを解除する"""
  unmuteTag(input: UnmuteTagInput!): TagNode!

  """スタンプを作成する"""
  createSticker(input: CreateStickerInput!): StickerNode!

  """スタンプを更新する"""
  updateSticker(input: UpdateStickerInput!): StickerNode!

  """スタンプを削除する"""
  deleteSticker(input: DeleteStickerInput!): StickerNode!

  """フォルダを作成する"""
  createFolder(input: CreateFolderInput!): FolderNode!

  """フォルダを更新する"""
  updateFolder(input: UpdateFolderInput!): FolderNode!

  """フォルダを削除する"""
  deleteFolder(input: DeleteFolderInput!): FolderNode!
}

"""ミュートされたタグ"""
type MutedTagNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedTagId: ID!
  mutedTag: TagNode!
}

"""ユーザのミュート"""
type MutedUserNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedUserId: ID!
  mutedUser: UserNode!
}

input MuteTagInput {
  tagName: String!
}

input MuteUserInput {
  userId: ID!
}

interface Node {
  id: ID!
}

"""通知"""
type NotificationNode implements Node {
  id: ID!
  userId: ID
  user: UserNode
  message: String!
  relatedUserId: ID
  relatedUser: UserNode
  workId: ID
  work: WorkNode
  stickerId: ID
  sticker: StickerNode
  type: NotificationType!
  createdAt: Int!
}

enum NotificationType {
  LIKE
  COMMENT
  COMMENT_REPLY
  FOLLOW
}

input PopularWorksWhereInput {
  date: String
  rating: Rating
}

enum PostType {
  WORK
  NOVEL
  NOTE
}

type Query {
  """作品"""
  work(id: ID!): WorkNode

  """作品"""
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]

  """ユーザ"""
  user(id: ID!): UserNode

  """ユーザ"""
  users(offset: Int!, limit: Int!, where: UsersWhereInput): [UserNode!]

  """コントリビューター"""
  contributors: [ContributorNode!]!

  """フォルダ"""
  folder(id: ID!): FolderNode

  """フォルダ"""
  folders(offset: Int!, limit: Int!, where: FoldersWhereInput): [FolderNode!]

  """日別テーマ"""
  dailyTheme(id: ID!): DailyThemeNode

  """日別テーマ"""
  dailyThemes(offset: Int!, limit: Int!, where: DailyThemesWhereInput): [DailyThemeNode!]!

  """ステッカー"""
  sticker(id: ID!): StickerNode

  """ステッカー"""
  stickers(offset: Int!, limit: Int!, where: StickersWhereInput): [StickerNode!]!

  """ステッカー"""
  tag(name: String!): TagNode

  """ステッカー"""
  tags(offset: Int!, limit: Int!, where: TagsWhereInput): [TagNode!]!

  """トレンドのタグ"""
  hotTags: [TagNode!]!

  """ランキング履歴"""
  workAwards(offset: Int!, limit: Int!, where: WorkAwardsWhereInput!): [WorkAwardNode!]!

  """1日以内の人気の作品"""
  hotWorks: [WorkNode!]!

  """全期間の人気作品"""
  bestWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """全期間の人気作品"""
  popularWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """ログイン中のユーザ"""
  viewer: Viewer
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

"""年齢制限"""
enum Rating {
  """全年齢"""
  G

  """R15"""
  R15

  """R18"""
  R18

  """R18+"""
  R18G
}

"""ステッカー"""
type StickerNode implements Node {
  id: ID!
  createdAt: Int!

  """タイトル"""
  title: String!
  imageId: ID!

  """画像"""
  image: ImageNode!
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """閲覧の種類"""
  accessType: AccessType!

  """いいね数"""
  likesCount: Int!

  """使用回数"""
  usesCount: Int!

  """ダウンロード数"""
  downloadsCount: Int!
}

input StickersWhereInput {
  search: String
}

type SubWorkNode implements Node {
  id: ID!
  imageId: ID
  image: ImageNode!
  thumbnailImageId: ID!
  thumbnailImage: ImageNode!
}

"""タグ"""
type TagNode implements Node {
  id: ID!
  name: String!
  works(offset: Int!, limit: Int!): [WorkNode!]!
  worksCount: Int!
  likesCount: Int!
  firstWork: WorkNode
}

input TagsWhereInput {
  search: String
}

input UnfollowUserInput {
  userId: ID!
}

input UnmuteTagInput {
  tagName: String!
}

input UnmuteUserInput {
  userId: ID!
}

input UpdateFolderInput {
  folderId: ID!
}

input UpdateStickerInput {
  stickerId: ID!
  title: String!
}

input UpdateUserProfileInput {
  userId: ID!
}

"""ユーザ"""
type UserNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """表示名"""
  name: String!

  """ログインID"""
  login: String!

  """サイトURL"""
  siteURL: String

  """受け取ったいいね数"""
  receivedLikesCount: Int!

  """受け取った閲覧数"""
  receivedViewsCount: Int!

  """フォロワー数"""
  followersCount: Int!

  """入賞回数"""
  awardsCount: Int!

  """作品"""
  works(offset: Int!, limit: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """フォロワー（ユーザをフォローしているユーザ）"""
  followers(offset: Int!, limit: Int!): [UserNode!]!

  """フォロー（ユーザがフォローしているユーザ)"""
  followees(offset: Int!, limit: Int!): [UserNode!]!
  workAwards(offset: Int!, limit: Int!, where: AwardsWhereInput): [WorkAwardNode!]!
  stickers(offset: Int!, limit: Int!): [StickerNode!]!
  folders(offset: Int!, limit: Int!): [FolderNode!]!
  iconImageId: ID
  iconImage: ImageNode
  headerImageId: ID
  headerImage: ImageNode
  twitterAccountId: String
  instagramAccountId: String
  githubAccountId: String
  biography: String
  biographyEN: String
  workCreatedAt: Int
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!
}

"""ユーザの設定"""
type UserSettingNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  useDarkMode: Boolean!
}

input UsersWhereInput {
  search: String
}

input UserWorksWhereInput {
  search: String
}

"""ログイン中のユーザ"""
type Viewer {
  user: UserNode!
  bookmarkedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  notifications(offset: Int!, limit: Int!): [NotificationNode!]!
}

"""アワード（作品）"""
type WorkAwardNode implements Node {
  id: ID!
  index: Int!
  userId: ID!

  """ユーザ"""
  user: UserNode!
  workId: ID

  """作品"""
  work: WorkNode!
  dateText: String!
}

input WorkAwardsWhereInput {
  type: AwardType
  date: String
  year: Int
  month: Int
  day: Int
  weekIndex: Int
}

"""作品のブックマーク"""
type WorkBookmarkNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID!
  work: WorkNode!
}

"""作品のコンテスト"""
type WorkEventNode implements Node {
  id: ID!
  title: String
  link: String
  description: String
  startTime: Int!
  endTime: Int!
  users(offset: Int!, limit: Int!): [UserNode!]!
}

"""作品のイイネ"""
type WorkLikeNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID!
  work: WorkNode!
  createdAt: Int
}

"""作品"""
type WorkNode implements Node {
  id: ID!

  """作成日"""
  createdAt: Int!

  """年齢制限"""
  rating: Rating

  """タイトル"""
  title: String!

  """タイトル（英語）"""
  titleEN: String

  """説明"""
  description: String

  """説明（英語）"""
  descriptionEN: String

  """種類"""
  type: String!

  """テーマ"""
  dailyTheme: DailyThemeNode

  """閲覧権限の種類"""
  accessType: AccessType!

  """プロンプトの閲覧権限の種類"""
  promptAccessType: AccessType!

  """いいね数"""
  likesCount: Int!

  """閲覧数"""
  viewsCount: Int!

  """ブックマーク数"""
  bookmarksCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!
  imageId: ID!

  """画像URL"""
  image: ImageNode
  thumbnailImageId: ID!

  """画像URL（サムネイル）"""
  thumbnailImage: ImageNode
  largeThumbnailImageId: ID!

  """画像URL（サムネイル）"""
  largeThumbnailImage: ImageNode
  ogpThumbnailImageId: ID!

  """画像URL（サムネイル）"""
  ogpThumbnailImage: ImageNode

  """プロンプト"""
  prompt: String

  """ネガティブプロンプト"""
  negativePrompt: String

  """シード値"""
  seed: String

  """画像生成関連の設定"""
  steps: Int

  """画像生成関連の設定"""
  scale: Int

  """画像生成関連の設定"""
  model: String

  """画像生成関連の設定"""
  modelHash: String

  """画像生成関連の設定"""
  sampler: String

  """ユーザID"""
  userId: ID!

  """ユーザ"""
  user: UserNode!

  """コメント"""
  comments(offset: Int!, limit: Int!): [CommentNode!]!

  """作品"""
  subWorks: [SubWorkNode!]!

  """ログイン"""
  viewer: WorkViewerNode!
}

input WorksWhereInput {
  rating: Rating
  search: String
}

type WorkViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isBookmarked: Boolean!
}

