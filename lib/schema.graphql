schema {
  query: Query
  mutation: Mutation
}
scalar link__Import
scalar federation__FieldSet
scalar _Any
type Query {
  "作品"
  work(id: ID!): WorkNode
  "作品"
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]
  "ユーザ"
  user(id: ID!): UserNode
  "ユーザ"
  users(offset: Int!, limit: Int!, where: UsersWhereInput): [UserNode!]
  "コントリビューター"
  contributors: [ContributorNode!]!
  "フォルダ"
  folder(id: ID!): FolderNode
  "フォルダ"
  folders(offset: Int!, limit: Int!, where: FoldersWhereInput): [FolderNode!]
  "日別テーマ"
  dailyTheme(id: ID, year: Int, month: Int, day: Int): DailyThemeNode
  "日別テーマ"
  dailyThemes(offset: Int!, limit: Int!, where: DailyThemesWhereInput): [DailyThemeNode!]!
  "ステッカー"
  sticker(id: ID!): StickerNode
  "ステッカー"
  stickers(offset: Int!, limit: Int!, where: StickersWhereInput): [StickerNode!]!
  "タグ"
  tag(name: String!): TagNode
  "全てのタグ"
  tags(offset: Int!, limit: Int!, where: TagsWhereInput): [TagNode!]!
  "トレンドのタグ"
  hotTags: [TagNode!]!
  "ランキング履歴"
  workAwards(offset: Int!, limit: Int!, where: WorkAwardsWhereInput!): [WorkAwardNode!]!
  "1日以内の人気の作品"
  hotWorks: [WorkNode!]!
  "全期間の人気作品"
  bestWorks(where: PopularWorksWhereInput!): [WorkNode!]!
  "全期間の人気作品"
  popularWorks(where: PopularWorksWhereInput!): [WorkNode!]!
  "カテゴリ"
  categories: [CategoryNode!]!
  "カテゴリ"
  category: CategoryNode!
  "ログイン中のユーザ"
  viewer: Viewer
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
"ログイン中のユーザ"
type Viewer {
  user: UserNode!
  works(offset: Int!, limit: Int!): [WorkNode!]!
  folders(offset: Int!, limit: Int!): [FolderNode!]!
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  bookmarkedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  notifications(offset: Int!, limit: Int!): [NotificationNode!]!
  feedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  mutedUsers(offset: Int!, limit: Int!): [UserNode!]!
  mutedTags(offset: Int!, limit: Int!): [TagNode!]!
}
"コントリビューター"
type ContributorNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  types: [ContributorType!]!
}
"作品のブックマーク"
type WorkBookmarkNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID!
  work: WorkNode!
}
"タグ"
type TagNode implements Node {
  id: ID!
  name: String!
  works(offset: Int!, limit: Int!): [WorkNode!]!
  worksCount: Int!
  likesCount: Int!
  firstWork: WorkNode
  viewer: TagViewerNode
}
type TagViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isWatched: Boolean!
  isMuted: Boolean!
}
"コメント"
type CommentNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID
  work: WorkNode
  sticker: StickerNode
  type: String!
  createdAt: Int!
  text: String!
  responses(offset: Int!, limit: Int!): [CommentNode!]!
}
"作品のコンテスト"
type WorkEventNode implements Node {
  id: ID!
  title: String
  link: String
  description: String
  startTime: Int!
  endTime: Int!
  users(offset: Int!, limit: Int!): [UserNode!]!
}
"作品のイイネ"
type WorkLikeNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  workId: ID!
  work: WorkNode!
  createdAt: Int
}
"ユーザのフォロ"
type FriendshipNode implements Node {
  id: ID!
  followerId: ID!
  "フォローしたユーザ"
  follower: UserNode!
  "フォローされたユーザ"
  followeeId: ID!
  followee: UserNode!
  createdAt: Int!
}
"ミュートされたタグ"
type MutedTagNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedTagId: ID!
  mutedTag: TagNode!
}
"ユーザのミュート"
type MutedUserNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedUserId: ID!
  mutedUser: UserNode!
}
"作品"
type WorkNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "年齢制限"
  rating: Rating
  "タイトル"
  title: String!
  "タイトル（英語）"
  titleEN: String
  "説明"
  description: String
  "説明（英語）"
  descriptionEN: String
  "種類"
  type: String!
  "テーマ"
  dailyTheme: DailyThemeNode
  "閲覧権限の種類"
  accessType: AccessType!
  "プロンプトの閲覧権限の種類"
  promptAccessType: AccessType!
  "いいね数"
  likesCount: Int!
  "いいね数"
  commentsCount: Int!
  "閲覧数"
  viewsCount: Int!
  "ブックマーク数"
  bookmarksCount: Int!
  "タグ名"
  tagNames: [String!]!
  tags: [TagNode!]!
  imageId: ID!
  "画像URL"
  image: ImageNode
  "画像の幅"
  imageWith: Int!
  "画像の高さ"
  imageHeight: Int!
  "画像の比率"
  imageAspectRatio: Float!
  "画像URL（サムネイル）"
  thumbnailImageId: ID!
  thumbnailImage: ImageNode
  largeThumbnailImageId: ID!
  "画像URL（サムネイル）"
  largeThumbnailImage: ImageNode
  ogpThumbnailImageId: ID!
  "画像URL（サムネイル）"
  ogpThumbnailImage: ImageNode
  "プロンプト"
  prompt: String
  "ネガティブプロンプト"
  negativePrompt: String
  "シード値"
  seed: String
  "画像生成関連の設定"
  steps: Int
  "画像生成関連の設定"
  scale: Int
  "画像生成関連の設定"
  model: String
  "画像生成関連の設定"
  modelHash: String
  "画像生成関連の設定"
  sampler: String
  "ユーザID"
  userId: ID!
  "ユーザ"
  user: UserNode!
  "コメント"
  comments(offset: Int!, limit: Int!): [CommentNode!]!
  "作品"
  subWorks: [SubWorkNode!]!
  "ログイン"
  viewer: WorkViewerNode
}
type WorkViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isBookmarked: Boolean!
}
type SubWorkNode implements Node {
  id: ID!
  imageId: ID
  image: ImageNode!
  thumbnailImageId: ID!
  thumbnailImage: ImageNode!
}
"画像"
type ImageNode implements Node {
  id: ID!
  downloadURL: String!
  type: String!
}
"ユーザ"
type UserNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "表示名"
  name: String!
  "ログインID"
  login: String!
  "サイトURL"
  siteURL: String
  "受け取ったいいね数"
  receivedLikesCount: Int!
  "受け取った閲覧数"
  receivedViewsCount: Int!
  "フォロワー数"
  followersCount: Int!
  "入賞回数"
  awardsCount: Int!
  "作品"
  works(offset: Int!, limit: Int!, where: UserWorksWhereInput): [WorkNode!]!
  "フォロワー（ユーザをフォローしているユーザ）"
  followers(offset: Int!, limit: Int!): [UserNode!]!
  "フォロー（ユーザがフォローしているユーザ)"
  followees(offset: Int!, limit: Int!): [UserNode!]!
  workAwards(offset: Int!, limit: Int!, where: AwardsWhereInput): [WorkAwardNode!]!
  stickers(offset: Int!, limit: Int!): [StickerNode!]!
  folders(offset: Int!, limit: Int!): [FolderNode!]!
  iconImageId: ID
  iconImage: ImageNode
  headerImageId: ID
  headerImage: ImageNode
  twitterAccountId: String
  instagramAccountId: String
  githubAccountId: String
  biography: String
  biographyEN: String
  workCreatedAt: Int
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  viewer: UserViewerNode
}
type UserViewerNode implements Node {
  id: ID!
  isFollower: Boolean!
  isFollowee: Boolean!
  isMuted: Boolean!
}
"ユーザの設定"
type UserSettingNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  useDarkMode: Boolean!
}
"通知（いいねされた作品）"
type LikedWorkNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "いいねしたユーザ"
  user: UserNode
  userId: ID
  "作品"
  work: WorkNode
  workId: ID
  "匿名かどうか"
  isAnonymous: Boolean!
}
"通知（作品のいいね集計）"
type LikedWorksSummaryNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "メッセージ"
  message: String
}
"通知（作品のランキング）"
type WorkAwardNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "メッセージ"
  message: String
  "作品"
  work: WorkNode
  workId: ID
}
"通知（コメント）"
type WorkCommentNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode
  userId: ID
  message: String
  sticker: StickerNode
  stickerId: ID
  work: WorkNode
  workId: ID
}
"通知（リプライ）"
type WorkCommentReplyNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID
  user: UserNode
  message: String
  stickerId: ID
  sticker: StickerNode
  workId: ID
  work: WorkNode
}
"通知（フォロー）"
type FollowNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID
  user: UserNode
}
"アワード（作品）"
type WorkAwardNode implements Node {
  id: ID!
  index: Int!
  userId: ID!
  "ユーザ"
  user: UserNode!
  workId: ID
  "作品"
  work: WorkNode!
  dateText: String!
}
"作品のフォルダ"
type FolderNode implements Node {
  id: ID!
  createdAt: Int!
  "スラッグ"
  slug: String
  "タイトル"
  title: String!
  "説明"
  description: String!
  userId: ID!
  "ユーザ"
  user: UserNode!
  "いいね数"
  likesCount: Int!
  "閲覧数"
  viewsCount: Int!
  "年齢制限"
  rating: Rating!
  "作品"
  works(offset: Int!, limit: Int!): [WorkNode!]!
  "サムネイル"
  thumbnailImageId: ID
  "サムネイル"
  thumbnailImage: ImageNode
  viewer: FolderViewerNode
}
type FolderViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isWatched: Boolean!
}
"作品のフォルダのイイネ"
type FolderLikeNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID!
  "ユーザ"
  user: UserNode!
  folderId: ID!
  "フォルダ"
  folder: FolderNode!
}
"ステッカー"
type StickerNode implements Node {
  id: ID!
  createdAt: Int!
  "タイトル"
  title: String!
  imageId: ID
  "画像"
  image: ImageNode
  userId: ID!
  "ユーザ"
  user: UserNode!
  "閲覧の種類"
  accessType: AccessType!
  "いいね数"
  likesCount: Int!
  "使用回数"
  usesCount: Int!
  "ダウンロード数"
  downloadsCount: Int!
  viewer: StickerViewerNode
}
type StickerViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
}
"作品の日別テーマ"
type DailyThemeNode implements Node {
  id: ID!
  type: String!
  "タイトル"
  title: String!
  "日付"
  dateText: String!
  "年"
  year: Int!
  "月"
  month: Int!
  "日にち"
  day: Int!
  "開始時刻"
  startTime: Int!
  "作品"
  works(offset: Int!, limit: Int!): [WorkNode!]!
  "作品数"
  worksCount: Int!
  "作品"
  firstWork: WorkNode
}
"カテゴリ"
type CategoryNode implements Node {
  id: ID!
  name: String!
  viewer: CategoryViewerNode
}
type CategoryViewerNode implements Node {
  id: ID!
  isWatched: Boolean!
}
type Mutation {
  "アカウントを作成する"
  createAccount(input: CreateAccountInput!): UserNode!
  "アカウントのログインIDを作成する"
  updateAccountLogin(input: UpdateAccountLoginInput!): UserNode!
  "アカウントのパスワードを変更する"
  updateAccountPassword(input: UpdateAccountPasswordInput!): UserNode!
  "パスワードでログインする"
  loginWithPassword(input: LoginWithPasswordInput!): LoginResult!
  "ユーザのプロフィールを作成する"
  updateUserProfile(input: UpdateUserProfileInput!): UserNode!
  "ユーザを報告する"
  reportUser(input: ReportUserInput!): Boolean
  "作品を作成する"
  createWork(input: CreateWorkInput!): WorkNode!
  "作品を更新する"
  updateWork(input: UpdateWorkInput!): WorkNode!
  "作品を削除する"
  deleteWork(input: DeleteWorkInput!): WorkNode!
  "ユーザを報告する"
  reportWork(input: ReportWorkInput!): Boolean
  "作品のコメントを作成する"
  createWorkComment(input: CreateWorkCommentInput!): CommentNode!
  "リプライのコメントを作成する"
  createResponseComment(input: CreateResponseCommentInput!): CommentNode!
  "作品のコメントを削除する"
  deleteComment(input: DeleteCommentInput!): CommentNode!
  "コメントを報告する"
  reportComment(input: ReportCommentInput!): Boolean
  "作品のスキを作成する"
  createWorkLike(input: CreateWorkLikeInput!): WorkNode!
  "作品のスキを削除する"
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode!
  "作品のブックマークを作成する"
  createWorkBookmark(input: CreateWorkBookmarkInput!): WorkNode!
  "作品のブックマークを削除する"
  deleteWorkBookmark(input: DeleteWorkBookmarkInput!): WorkNode!
  "ユーザをフォローする"
  followUser(input: FollowUserInput!): UserNode!
  "ユーザのフォローを解除する"
  unfollowUser(input: UnfollowUserInput!): UserNode!
  "ユーザをミュートする"
  muteUser(input: MuteUserInput!): UserNode!
  "ユーザのミュートを解除する"
  unmuteUser(input: UnmuteUserInput!): UserNode!
  "タグをミュートする"
  muteTag(input: MuteTagInput!): TagNode!
  "タグのミュートを解除する"
  unmuteTag(input: UnmuteTagInput!): TagNode!
  "スタンプを作成する"
  createSticker(input: CreateStickerInput!): StickerNode!
  "スタンプを更新する"
  updateSticker(input: UpdateStickerInput!): StickerNode!
  "スタンプを削除する"
  deleteSticker(input: DeleteStickerInput!): StickerNode!
  "スタンプを報告する"
  reportSticker(input: ReportStickerInput!): Boolean
  "フォルダを作成する"
  createFolder(input: CreateFolderInput!): FolderNode!
  "フォルダを更新する"
  updateFolder(input: UpdateFolderInput!): FolderNode!
  "フォルダを削除する"
  deleteFolder(input: DeleteFolderInput!): FolderNode!
  "フォルダを報告する"
  reportFolder(input: ReportFolderInput!): Boolean
}
type LoginResult {
  token: String!
}
type _Service {
  sdl: String
}
interface Node {
  id: ID!
}
"通知"
union NotificationNode = LikedWorkNotificationNode | LikedWorksSummaryNotificationNode | WorkAwardNotificationNode | WorkCommentNotificationNode | WorkCommentReplyNotificationNode | FollowNotificationNode
union _Entity = CategoryNode | CategoryViewerNode | CommentNode | ContributorNode | DailyThemeNode | FolderLikeNode | FolderNode | FolderViewerNode | FollowNotificationNode | FriendshipNode | ImageNode | LikedWorkNotificationNode | LikedWorksSummaryNotificationNode | MutedTagNode | MutedUserNode | StickerNode | StickerViewerNode | SubWorkNode | TagNode | TagViewerNode | UserNode | UserSettingNode | UserViewerNode | WorkAwardNode | WorkAwardNotificationNode | WorkBookmarkNode | WorkCommentNotificationNode | WorkCommentReplyNotificationNode | WorkEventNode | WorkLikeNode | WorkNode | WorkViewerNode
"年齢制限"
enum Rating {
  "全年齢"
  G
  "R15"
  R15
  "R18"
  R18
  "R18+"
  R18G
}
enum AccessType {
  "公開"
  PUBLIC
  "公開"
  SILENT
  "非公開"
  PRIVATE
  "限定公開"
  LIMITED
}
"投稿の種類"
enum PostType {
  WORK
  NOVEL
  NOTE
}
"アワードの種類"
enum AwardType {
  MONTHLY
  WEEKLY
  DAILY
  DAILY_NO_THEME
}
"通知の種類"
enum NotificationType {
  "作品のいいね"
  LIKED_WORK
  "いいねの集計"
  LIKED_WORKS_SUMMARY
  "作品のランキング結果"
  WORK_AWARD
  "作品のコメント"
  WORK_COMMENT
  "コメントの返信"
  COMMENT_REPLY
  "フォロー"
  FOLLOW
}
"報告理由"
enum ReportReason {
  "誹謗中傷"
  SLANDER
  "著作権侵害"
  COPYRIGHT
  "センシティブ"
  SENSITIVE
  "スパム"
  SPAM
  "その他"
  OTHER
}
"コントリビューターの種類"
enum ContributorType {
  "Wiki編集者"
  WIKI_EDITOR
  "Webサイト開発者"
  WEB_DEVELOPER
  "Flutterアプリ開発者"
  FLUTTER_DEVELOPER
  "考案"
  PRODUCT_DESIGNER
  "支援"
  SUPPORTER
}
enum CacheControlScope {
  PUBLIC
  PRIVATE
}
enum link__Purpose {
  "`SECURITY` features provide metadata necessary to securely resolve fields."
  SECURITY
  "`EXECUTION` features provide metadata necessary for operation execution."
  EXECUTION
}
input WorksWhereInput {
  rating: Rating
  search: String
}
input UsersWhereInput {
  search: String
}
input FoldersWhereInput {
  search: String
}
input StickersWhereInput {
  search: String
}
input DailyThemesWhereInput {
  search: String
  year: Int
  month: Int
  day: Int
  startDate: String
  endDate: String
}
input TagsWhereInput {
  search: String
}
input AwardsWhereInput {
  type: AwardType
  postType: PostType
  date: String
  year: Int
  month: Int
  day: Int
}
input WorkAwardsWhereInput {
  type: AwardType
  date: String
  year: Int
  month: Int
  day: Int
  weekIndex: Int
}
input PopularWorksWhereInput {
  date: String
  rating: Rating
}
input UserWorksWhereInput {
  search: String
}
input UpdateAccountLoginInput {
  login: String!
}
input UpdateAccountPasswordInput {
  currentPassword: String
  newPassword: String!
}
input LoginWithPasswordInput {
  login: String!
  password: String!
}
input CreateAccountInput {
  idToken: String!
}
input UpdateUserLoginInput {
  login: String!
}
input UpdateUserPasswordInput {
  password: String!
  currentPassword: String!
}
input UpdateUserProfileInput {
  displayName: String!
  biography: String!
}
input ReportUserInput {
  userId: ID!
  reason: ReportReason!
}
input CreateWorkInput {
  title: String!
}
input UpdateWorkInput {
  workId: ID!
  title: String!
}
input DeleteWorkInput {
  workId: ID!
}
input ReportWorkInput {
  workId: ID!
  reason: ReportReason!
}
input CreateResponseCommentInput {
  commentId: ID!
  text: String!
}
input CreateWorkCommentInput {
  workId: ID!
  text: String!
}
input DeleteCommentInput {
  commentId: ID!
}
input ReportCommentInput {
  commentId: ID!
  reason: ReportReason!
}
input CreateWorkLikeInput {
  workId: ID!
}
input DeleteWorkLikeInput {
  workId: ID!
}
input CreateWorkBookmarkInput {
  workId: ID!
}
input DeleteWorkBookmarkInput {
  workId: ID!
}
input FollowUserInput {
  userId: ID!
}
input UnfollowUserInput {
  userId: ID!
}
input MuteUserInput {
  userId: ID!
}
input UnmuteUserInput {
  userId: ID!
}
input MuteTagInput {
  tagName: String!
}
input UnmuteTagInput {
  tagName: String!
}
input CreateStickerInput {
  title: String!
}
input UpdateStickerInput {
  stickerId: ID!
  title: String!
}
input DeleteStickerInput {
  stickerId: ID!
}
input ReportStickerInput {
  stickerId: ID!
  reason: ReportReason!
}
input CreateFolderInput {
  title: String!
}
input UpdateFolderInput {
  folderId: ID!
}
input DeleteFolderInput {
  folderId: ID!
}
input ReportFolderInput {
  folderId: ID!
  reason: ReportReason!
}
directive @cacheControl(maxAge: Int, scope: CacheControlScope, inheritMaxAge: Boolean) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION
directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) on SCHEMA
directive @key(fields: federation__FieldSet!, resolvable: Boolean = true) on OBJECT | INTERFACE
directive @federation__requires(fields: federation__FieldSet!) on FIELD_DEFINITION
directive @federation__provides(fields: federation__FieldSet!) on FIELD_DEFINITION
directive @federation__external(reason: String) on OBJECT | FIELD_DEFINITION
directive @federation__tag(name: String!) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
directive @federation__extends on OBJECT | INTERFACE
directive @shareable on OBJECT | FIELD_DEFINITION
directive @federation__inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
directive @federation__override(from: String!) on FIELD_DEFINITION
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
