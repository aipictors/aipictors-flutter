schema {
  query: Query
  mutation: Mutation
}
"作品のアルバム"
type AlbumNode implements Node {
  id: ID!
  createdAt: Int!
  "スラッグ"
  slug: String
  "タイトル"
  title: String!
  "説明"
  description: String!
  userId: ID!
  "ユーザ"
  user: UserNode!
  "いいね数"
  likesCount: Int!
  "閲覧数"
  viewsCount: Int!
  "作品"
  works(offset: Int!, limit: Int!): [WorkNode!]!
  "サムネイル"
  thumbnailImageId: ID
  "サムネイル"
  thumbnailImage: ImageNode
  "センシティブである"
  isSensitive: Boolean!
  "Open Graph タイトル"
  openGraphTitle: String
  "Open Graph 説明"
  openGraphDescription: String
  "Open Graph 画像"
  openGraphImageURL: String
  "シェア"
  shareText: String
  viewer: AlbumViewerNode
}
type AlbumViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isWatched: Boolean!
}
"運営のお知らせ"
type AnnouncementNode implements Node {
  id: ID!
  title: String!
  body: String!
  publishedAt: Int!
}
"カテゴリ"
type CategoryNode implements Node {
  id: ID!
  name: String!
  viewer: CategoryViewerNode
}
type CategoryViewerNode implements Node {
  id: ID!
  isWatched: Boolean!
}
"コメント"
type CommentNode implements Node {
  id: ID!
  userId: ID
  user: UserNode
  workId: ID
  work: WorkNode
  sticker: StickerNode
  type: String!
  createdAt: Int!
  text: String!
  responses(offset: Int!, limit: Int!): [CommentNode!]!
  isDeleted: Boolean!
}
"コントリビューター"
type ContributorNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  types: [ContributorType!]!
}
type CreatePromptonPaymentMethodResult {
  checkoutURL: String!
}
"作品の日別テーマ"
type DailyThemeNode implements Node {
  id: ID!
  type: String!
  "タイトル"
  title: String!
  "日付"
  dateText: String!
  "年"
  year: Int!
  "月"
  month: Int!
  "日にち"
  day: Int!
  "開始時刻"
  startTime: Int!
  "作品"
  works(offset: Int!, limit: Int!): [WorkNode!]!
  "作品数"
  worksCount: Int!
  "作品"
  firstWork: WorkNode
}
"フォルダ"
type FolderNode implements Node {
  id: ID!
  nanoid: ID!
  createdAt: Int!
  updatedAt: Int!
  title: String!
  description: String!
  rating: Rating
  userId: ID
  user: UserNode
  works(offset: Int!, limit: Int!): [WorkNode!]!
  thumbnailImageURL: String
  isDeleted: Boolean!
  isPrivate: Boolean!
  "Open Graph タイトル"
  openGraphTitle: String
  "Open Graph 説明"
  openGraphDescription: String
  "Open Graph 画像"
  openGraphImageURL: String
  "シェア"
  shareText: String
}
"通知（フォロー）"
type FollowNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID
  user: UserNode
}
"画像生成サービス"
type ImageGeneratorNode implements Node {
  id: ID!
  name: String!
}
"画像"
type ImageNode implements Node {
  id: ID!
  downloadURL: String!
  type: String!
}
"通知（いいねされた作品）"
type LikedWorkNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "いいねしたユーザ"
  user: UserNode
  userId: ID
  "作品"
  work: WorkNode
  workId: ID
  "匿名かどうか"
  isAnonymous: Boolean!
}
"通知（作品のいいね集計）"
type LikedWorksSummaryNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "メッセージ"
  message: String
}
type LoginResult {
  token: String!
}
type Mutation {
  "アカウントを作成する"
  createAccount(input: CreateAccountInput!): UserNode!
  "アルバムを作成する"
  createAlbum(input: CreateAlbumInput!): AlbumNode!
  "フォルダに作品を追加する"
  createAlbumWork(input: CreateAlbumWorkInput!): WorkNode!
  "フォルダに作品を追加する"
  createFolder(input: CreateFolderInput!): WorkNode!
  "フォルダに作品を追加する"
  createFolderWork(input: CreateFolderWorkInput!): WorkNode!
  "リプライのコメントを作成する"
  createResponseComment(input: CreateResponseCommentInput!): CommentNode!
  "スタンプを作成する"
  createSticker(input: CreateStickerInput!): StickerNode!
  "作品を作成する"
  createWork(input: CreateWorkInput!): WorkNode!
  "作品のコメントを作成する"
  createWorkComment(input: CreateWorkCommentInput!): CommentNode!
  "作品のスキを作成する"
  createWorkLike(input: CreateWorkLikeInput!): WorkNode!
  "アルバムを削除する"
  deleteAlbum(input: DeleteAlbumInput!): AlbumNode!
  "アルバムから作品を削除する"
  deleteAlbumWork(input: DeleteAlbumWorkInput!): WorkNode!
  "作品のコメントを削除する"
  deleteComment(input: DeleteCommentInput!): CommentNode!
  "アルバムを削除する"
  deleteFolder(input: DeleteFolderInput!): FolderNode!
  "フォルダから作品を削除する"
  deleteFolderWork(input: DeleteFolderWorkInput!): WorkNode!
  "スタンプを削除する"
  deleteSticker(input: DeleteStickerInput!): StickerNode!
  "作品を削除する"
  deleteWork(input: DeleteWorkInput!): WorkNode!
  "作品のスキを削除する"
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode!
  "ユーザをフォローする"
  followUser(input: FollowUserInput!): UserNode!
  "パスワードでログインする"
  loginWithPassword(input: LoginWithPasswordInput!): LoginResult!
  "タグをミュートする"
  muteTag(input: MuteTagInput!): TagNode!
  "ユーザをミュートする"
  muteUser(input: MuteUserInput!): UserNode!
  "アルバムを報告する"
  reportAlbum(input: ReportAlbumInput!): Boolean
  "コメントを報告する"
  reportComment(input: ReportCommentInput!): Boolean
  "フォルダを報告する"
  reportFolder(input: ReportFolderInput!): Boolean
  "スタンプを報告する"
  reportSticker(input: ReportStickerInput!): Boolean
  "ユーザを報告する"
  reportUser(input: ReportUserInput!): Boolean
  "作品を報告する"
  reportWork(input: ReportWorkInput!): Boolean
  "ユーザのフォローを解除する"
  unfollowUser(input: UnfollowUserInput!): UserNode!
  "タグのミュートを解除する"
  unmuteTag(input: UnmuteTagInput!): TagNode!
  "ユーザのミュートを解除する"
  unmuteUser(input: UnmuteUserInput!): UserNode!
  "フォルダのウォッチを解除する"
  unwatchFolder(input: UnwatchFolderInput!): UserNode!
  "アカウントのログインIDを作成する"
  updateAccountLogin(input: UpdateAccountLoginInput!): UserNode!
  "アカウントのパスワードを変更する"
  updateAccountPassword(input: UpdateAccountPasswordInput!): UserNode!
  "アルバムを更新する"
  updateAlbum(input: UpdateAlbumInput!): AlbumNode!
  "アルバムを更新する"
  updateFolder(input: UpdateFolderInput!): FolderNode!
  "スタンプを更新する"
  updateSticker(input: UpdateStickerInput!): StickerNode!
  "ユーザのプロフィールを作成する"
  updateUserProfile(input: UpdateUserProfileInput!): UserNode!
  "作品を更新する"
  updateWork(input: UpdateWorkInput!): WorkNode!
  "フォルダをウォッチする"
  watchFolder(input: WatchFolderInput!): FolderNode!
  "ユーザを作成する"
  createPromptonChatMessage(input: CreatePromptonChatMessageInput!): [PromptonMessageNode!]!
  "Aipictorsのトークンからユーザを作成する"
  createPromptonUserFromToken(input: CreatePromptonUserFromTokenInput!): Boolean
  "ユーザを作成する"
  createPromptonUser(input: CreatePromptonUserInput!): Boolean
  "ユーザのアイコンを更新する"
  updatePromptonUserAvatar(input: UpdatePromptonUserAvatarInput!): PromptonUserNode!
  "ユーザのヘッダー画像を更新する"
  updatePromptonUserHeaderImage(input: UpdatePromptonUserHeaderImageInput!): PromptonUserNode!
  "ユーザのプロフィールを更新する"
  updatePromptonUserProfile(input: UpdatePromptonUserProfileInput!): PromptonUserNode!
  "ユーザのユーザ名を更新する"
  updatePromptonUserLogin(input: UpdatePromptonUserLoginInput!): PromptonUserNode!
  "ファイルを作成する"
  createPromptonFile(input: CreatePromptonFileInput!): PromptonFileNode!
  "サムネイル用のファイルを作成する"
  createPromptonThumbnailFile(input: CreatePromptonThumbnailFileInput!): PromptonFileNode!
  "作品を作成する"
  createPromptonWork(input: CreatePromptonWorkInput!): PromptonWorkNode!
  "作品を削除する"
  deletePromptonWork(input: DeletePromptonWorkInput!): PromptonWorkNode!
  "作品を更新する"
  updatePromptonWork(input: UpdatePromptonWorkInput!): PromptonWorkNode!
  "作品を公開にする"
  markPromptonWorkAsPublic(input: MarkPromptonWorkAsPublicInput!): PromptonWorkNode!
  "作品を非公開にする"
  markPromptonWorkAsPrivate(input: MarkPromptonWorkAsPrivateInput!): PromptonWorkNode!
  "作品をピン留めする"
  pinPromptonWork(input: PinPromptonWorkInput!): PromptonWorkNode!
  "作品のピン留めを解除する"
  unpinPromptonWork(input: UnpinPromptonWorkInput!): PromptonWorkNode!
  "作品をフォルダに追加する"
  addPromptonTagToWork(input: AddPromptonTagToWorkInput!): PromptonWorkNode!
  "作品をフォルダから削除する"
  removePromptonTagFromWork(input: RemovePromptonTagFromWorkInput!): PromptonWorkNode!
  "作品のスキを作成する"
  createPromptonWorkLike(input: CreatePromptonWorkLikeInput!): PromptonWorkNode!
  "作品のスキを削除する"
  deletePromptonWorkLike(input: DeletePromptonWorkLikeInput!): PromptonWorkNode!
  "作品のブックマークを作成する"
  createPromptonWorkBookmark(input: CreatePromptonWorkBookmarkInput!): PromptonWorkNode
  "作品のブックマークを削除する"
  deletePromptonWorkBookmark(input: DeletePromptonWorkBookmarkInput!): PromptonWorkNode
  "作品をユーザのヘッダーに設定する"
  markPromptonWorkAsUserHeader(input: MarkPromptonWorkAsUserHeaderInput!): PromptonUserNode
  "ユーザのプロフィールのインデックスを更新する"
  flipPromptonFolderWorkIndex(input: FlipPromptonFolderWorkIndexInput!): [PromptonWorkNode!]!
  "ユーザをフォローする"
  followPromptonUser(input: FollowPromptonUserInput!): PromptonUserNode
  "ユーザのフォローは解除する"
  unfollowPromptonUser(input: UnfollowPromptonUserInput!): PromptonUserNode
  "ユーザのプロフィールを作成する"
  createPromptonProfileBlock(input: CreatePromptonProfileBlockInput!): PromptonUserNode!
  "ユーザのプロフィールを更新する"
  updatePromptonProfileBlock(input: UpdatePromptonProfileBlockInput!): PromptonUserNode!
  "ユーザのプロフィールのインデックスを更新する"
  incrementPromptonProfileBlockIndex(input: IncrementPromptonProfileBlockIndexInput!): PromptonUserNode!
  "ユーザのプロフィールのインデックスを更新する"
  decrementPromptonProfileBlockIndex(input: DecrementPromptonProfileBlockIndexInput!): PromptonUserNode!
  "ユーザのプロフィールのインデックスを更新する"
  deletePromptonProfileBlock(input: DeletePromptonProfileBlockInput!): PromptonUserNode!
  "フォルダを作成する"
  createPromptonFolder(input: CreatePromptonFolderInput!): PromptonFolderNode!
  "フォルダを更新する"
  updatePromptonFolder(input: UpdatePromptonFolderInput!): PromptonFolderNode!
  "フォルダを削除する"
  deletePromptonFolder(input: DeletePromptonFolderInput!): PromptonFolderNode!
  "フォルダを公開する"
  markPromptonFolderAsPublic(input: MarkPromptonFolderAsPublicInput!): PromptonFolderNode!
  "フォルダを非公開にする"
  markPromptonFolderAsPrivate(input: MarkPromptonFolderAsPrivateInput!): PromptonFolderNode!
  "フォルダを有償化にする"
  changePromptonFolderToPaid(input: ChangePromptonFolderToPaidInput!): PromptonFolderNode!
  "作品をフォルダに追加する"
  addPromptonWorkToFolder(input: AddPromptonWorkToFolderInput!): PromptonFolderNode!
  "作品をフォルダから削除する"
  removePromptonWorkFromFolder(input: RemovePromptonWorkFromFolderInput!): PromptonFolderNode!
  "フォルダの鍵を作成する"
  createPromptonFolderKey(input: CreatePromptonFolderKeyInput!): PromptonFolderKeyNode!
  "プランを作成する"
  createPromptonPlan(input: CreatePromptonPlanInput!): PromptonPlanNode!
  "プランを更新する"
  updatePromptonPlan(input: UpdatePromptonPlanInput!): PromptonPlanNode!
  "プランを順序を上げる"
  updatePromptonPlanSort(input: UpdatePromptonPlanSortInput!): PromptonPlanNode!
  "プランを削除する"
  deletePromptonPlan(input: DeletePromptonPlanInput!): PromptonPlanNode!
  "プランを公開する"
  markPromptonPlanAsPublic(input: MarkPromptonPlanAsPublicInput!): PromptonPlanNode!
  "プランを非公開にする"
  markPromptonPlanAsPrivate(input: MarkPromptonPlanAsPrivateInput!): PromptonPlanNode!
  "支援リクエストを作成する"
  createPromptonAipicRequest(input: CreatePromptonAipicRequestInput!): PromptonRequestNode!
  "プランリクエストを作成する"
  createPromptonPlanRequest(input: CreatePromptonPlanRequestInput!): PromptonRequestNode!
  "コーヒーリクエストを作成する"
  createPromptonCoffeeRequest(input: CreatePromptonCoffeeRequestInput!): PromptonRequestNode!
  "リクエストを受諾する"
  acceptPromptonRequest(input: AcceptPromptonRequestInput!): PromptonRequestNode!
  "リクエストを拒否する"
  rejectPromptonRequest(input: RejectPromptonRequestInput!): PromptonRequestNode!
  "リクエストをキャンセルする"
  cancelPromptonRequest(input: CancelPromptonRequestInput!): PromptonRequestNode!
  "リクエストを完了とする"
  closePromptonRequest(input: ClosePromptonRequestInput!): PromptonRequestNode!
  "納品物を作成する"
  createPromptonDeliverable(input: CreatePromptonDeliverableInput!): PromptonWorkNode!
  "決済方法を登録する"
  createPromptonPaymentMethod(input: CreatePromptonPaymentMethodInput!): CreatePromptonPaymentMethodResult
  "決済方法を削除する"
  deletePromptonPaymentMethod: Boolean
  "プロンプトを作成する"
  createPromptonPrompt(input: CreatePromptonPromptInput!): PromptonPromptNode!
  "プロンプトを更新する"
  updatePromptonPrompt(input: UpdatePromptonPromptInput!): PromptonPromptNode!
  "プロンプトを削除する"
  deletePromptonPrompt(input: DeletePromptonPromptInput!): PromptonPromptNode!
  "プロンプトの作品を追加する"
  createPromptonPromptWork(input: CreatePromptonPromptWorkInput!): PromptonPromptNode!
  "お問い合わせを作成する"
  createPromptonInquiry(input: CreatePromptonInquiryInput!): Boolean
  "閲覧を記録する"
  createPromptonWorkView(input: CreatePromptonWorkViewInput!): Boolean
  "閲覧を記録する"
  createPromptonUserView(input: CreatePromptonUserViewInput!): Boolean
  "閲覧を記録する"
  createPromptonFolderView(input: CreatePromptonFolderViewInput!): Boolean
  "閲覧を記録する"
  createPromptonPlanView(input: CreatePromptonPlanViewInput!): Boolean
  "インテグレーション（LINE）を削除する"
  deletePromptonIntegration(input: DeletePromptonIntegrationInput!): PromptonViewer!
  "テスト通知を送信する"
  testPromptonIntegration(input: TestPromptonIntegrationInput!): Boolean
  "ユーザをブロックする"
  blockPromptonUser(input: BlockPromptonUserInput!): PromptonUserNode!
}
"ミュートされたタグ"
type MutedTagNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedTagId: ID!
  mutedTag: TagNode!
}
"ユーザのミュート"
type MutedUserNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  mutedUserId: ID!
  mutedUser: UserNode!
}
type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}
"プロモーション"
type PromotionNode implements Node {
  id: ID!
  title: String!
  description: String!
  imageURL: String
  pageURL: String
  startDateTime: Int!
  endDateTime: Int!
}
"Stripeのアカウント"
type PromptonAccountNode implements Node {
  id: ID!
  detailsSubmitted: Boolean!
  payoutsEnabled: Boolean!
  chargesEnabled: Boolean!
  loginLink: String
}
"ブックマーク"
type PromptonBookmarkNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "作品"
  work: PromptonWorkNode
  "フォルダ"
  folder: PromptonFolderNode
}
"Stripeの顧客"
type PromptonCustomerNode implements Node {
  id: ID!
}
"納品物"
type PromptonDeliverableNode implements Node {
  id: ID!
  createdAt: Int!
  name: String
  description: String
  user: PromptonUserNode!
  request: PromptonRequestNode!
  work: PromptonWorkNode
  file: PromptonFileNode!
}
"ファイル"
type PromptonFileNode implements Node {
  id: ID!
  createdAt: Int!
  path: String!
  height: Int
  width: Int
  type: String!
  downloadURL: String
  name: String!
  "画像URL"
  imageURL: String!
  "サムネイルのURL"
  thumbnailImageURL: String!
  "大きいサイズの画像URL"
  headerImageURL: String!
  "画像URL"
  rectangleImageURL: String!
  "サムネイルのURL"
  rectangleThumbnailImageURL: String!
  "サムネイルの正方形の画像URL"
  squareThumbnailImageURL: String!
}
type PromptonFolderKeyNode implements Node {
  id: ID!
  createdAt: Int!
  folderId: ID!
  folder: PromptonFolderNode!
  userId: ID!
  user: PromptonUserNode!
  payments: [PromptonPaymentNode!]!
}
"フォルダ"
type PromptonFolderNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "作成日"
  updatedAt: Int!
  "名前"
  name: String!
  "説明"
  description: String
  "作品"
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  "作品数"
  worksCount: Int!
  "関連するタグ"
  tags: [PromptonTagNode!]!
  tagsCount: Int!
  "色"
  color: String
  "公開されているかどうか"
  isPublic: Boolean!
  "ユーザID"
  userId: ID!
  "ユーザ"
  user: PromptonUserNode!
  "プラン"
  plans: [PromptonPlanNode!]!
  "削除済み"
  isDeleted: Boolean!
  "有償"
  isPaid: Boolean!
  "NSFW"
  isNSFW: Boolean!
  "NSFW理由"
  nsfwReason: String
  "値段"
  price: Int!
  "商用利用"
  featureCommercialUse: Boolean
  "ログインユーザ"
  viewer: PromptonFolderViewerNode
  "画像ファイルのID"
  imageFileId: ID
  "画像ファイル"
  imageFile: PromptonFileNode!
  "表示形式"
  mode: FolderMode!
}
type PromptonFolderViewerNode implements Node {
  id: ID!
  folderId: ID!
  folderKey: PromptonFolderKeyNode
}
"ユーザの関係"
type PromptonFriendshipNode implements Node {
  id: ID!
  createdAt: Int!
  followeeId: ID!
  followee: PromptonUserNode!
  followerId: ID!
  follower: PromptonUserNode!
  status: String!
}
type PromptonIntegrationNode implements Node {
  id: ID!
  applicationId: ID!
  userId: ID!
  user: PromptonUserNode!
  createdAt: Int!
}
type PromptonLabelEdge implements Edge {
  cursor: String!
  node: PromptonLabelNode!
}
"ラベル"
type PromptonLabelNode implements Node {
  id: ID!
  name: String!
  nameJA: String!
  count: Int!
  firstWork: PromptonWorkNode
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}
type PromptonLabelsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PromptonLabelEdge!]!
}
"スキ"
type PromptonLikeNode implements Node {
  id: ID!
  createdAt: Int!
  "作品"
  work: PromptonWorkNode
  "フォルダ"
  folder: PromptonFolderNode
}
"チャット"
type PromptonMessageNode implements Node {
  id: ID!
  createdAt: Int!
  role: String!
  text: String!
  senderId: ID
  sender: PromptonUserNode
  recipientId: ID
  recipient: PromptonUserNode
  isDeleted: Boolean!
  type: String!
  contextId: ID
}
"決済履歴"
type PromptonPaymentIntentNode implements Node {
  id: ID!
}
type PromptonPaymentMethodNode implements Node {
  id: ID!
  type: String!
  cardBrand: String!
  cardLast4: String!
  cardExpMonth: String!
  cardExpYear: String!
  cardFunding: String!
  isLiveMode: Boolean!
}
"決済"
type PromptonPaymentNode implements Node {
  id: ID!
  createdAt: Int!
  user: PromptonUserNode!
  purpose: String!
  purposeText: String!
  request: PromptonRequestNode
  amount: Int!
  isError: Boolean!
  transactionId: String
}
"出金履歴"
type PromptonPayoutNode implements Node {
  id: ID!
}
"プラン"
type PromptonPlanNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  name: String!
  message: String
  unitPrice: Int!
  description: String!
  category: String!
  categoryText: String!
  categoryDescription: String!
  sort: Int!
  userId: ID!
  user: PromptonUserNode!
  minimumQuantity: Int!
  maximumQuantity: Int!
  minimumFee: Int!
  maximumFee: Int!
  isFlexible: Boolean!
  isDeleted: Boolean!
  isPublic: Boolean!
  isActive: Boolean!
  requests: [PromptonRequestNode!]!
  requestsCount: Int!
  styleSlugs: [PromptonSlug!]!
  objectSlugs: [PromptonSlug!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  folders: [PromptonFolderNode!]!
  "画像ファイルのID"
  imageFileId: ID
  "画像ファイル"
  imageFile: PromptonFileNode!
}
type PromptonProfileBlockNode {
  id: ID!
  index: Int!
  type: String!
  title: String
  description: String
  siteURL: String
  imageURL: String
  userId: ID!
}
"プロンプト"
type PromptonPromptNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  text: String!
  texts: [String!]!
  title: String
  titleJA: String
  description: String
  user: PromptonUserNode
  likesCount: Int!
  isPublic: Boolean!
  isNsfw: Boolean!
  isDeleted: Boolean!
  isSingle: Boolean!
  isBase: Boolean!
  firstWork: PromptonWorkNode
  secondWork: PromptonWorkNode
  works: [PromptonWorkNode!]!
}
"リアクション"
type PromptonReactionNode implements Node {
  id: ID!
  text: String!
  count: Int!
  secretCount: Int!
  isConnected: Boolean!
}
"リクエスト"
type PromptonRequestNode implements Node {
  id: ID!
  createdAt: Int!
  folder: PromptonFolderNode
  senderId: ID!
  "送ったユーザ"
  sender: PromptonUserNode!
  recipientId: ID!
  "受け取ったユーザ"
  recipient: PromptonUserNode!
  "納品物"
  deliverables: [PromptonWorkNode!]!
  firstDeliverable: PromptonWorkNode
  files: [PromptonFileNode!]!
  note: String!
  noteTruncated: String!
  fee: Int!
  isPending: Boolean!
  isAccepted: Boolean!
  isRejected: Boolean!
  isCompleted: Boolean!
  isCanceled: Boolean!
  isCanceledBySender: Boolean!
  isCanceledByRecipient: Boolean!
  isTimeout: Boolean!
  "公開されているかどうか"
  isPublic: Boolean!
  "関連する決済"
  payments: [PromptonPaymentNode!]!
  hasSignature: Boolean!
  signature: String
  "手数料"
  commission: Int!
  quantity: Int!
  unitPrice: Int!
  planId: String
  plan: PromptonPlanNode
  planName: String
  planDescription: String
  planUnitPrice: Int
  planFeaturePrivate: Boolean
  planFeatureCopyrightFree: Boolean
  planFeatureCommercialUse: Boolean
  planFeatureFanFiction: Boolean
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  isCoffee: Boolean!
  isAipic: Boolean!
}
type PromptonSlug {
  name: String!
  value: String!
}
type PromptonTagNode implements Node {
  id: ID!
  updatedAt: Int!
  name: String!
  nameJA: String!
  slug: String
  firstWork: PromptonWorkNode
  worksCount: Int!
  folders: [PromptonFolderNode!]!
  foldersCount: Int!
  users: [PromptonUserNode!]!
  usersCount: Int!
  works(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}
"ユーザ"
type PromptonUserNode implements Node {
  id: ID!
  updatedAt: Int!
  "名前（日本語の使用が可能）"
  name: String!
  "ログイン名（英数字のみ）"
  login: String!
  "作品"
  firstWork: PromptonWorkNode
  "アイコンの画像URL"
  avatarImageURL: String
  "アイコンのID"
  avatarImageId: String
  "アイコンのファイル"
  avatarImageFile: PromptonFileNode
  headerImageFileId: String
  "マイページのヘッダー画像のファイル"
  headerImageFile: PromptonFileNode!
  "自己紹介"
  biography: String!
  "メッセージ"
  message: String!
  hasProfileURL: Boolean!
  "ユーザ名"
  twitterUsername: String
  twitterURL: String
  "ユーザ名"
  githubUsername: String
  githubURL: String
  "ユーザ名"
  instagramUsername: String
  instagramURL: String
  "ユーザ名"
  pixivUsername: String
  pixivURL: String
  "ユーザ名"
  tumblrUsername: String
  tumblrURL: String
  "ユーザ名"
  deviantartUsername: String
  deviantartURL: String
  "サイトURL"
  siteURL: String
  siteTitle: String
  siteDescription: String
  siteImageURL: String
  "関連する作品"
  works(offset: Int!, limit: Int!, where: PromptonUserWorksWhereInput): [PromptonWorkNode!]!
  "最新の作品"
  latestWork: PromptonWorkNode
  "リクエストされた作品"
  latestRequestedWork: PromptonWorkNode
  "リクエストされた作品"
  requestedWorks: [PromptonWorkNode!]!
  "フォローされている数"
  followersCount: Int
  "フォローしている数"
  followeesCount: Int
  "依頼した数"
  requestsCount: Int!
  "依頼された数"
  acceptedRequestsCount: Int!
  "対応中のリクエスト数"
  queueRequestsCount: Int!
  "作品の数"
  worksCount: Int!
  "ログインしているユーザにフォローされているかどうか"
  isFollower: Boolean!
  "ログインしているユーザをフォローしているかどうか"
  isFollowee: Boolean!
  "関係"
  friendships: [PromptonFriendshipNode!]!
  "制作依頼を受け付けているかどうか"
  isRequestable: Boolean!
  "Stripeの決済方法"
  paymentMethod: PromptonPaymentMethodNode
  "プラン"
  plans: [PromptonPlanNode!]!
  "フォルダ"
  firstFolder: PromptonFolderNode
  "フォルダ"
  folders(offset: Int!, limit: Int!): [PromptonFolderNode!]!
  "関連するタグ"
  tags: [PromptonTagNode!]!
  tagsCount: Int!
  "Stripeの顧客ID"
  customerId: String
  "Stripeの顧客"
  customer: PromptonCustomerNode
  "StripeのアカウントID"
  accountId: String
  "Stripeのアカウントの登録のリンク"
  accountLink: String
  "Stripeのアカウントのトークンを取得する"
  accountSessionClientSecret: String
  "Stripeのアカウント"
  account: PromptonAccountNode
  "Stripeの決済履歴"
  payments(offset: Int!, limit: Int!): [PromptonPaymentNode!]!
  "Stripeの決済履歴"
  paymentIntents(offset: Int!, limit: Int!): [PromptonPaymentIntentNode!]!
  "Stripeの出金履歴"
  payouts(offset: Int!, limit: Int!): [PromptonPayoutNode!]!
  "プロフィール"
  profileBlocks: [PromptonProfileBlockNode!]!
  "削除済みかどうか"
  isDeleted: Boolean!
  "承認済みのリクエスト"
  acceptedRequests: [PromptonRequestNode!]!
  "リクエスト作品"
  requestWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  "ユーザー"
  rootUser: UserNode
  "ユーザー"
  user: UserNode
}
"ログインしているユーザ"
type PromptonViewer {
  id: ID!
  user: PromptonUserNode!
  likedWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  bookmarkedWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  followees(offset: Int!, limit: Int!): [PromptonUserNode!]!
  requests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  sentRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  receivedRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  pendingRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  currentRequests(offset: Int!, limit: Int!): [PromptonRequestNode!]!
  deliverables(offset: Int!, limit: Int!): [PromptonWorkNode!]!
  prompts(offset: Int!, limit: Int!): [PromptonPromptNode!]!
  nextRequests: [PromptonRequestNode!]!
  hasNextRequests: Boolean!
  chatMessages: [PromptonMessageNode!]!
  integrations(offset: Int!, limit: Int!): [PromptonIntegrationNode!]!
}
type PromptonWorkEdge implements Edge {
  cursor: String!
  node: PromptonWorkNode!
}
"作品"
type PromptonWorkNode implements Node {
  id: ID!
  createdAt: Int!
  updatedAt: Int!
  "タイトル"
  title: String
  "説明"
  body: String
  "ファイルのID"
  fileId: String
  "ファイルのID"
  file: PromptonFileNode!
  "ファイルのID"
  rectangleImageFile: PromptonFileNode
  "プロンプト"
  inputtedPrompt: String
  "検出されたプロンプト"
  detectedPrompt: String
  "プロンプト"
  runtimePrompt: String
  "ソフトウェア"
  software: String
  "検出されたソフトウェア"
  detectedSoftware: String
  "シード値"
  seed: String
  "検出されたシード値"
  detectedSeed: String
  "いいね数"
  likesCount: Int!
  "ユーザ"
  user: PromptonUserNode!
  folderIndex: Int!
  homeIndex: Int!
  "関連する色"
  colors: [String!]!
  "関連するWebカラー"
  webColors: [String!]!
  "関連するラベル"
  labels: [PromptonLabelNode!]!
  "関連するタグ"
  tags: [PromptonTagNode!]!
  tagsCount: Int!
  "セーフサーチ・アダルト関連の内容である可能性"
  annotationAdult: String
  "セーフサーチ・悪ふざけの内容である可能性"
  annotationSpoof: String
  "セーフサーチ・医療関連の内容である可能性"
  annotationMedical: String
  "セーフサーチ・性的な内容である可能性"
  annotationRacy: String
  "セーフサーチ・暴力的な内容である可能性"
  annotationViolence: String
  "関連するリクエスト"
  request: PromptonRequestNode
  "ログインしているユーザが作品に対していいね済みかどうか"
  isLiked: Boolean!
  "ログインしているユーザが作品に対してブックマーク済みかどうか"
  isBookmarked: Boolean!
  "削除されているかどうか"
  isDeleted: Boolean!
  "自分の作品かどうか"
  isMine: Boolean!
  "公開されているかどうか"
  isPublic: Boolean!
  "ピン留めされているかどうか"
  isPinned: Boolean!
  "プライベートリクエストかどうか"
  isPrivateRequest: Boolean!
  "著作権を譲渡しているかどうか"
  isCopyrightFreeRequest: Boolean!
  "リクエスト作品かどうか"
  isRequest: Boolean!
  "NSFW作品かどうか"
  isNSFW: Boolean!
  "閲覧数"
  viewsCount: Int!
  "NSFW理由"
  nsfwReason: String
  "関連する作品"
  relatedWorks(offset: Int!, limit: Int!): [PromptonWorkNode!]!
}
type PromptonWorksConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PromptonWorkEdge!]!
}
type Query {
  "運営からのお知らせ"
  announcements(offset: Int!, limit: Int!): [AnnouncementNode!]!
  "作品"
  work(id: ID!): WorkNode
  "作品"
  works(offset: Int!, limit: Int!, where: WorksWhereInput): [WorkNode!]
  "ユーザ"
  user(id: ID!): UserNode
  "ユーザ"
  users(offset: Int!, limit: Int!, where: UsersWhereInput): [UserNode!]
  "コントリビューター"
  contributors: [ContributorNode!]!
  "フォルダ"
  folder(id: ID!): FolderNode
  "フォルダ"
  folders(offset: Int!, limit: Int!, where: FoldersWhereInput): [FolderNode!]
  "アルバム"
  album(id: ID!): AlbumNode
  "アルバム"
  albums(offset: Int!, limit: Int!, where: AlbumsWhereInput): [AlbumNode!]
  "日別テーマ"
  dailyTheme(id: ID, year: Int, month: Int, day: Int): DailyThemeNode
  "日別テーマ"
  dailyThemes(offset: Int!, limit: Int!, where: DailyThemesWhereInput): [DailyThemeNode!]!
  "ステッカー"
  sticker(id: ID!): StickerNode
  "ステッカー"
  stickers(offset: Int!, limit: Int!, where: StickersWhereInput): [StickerNode!]!
  "タグ"
  tag(name: String!): TagNode
  "全てのタグ"
  tags(offset: Int!, limit: Int!, where: TagsWhereInput): [TagNode!]!
  "トレンドのタグ"
  hotTags: [TagNode!]!
  "ランキング履歴"
  workAwards(offset: Int!, limit: Int!, where: WorkAwardsWhereInput!): [WorkAwardNode!]!
  "1日以内の人気の作品"
  hotWorks: [WorkNode!]!
  "全期間の人気作品"
  bestWorks(where: PopularWorksWhereInput!): [WorkNode!]!
  "全期間の人気作品"
  popularWorks(where: PopularWorksWhereInput!): [WorkNode!]!
  "カテゴリ"
  categories: [CategoryNode!]!
  "カテゴリ"
  category(id: ID!): CategoryNode!
  "画像生成サービス"
  imageGenerators: [ImageGeneratorNode!]!
  "プロモーション"
  promotions(offset: Int!, limit: Int!): [PromotionNode!]!
  "プロモーション"
  promotion(id: ID!): PromotionNode
  "ログイン中のユーザ"
  viewer: Viewer
  promptonViewer: PromptonViewer!
  promptonFolder(id: ID!): PromptonFolderNode
  promptonFolders(offset: Int!, limit: Int!, where: PromptonFoldersWhereInput): [PromptonFolderNode!]!
  promptonLabel(id: ID, name: String): PromptonLabelNode
  promptonLabels(offset: Int!, limit: Int!, where: PromptonLabelsWhereInput): [PromptonLabelNode!]!
  promptonPlan(id: ID!): PromptonPlanNode
  promptonPlans(offset: Int!, limit: Int!, where: PromptonPlansWhereInput): [PromptonPlanNode!]!
  promptonRequest(id: ID!): PromptonRequestNode
  promptonTag(id: ID, slug: String): PromptonTagNode
  promptonTags(offset: Int!, limit: Int!, where: PromptonTagsWhereInput): [PromptonTagNode!]!
  promptonUser(id: ID!): PromptonUserNode
  promptonUsers(offset: Int!, limit: Int!, where: PromptonUsersWhereInput): [PromptonUserNode!]!
  promptonWork(id: ID!): PromptonWorkNode
  promptonWorks(offset: Int!, limit: Int!, where: PromptonWorksWhereInput): [PromptonWorkNode!]!
}
"ステッカー"
type StickerNode implements Node {
  id: ID!
  createdAt: Int!
  "タイトル"
  title: String!
  imageId: ID
  "画像"
  image: ImageNode
  userId: ID!
  "ユーザ"
  user: UserNode!
  "閲覧の種類"
  accessType: AccessType!
  "いいね数"
  likesCount: Int!
  "使用回数"
  usesCount: Int!
  "ダウンロード数"
  downloadsCount: Int!
  viewer: StickerViewerNode
}
type StickerViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
}
type SubWorkNode implements Node {
  id: ID!
  imageId: ID
  image: ImageNode!
  thumbnailImageId: ID!
  thumbnailImage: ImageNode!
}
"タグ"
type TagNode implements Node {
  id: ID!
  name: String!
  works(offset: Int!, limit: Int!): [WorkNode!]!
  worksCount: Int!
  likesCount: Int!
  firstWork: WorkNode
  viewer: TagViewerNode
}
type TagViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isWatched: Boolean!
  isMuted: Boolean!
}
"ユーザ"
type UserNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "表示名"
  name: String!
  "ログインID"
  login: String!
  "サイトURL"
  siteURL: String
  "受け取ったいいね数"
  receivedLikesCount: Int!
  "受け取った閲覧数"
  receivedViewsCount: Int!
  "フォロワー数"
  followersCount: Int!
  "入賞回数"
  awardsCount: Int!
  "作品"
  works(offset: Int!, limit: Int!, where: UserWorksWhereInput): [WorkNode!]!
  "フォロワー（ユーザをフォローしているユーザ）"
  followers(offset: Int!, limit: Int!): [UserNode!]!
  "フォロー（ユーザがフォローしているユーザ)"
  followees(offset: Int!, limit: Int!): [UserNode!]!
  "アワード（作品）"
  workAwards(offset: Int!, limit: Int!, where: AwardsWhereInput): [WorkAwardNode!]!
  "ステッカー"
  stickers(offset: Int!, limit: Int!): [StickerNode!]!
  "アルバム"
  albums(offset: Int!, limit: Int!): [AlbumNode!]!
  "フォルダ"
  folders(offset: Int!, limit: Int!): [FolderNode!]!
  "アイコン画像のID"
  iconImageId: ID
  "アイコン画像"
  iconImage: ImageNode
  "ヘッダー画像のID"
  headerImageId: ID
  "ヘッダー画像"
  headerImage: ImageNode
  "X"
  twitterAccountId: String
  "Instagram"
  instagramAccountId: String
  "GitHub"
  githubAccountId: String
  "紹介"
  biography: String
  biographyEN: String
  workCreatedAt: Int
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  viewer: UserViewerNode
  "プロンプトンのユーザ"
  promptonUser: PromptonUserNode
  "Open Graph タイトル"
  openGraphTitle: String
  "Open Graph 説明"
  openGraphDescription: String
  "Open Graph 画像"
  openGraphImageURL: String
  "シェア"
  shareText: String
}
"ユーザの設定"
type UserSettingNode implements Node {
  id: ID!
  userId: ID!
  user: UserNode!
  useDarkMode: Boolean!
}
type UserViewerNode implements Node {
  id: ID!
  isFollower: Boolean!
  isFollowee: Boolean!
  isMuted: Boolean!
}
"ログイン中のユーザ"
type Viewer {
  user: UserNode!
  works(offset: Int!, limit: Int!): [WorkNode!]!
  albums(offset: Int!, limit: Int!): [AlbumNode!]!
  folders(offset: Int!, limit: Int!): [FolderNode!]!
  likedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  notifications(offset: Int!, limit: Int!): [NotificationNode!]!
  feedWorks(offset: Int!, limit: Int!): [WorkNode!]!
  mutedUsers(offset: Int!, limit: Int!): [UserNode!]!
  mutedTags(offset: Int!, limit: Int!): [TagNode!]!
  watchedFolders(offset: Int!, limit: Int!): [FolderNode!]!
  stickers(offset: Int!, limit: Int!): [StickerNode!]!
}
"アワード（作品）"
type WorkAwardNode implements Node {
  id: ID!
  index: Int!
  userId: ID!
  "ユーザ"
  user: UserNode!
  workId: ID
  "作品"
  work: WorkNode!
  dateText: String!
}
"通知（作品のランキング）"
type WorkAwardNotificationNode implements Node {
  id: ID!
  "時刻"
  createdAt: Int!
  "メッセージ"
  message: String
  "作品"
  work: WorkNode
  workId: ID
}
"通知（コメント）"
type WorkCommentNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode
  userId: ID
  message: String
  sticker: StickerNode
  stickerId: ID
  work: WorkNode
  workId: ID
}
"通知（リプライ）"
type WorkCommentReplyNotificationNode implements Node {
  id: ID!
  createdAt: Int!
  userId: ID
  user: UserNode
  message: String
  stickerId: ID
  sticker: StickerNode
  workId: ID
  work: WorkNode
}
"作品のコンテスト"
type WorkEventNode implements Node {
  id: ID!
  title: String
  link: String
  description: String
  startTime: Int!
  endTime: Int!
  users(offset: Int!, limit: Int!): [UserNode!]!
}
"作品"
type WorkNode implements Node {
  id: ID!
  "作成日"
  createdAt: Int!
  "年齢制限"
  rating: Rating
  "タイトル"
  title: String!
  "タイトル（英語）"
  titleEN: String
  "説明"
  description: String
  "説明（英語）"
  descriptionEN: String
  "種類"
  type: String!
  "テーマ"
  dailyTheme: DailyThemeNode
  "閲覧権限の種類"
  accessType: AccessType!
  "プロンプトの閲覧権限の種類"
  promptAccessType: AccessType!
  "いいね数"
  likesCount: Int!
  "いいね数"
  commentsCount: Int!
  "閲覧数"
  viewsCount: Int!
  "タグ名"
  tagNames: [String!]!
  tags: [TagNode!]!
  imageId: ID!
  "画像URL"
  image: ImageNode
  "画像の幅"
  imageWith: Int!
  "画像の高さ"
  imageHeight: Int!
  "画像の比率"
  imageAspectRatio: Float!
  "画像URL（サムネイル）"
  thumbnailImageId: ID!
  thumbnailImage: ImageNode
  largeThumbnailImageId: ID!
  "画像URL（サムネイル）"
  largeThumbnailImage: ImageNode
  ogpThumbnailImageId: ID!
  "画像URL（サムネイル）"
  ogpThumbnailImage: ImageNode
  "プロンプト"
  prompt: String
  "ネガティブプロンプト"
  negativePrompt: String
  "シード値"
  seed: String
  "画像生成関連の設定"
  steps: Int
  "画像生成関連の設定"
  scale: Int
  "画像生成関連の設定"
  model: String
  "画像生成関連の設定"
  modelHash: String
  "画像生成関連の設定"
  sampler: String
  "ユーザID"
  userId: ID!
  "ユーザ"
  user: UserNode!
  "コメント"
  comments(offset: Int!, limit: Int!): [CommentNode!]!
  "作品"
  subWorks: [SubWorkNode!]!
  "Open Graph タイトル"
  openGraphTitle: String
  "Open Graph 説明"
  openGraphDescription: String
  "Open Graph 画像"
  openGraphImageURL: String
  "シェア"
  shareText: String
  "ログイン"
  viewer: WorkViewerNode
}
type WorkViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isBookmarked: Boolean!
}
interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}
interface Edge {
  cursor: String!
  node: Node!
}
"ノード"
interface Node {
  id: ID!
}
"通知"
union NotificationNode = LikedWorkNotificationNode | LikedWorksSummaryNotificationNode | WorkAwardNotificationNode | WorkCommentNotificationNode | WorkCommentReplyNotificationNode | FollowNotificationNode
enum AccessType {
  "公開"
  PUBLIC
  "公開"
  SILENT
  "非公開"
  PRIVATE
  "限定公開"
  LIMITED
}
"アワードの種類"
enum AwardType {
  "月別"
  MONTHLY
  "週別"
  WEEKLY
  "日別"
  DAILY
  "日別（テーマなし）"
  DAILY_NO_THEME
}
enum CacheControlScope {
  PUBLIC
  PRIVATE
}
"コントリビューターの種類"
enum ContributorType {
  "Wiki編集者"
  WIKI_EDITOR
  "Webサイト開発者"
  WEB_DEVELOPER
  "Flutterアプリ開発者"
  FLUTTER_DEVELOPER
  "考案"
  PRODUCT_DESIGNER
  "支援"
  SUPPORTER
}
enum FolderMode {
  NORMAL
  COMIC_VERTICAL
  COMIC_HORIZONTAL
}
"通知の種類"
enum NotificationType {
  "作品のいいね"
  LIKED_WORK
  "いいねの集計"
  LIKED_WORKS_SUMMARY
  "作品のランキング結果"
  WORK_AWARD
  "作品のコメント"
  WORK_COMMENT
  "コメントの返信"
  COMMENT_REPLY
  "フォロー"
  FOLLOW
}
"年齢制限"
enum Rating {
  "全年齢"
  G
  "R15"
  R15
  "R18"
  R18
  "R18+"
  R18G
}
"報告理由"
enum ReportReason {
  "誹謗中傷"
  SLANDER
  "著作権侵害"
  COPYRIGHT
  "センシティブ"
  SENSITIVE
  "スパム"
  SPAM
  "その他"
  OTHER
}
"作品の種類"
enum WorkType {
  "画像"
  WORK
  "小説"
  NOVEL
  "動画"
  VIDEO
}
input AcceptPromptonRequestInput {
  requestId: String!
}
input AddPromptonTagToWorkInput {
  workId: String!
  tagNameJA: String!
}
input AddPromptonWorkToFolderInput {
  folderId: String!
  workId: String!
}
input AlbumsWhereInput {
  search: String
}
input AwardsWhereInput {
  type: AwardType
  workType: WorkType
  date: String
  year: Int
  month: Int
  day: Int
}
input BlockPromptonUserInput {
  userId: String!
}
input CancelPromptonRequestInput {
  requestId: String!
}
input ChangePromptonFolderToPaidInput {
  folderId: String!
  price: Int!
  featureCommercialUse: Boolean!
}
input ClosePromptonRequestInput {
  requestId: String!
}
input CreateAccountInput {
  idToken: String!
}
input CreateAlbumInput {
  title: String!
}
input CreateAlbumWorkInput {
  albumId: ID!
  workId: ID!
}
input CreateFolderInput {
  title: String!
}
input CreateFolderWorkInput {
  folderId: ID!
  workId: ID!
}
input CreatePromptonAipicRequestInput {
  note: String!
  recipientId: String!
}
input CreatePromptonChatMessageInput {
  text: String!
}
input CreatePromptonCoffeeRequestInput {
  note: String!
  recipientId: String!
}
input CreatePromptonDeliverableInput {
  requestId: String!
  fileId: String!
  name: String
  description: String
  fileType: String!
}
input CreatePromptonFileInput {
  fileId: String!
  fileType: String!
  width: Int
  height: Int
  path: String!
}
input CreatePromptonFolderInput {
  name: String!
  description: String!
  isPublic: Boolean!
}
input CreatePromptonFolderKeyInput {
  folderId: String!
}
input CreatePromptonFolderViewInput {
  folderId: String!
}
input CreatePromptonInquiryInput {
  name: String!
  companyName: String
  email: String!
  phoneNumber: String
  body: String!
}
input CreatePromptonPaymentMethodInput {
  redirectURL: String
}
input CreatePromptonPlanInput {
  category: String!
  name: String!
  description: String!
  message: String!
  unitPrice: Int!
  minimumQuantity: Int!
  maximumQuantity: Int!
  styleSlugs: [String!]!
  objectSlugs: [String!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  imageFileId: String
}
input CreatePromptonPlanRequestInput {
  planId: String!
  quantity: Int!
  note: String!
  recipientId: String!
  fileIds: [String!]!
}
input CreatePromptonPlanViewInput {
  planId: String!
}
input CreatePromptonProfileBlockInput {
  siteURL: String
  title: String
  description: String
}
input CreatePromptonPromptCategoryInput {
  name: String!
  description: String
  slug: String!
}
input CreatePromptonPromptInput {
  name: String
  description: String
  text: String!
  isNsfw: Boolean!
  isBase: Boolean!
  isSingle: Boolean!
}
input CreatePromptonPromptWorkInput {
  fileId: String!
  fileName: String!
  isPublic: Boolean!
  promptId: String!
}
input CreatePromptonReactionInput {
  workId: String!
  text: String!
}
input CreatePromptonThumbnailFileInput {
  fileId: String!
  originalFileId: String!
}
input CreatePromptonUserFromTokenInput {
  token: String!
  userId: String!
}
input CreatePromptonUserInput {
  name: String!
}
input CreatePromptonUserViewInput {
  userId: String!
}
input CreatePromptonWorkBookmarkInput {
  workId: String!
}
input CreatePromptonWorkInput {
  fileId: String!
  fileName: String!
  folderId: String
  tagNameJA: String
  fileType: String!
}
input CreatePromptonWorkLikeInput {
  workId: String!
}
input CreatePromptonWorkViewInput {
  workId: String!
}
input CreateResponseCommentInput {
  commentId: ID!
  text: String!
}
input CreateStickerInput {
  title: String!
}
input CreateWorkCommentInput {
  workId: ID!
  text: String!
}
input CreateWorkInput {
  title: String!
}
input CreateWorkLikeInput {
  workId: ID!
}
input DailyThemesWhereInput {
  search: String
  year: Int
  month: Int
  day: Int
  startDate: String
  endDate: String
}
input DecrementPromptonPlanSort {
  planId: String!
}
input DecrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}
input DeleteAlbumInput {
  albumId: ID!
}
input DeleteAlbumWorkInput {
  albumId: ID!
  workId: ID!
}
input DeleteCommentInput {
  commentId: ID!
}
input DeleteFolderInput {
  folderId: ID!
}
input DeleteFolderWorkInput {
  folderId: ID!
  workId: ID!
}
input DeletePromptonFolderInput {
  folderId: String!
}
input DeletePromptonIntegrationInput {
  integrationId: String!
}
input DeletePromptonPlanInput {
  planId: String!
}
input DeletePromptonProfileBlockInput {
  profileBlockId: String!
}
input DeletePromptonPromptCategoryInput {
  promptCategoryId: String!
}
input DeletePromptonPromptInput {
  promptId: String!
}
input DeletePromptonReactionInput {
  workId: String!
  text: String!
}
input DeletePromptonWorkBookmarkInput {
  workId: String!
}
input DeletePromptonWorkInput {
  workId: String!
}
input DeletePromptonWorkLikeInput {
  workId: String!
}
input DeleteStickerInput {
  stickerId: ID!
}
input DeleteWorkInput {
  workId: ID!
}
input DeleteWorkLikeInput {
  workId: ID!
}
input FlipPromptonFolderWorkIndexInput {
  folderId: String!
  workId: String!
  nextWorkId: String!
}
input FoldersWhereInput {
  search: String
}
input FollowPromptonUserInput {
  userId: String!
}
input FollowUserInput {
  userId: ID!
}
input IncrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}
input LoginWithPasswordInput {
  login: String!
  password: String!
}
input MarkPromptonFolderAsPrivateInput {
  folderId: String!
}
input MarkPromptonFolderAsPublicInput {
  folderId: String!
}
input MarkPromptonPlanAsPrivateInput {
  planId: String!
}
input MarkPromptonPlanAsPublicInput {
  planId: String!
}
input MarkPromptonWorkAsPrivateInput {
  workId: String!
}
input MarkPromptonWorkAsPublicInput {
  workId: String!
}
input MarkPromptonWorkAsUserHeaderInput {
  workId: String!
}
input MuteTagInput {
  tagName: String!
}
input MuteUserInput {
  userId: ID!
}
input PinPromptonWorkInput {
  workId: String!
}
input PopularWorksWhereInput {
  date: String
  rating: Rating
}
input PromptonFoldersWhereInput {
  userId: String
  search: String
  isPaid: Boolean
}
input PromptonLabelsWhereInput {
  search: String
}
input PromptonPlansWhereInput {
  search: String
  objectSlug: String
  isUnique: Boolean
}
input PromptonRequestsWhereInput {
  status: String
}
input PromptonTagsWhereInput {
  search: String
  isPinned: Boolean
}
input PromptonUsersWhereInput {
  search: String
}
input PromptonUserWorksWhereInput {
  isUncategorized: Boolean
}
input PromptonViewerWorksWhereInput {
  isUncategorized: Boolean
}
input PromptonWorksWhereInput {
  tagSlugs: [String!]
  search: String
  color: String
}
input RejectPromptonRequestInput {
  requestId: String!
}
input RemovePromptonTagFromWorkInput {
  workId: String!
  tagId: String!
}
input RemovePromptonWorkFromFolderInput {
  folderId: String!
  workId: String!
}
input ReportAlbumInput {
  albumId: ID!
  reason: ReportReason!
}
input ReportCommentInput {
  commentId: ID!
  reason: ReportReason!
}
input ReportFolderInput {
  folderId: ID!
  reason: ReportReason!
}
input ReportStickerInput {
  stickerId: ID!
  reason: ReportReason!
}
input ReportUserInput {
  userId: ID!
  reason: ReportReason!
}
input ReportWorkInput {
  workId: ID!
  reason: ReportReason!
}
input StickersWhereInput {
  search: String
}
input TagsWhereInput {
  search: String
}
input TestPromptonIntegrationInput {
  integrationId: String!
}
input UnfollowPromptonUserInput {
  userId: String!
}
input UnfollowUserInput {
  userId: ID!
}
input UnmuteTagInput {
  tagName: String!
}
input UnmuteUserInput {
  userId: ID!
}
input UnpinPromptonWorkInput {
  workId: String!
}
input UnwatchFolderInput {
  userId: ID!
}
input UpdateAccountLoginInput {
  login: String!
}
input UpdateAccountPasswordInput {
  currentPassword: String
  newPassword: String!
}
input UpdateAlbumInput {
  albumId: ID!
}
input UpdateFolderInput {
  folderId: ID!
  title: String!
}
input UpdatePromptonFolderInput {
  folderId: String!
  name: String!
  description: String!
  imageFileId: String
}
input UpdatePromptonFolderSortInput {
  folderId: String!
}
input UpdatePromptonPlanInput {
  planId: String!
  category: String!
  name: String!
  message: String!
  description: String!
  unitPrice: Int!
  minimumQuantity: Int!
  maximumQuantity: Int!
  styleSlugs: [String!]!
  objectSlugs: [String!]!
  featurePrivate: Boolean!
  featureCopyrightFree: Boolean!
  featureCommercialUse: Boolean!
  featureFanFiction: Boolean!
  imageFileId: String
}
input UpdatePromptonPlanSortInput {
  planId: String!
}
input UpdatePromptonProfileBlockInput {
  profileBlockId: String!
  siteURL: String
  title: String
  description: String
}
input UpdatePromptonPromptCategoryInput {
  promptCategoryId: String!
  name: String!
  description: String
}
input UpdatePromptonPromptInput {
  promptId: String!
  name: String!
  description: String
  isNsfw: Boolean!
  isBase: Boolean!
  isSingle: Boolean!
}
input UpdatePromptonUserAvatarInput {
  avatarFileId: String
}
input UpdatePromptonUserHeaderImageInput {
  imageFileId: String!
}
input UpdatePromptonUserLoginInput {
  login: String!
}
input UpdatePromptonUserProfileInput {
  name: String!
  biography: String
  twitterUsername: String
  githubUsername: String
  instagramUsername: String
  pixivUsername: String
  tumblrUsername: String
  deviantartUsername: String
}
input UpdatePromptonWorkInput {
  workId: String!
  title: String
  body: String
}
input UpdateStickerInput {
  stickerId: ID!
  title: String!
}
input UpdateUserProfileInput {
  displayName: String!
  biography: String!
}
input UpdateWorkInput {
  workId: ID!
  title: String!
}
input UsersWhereInput {
  search: String
}
input UserWorksWhereInput {
  search: String
}
input WatchFolderInput {
  folderId: ID!
}
input WorkAwardsWhereInput {
  type: AwardType
  date: String
  year: Int
  month: Int
  day: Int
  weekIndex: Int
}
input WorksWhereInput {
  rating: Rating
  search: String
}
directive @defer(label: String, if: Boolean! = true) on FRAGMENT_SPREAD | INLINE_FRAGMENT
"Exposes a URL that specifies the behavior of this scalar."
directive @specifiedBy(
    "The URL that specifies the behavior of this scalar."
    url: String!
  ) on SCALAR
