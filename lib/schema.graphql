"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

input AcceptPromptonRequestInput {
  requestId: String!
}

"""投稿の公開設定"""
enum AccessType {
  """下書き"""
  DRAFT

  """限定公開"""
  LIMITED

  """非公開"""
  PRIVATE

  """公開"""
  PUBLIC

  """新着非公開"""
  SILENT
}

input AddPromptonTagToWorkInput {
  tagNameJA: String!
  workId: String!
}

input AddPromptonWorkToFolderInput {
  folderId: String!
  workId: String!
}

"""運営による公開設定"""
enum AdminAccessType {
  """完全非公開"""
  PRIVATE

  """公開"""
  PUBLIC

  """一時非公開"""
  TEMPORARY_PRIVATE
}

"""モデル"""
type AiModelNode implements Node {
  """生成機能のモデルID"""
  generationModelId: ID
  id: ID!

  """モデル名"""
  name: String!

  """サムネイル画像"""
  thumbnailImageURL: String

  """モデル種別"""
  type: AiModelType

  """投稿機能のモデルID"""
  workModelId: ID

  """
  作品
  ※キャッシュ不可
  """
  works(limit: Int!, offset: Int!, where: WorksWhereInput): [WorkNode!]!

  """作品数"""
  worksCount(where: WorksWhereInput): Int!
}

"""AIモデルの種類"""
enum AiModelType {
  """画像"""
  IMAGE
}

input AiModelWhereInput {
  search: String
}

"""作品のシリーズ"""
type AlbumNode implements Node {
  """作成日"""
  createdAt: Int!

  """説明"""
  description: String!
  id: ID!

  """いいねしている"""
  isLiked: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """保存している"""
  isWatched: Boolean!

  """いいね数"""
  likesCount: Int!

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """年齢種別"""
  rating: AlbumRating!

  """シェア"""
  shareText: String

  """スラッグ"""
  slug: String

  """サムネイル"""
  thumbnailImage: ImageNode @deprecated(reason: "廃止")

  """サムネイル画像のURL"""
  thumbnailImageURL: String

  """タイトル"""
  title: String!

  """ユーザ"""
  user: UserNode!

  """作成者"""
  userId: ID!
  viewer: AlbumViewerNode @deprecated(reason: "isLikedを使用する")

  """閲覧数"""
  viewsCount: Int!

  """作品ID一覧"""
  workIds: [Int!]!

  """
  作品
  ※キャッシュ不可
  """
  works(limit: Int!, offset: Int!): [WorkNode!]!

  """作品数"""
  worksCount: Int!
}

"""アルバムの並び順"""
enum AlbumOrderBy {
  """投稿時刻"""
  DATE_CREATED

  """名前"""
  NAME
}

"""アルバムの年齢制限"""
enum AlbumRating {
  """全年齢"""
  G

  """センシティブ"""
  R18
}

input AlbumsWhereInput {
  """センシティブ"""
  isSensitive: Boolean

  """全年齢とセンシティブどちらも取得するかどうか"""
  isSensitiveAndAllRating: Boolean

  """検査済みである必要があるかどうか"""
  needInspected: Boolean

  """サムネイル画像が必ず存在しないといけないか"""
  needsThumbnailImage: Boolean

  """ソート"""
  orderBy: AlbumOrderBy

  """所有者"""
  ownerUserId: ID

  """年齢種別"""
  ratings: [AlbumRating!]
  search: String

  """昇順/降順"""
  sort: Sort
}

type AlbumViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isWatched: Boolean!
}

"""投稿（アニメーション）"""
type AnimationPostNode implements Node {
  """閲覧権限の種類"""
  accessType: AccessType!

  """運営による閲覧権限の種類"""
  adminAccessType: AdminAccessType!

  """シリーズ情報"""
  album: AlbumNode

  """ブックマーク数"""
  bookmarksCount: Int!

  """コメント"""
  comment(id: ID!): CommentNode!

  """コメント"""
  comments(limit: Int!, offset: Int!): [CommentNode!]!

  """コメント数"""
  commentsCount: Int!

  """作成日"""
  createdAt: Int!

  """デイリーランキング"""
  dailyRanking: Int

  """テーマ"""
  dailyTheme: DailyThemeNode

  """説明"""
  description: String

  """説明(英語)"""
  enDescription: String

  """タイトル(英語)"""
  enTitle: String
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")

  """画像の高さ"""
  imageHeight: Int!

  """画像ID"""
  imageId: ID! @deprecated(reason: "廃止")

  """画像URL"""
  imageURL: String!

  """画像の幅"""
  imageWidth: Int!

  """ブックマークしている"""
  isBookmarked: Boolean!

  """コメント編集許可"""
  isCommentsEditable: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """自分自身が推薦しているかどうか"""
  isMyRecommended: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """いいねしたユーザ一覧"""
  likedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """いいね数"""
  likesCount: Int!

  """マンスリーランキング"""
  monthlyRanking: Int

  """次の作品"""
  nextPost: AnimationPostNode

  """OGP画像URL"""
  ogpThumbnailImageUrl: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """前の作品"""
  previousPost: AnimationPostNode

  """年齢制限"""
  rating: Rating

  """関連するタグ"""
  relatedTags(limit: Int!, offset: Int!): [TagNode!]!

  """関連URL"""
  relatedUrl: String

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [AnimationPostNode!]!

  """シェア"""
  shareText: String

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """テイスト"""
  style: ImageStyle!

  """作品"""
  subPosts: [SubWorkNode!]!

  """複数画像数"""
  subPostsCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!

  """サムネイル画像の位置"""
  thumbnailImagePosition: Float

  """タイトル"""
  title: String!

  """更新日"""
  updatedAt: Int!

  """ユーザ"""
  user: UserNode!

  """ユーザID"""
  userId: ID!

  """動画URL"""
  videoUrl: String

  """閲覧数"""
  viewsCount: Int!

  """ウィークリーランキング"""
  weeklyRanking: Int
}

"""運営のお知らせ"""
type AnnouncementNode implements Node {
  """本文"""
  body: String!
  id: ID!

  """作成日"""
  publishedAt: Int!

  """タイトル"""
  title: String!
}

"""イベント"""
type AppEventNode implements Node {
  awardWorks(isSensitive: Boolean!, limit: Int!, offset: Int!): [WorkNode!]
  awards(limit: Int!, offset: Int!, where: UserWorksWhereInput): [WorkNode!]
  description: String
  endAt: Int
  headerImageUrl: String
  id: ID!
  slug: String
  startAt: Int
  tag: String
  thumbnailImageUrl: String
  title: String
  works(limit: Int!, offset: Int!, where: WorksWhereInput): [WorkNode!]

  """作品数"""
  worksCount: Int!
}

input AppEventsWhereInput {
  """終了日"""
  endAt: String

  """String"""
  slug: String

  """開始日"""
  startAt: String

  """タグ"""
  tag: String

  """タイトル"""
  title: String
}

input AwardsWhereInput {
  date: String
  day: Int
  month: Int
  type: AwardType
  workType: WorkType
  year: Int
}

"""ランキングの種類"""
enum AwardType {
  """日別"""
  DAILY

  """日別（テーマなし）"""
  DAILY_NO_THEME

  """月別"""
  MONTHLY

  """週別"""
  WEEKLY
}

input BlockPromptonUserInput {
  userId: String!
}

"""お気に入りスタンプ種別"""
enum BookmarkedStickerType {
  """コメント"""
  comment

  """返信"""
  reply
}

input CancelImageGenerationReservedTaskInput {
  nanoid: String!
}

input CancelImageGenerationTaskInput {
  nanoid: String!
}

input CancelPromptonRequestInput {
  requestId: String!
}

"""カテゴリ"""
type CategoryNode implements Node {
  id: ID!
  isWatched: Boolean!

  """名前"""
  name: String!
  viewer: CategoryViewerNode
}

type CategoryViewerNode implements Node {
  id: ID!
  isWatched: Boolean!
}

input ChangePromptonFolderToPaidInput {
  featureCommercialUse: Boolean!
  folderId: String!
  price: Int!
}

input ClosePromptonRequestInput {
  requestId: String!
}

"""コメント"""
type CommentNode implements Node {
  """作成日"""
  createdAt: Int!
  id: ID!

  """削除済み"""
  isDeleted: Boolean!

  """レスポンス"""
  responses(limit: Int!, offset: Int!): [CommentNode!]

  """スタンプ"""
  sticker: StickerNode

  """内容"""
  text: String!
  user: UserNode
  userId: ID

  """作品"""
  work: WorkNode
  workId: ID
}

input CommentsOrderBy {
  createdAt: Direction
}

input CommentsWhereInput {
  isSensitive: Boolean
  ratings: [Rating!]
}

"""ControlNetテンプレート"""
type ControlNetCategoryNode implements Node {
  contents: [ControlNetContentNode!]!
  enName: String!
  id: ID!
  name: String!
}

type ControlNetContentNode implements Node {
  enName: String!
  id: ID!
  imageUrl: String!
  model: String!
  module: String!
  name: String!

  """サイズの種類"""
  sizeKind: ImageGenerationSizeKind!
  thumbnailImageUrl: String!
}

input CreateAccountInput {
  idToken: String!
}

input CreateAlbumInput {
  description: String
  slug: String!
  thumbnailUrl: String
  title: String!
  workIds: [ID!]!
}

input CreateAlbumWorkInput {
  albumId: ID!
  workId: ID!
}

input CreateFolderInput {
  title: String!
}

input CreateFolderWorkInput {
  folderId: ID!
  workId: ID!
}

input CreateImageGenerationMemoInput {
  clipSkip: Int!
  explanation: String!
  height: Int!
  modelId: ID!
  negativePrompts: String!
  prompts: String!
  sampler: String!
  scale: Int!
  seed: Int!
  steps: Int!
  title: String!
  vae: String!
  width: Int!
}

input CreateImageGenerationTaskInput {
  """clipSkip"""
  clipSkip: Int
  controlNetControlMode: String
  controlNetEnabled: Boolean
  controlNetGuidance: Float
  controlNetGuidanceEnd: Float
  controlNetGuidanceStart: Float
  controlNetHrOption: String

  """ControlNetパラメータ"""
  controlNetImageUrl: String
  controlNetMaskImageUrl: String
  controlNetModel: String
  controlNetModule: String
  controlNetPixelPerfect: Boolean
  controlNetProcessorRes: Int
  controlNetResizeMode: String
  controlNetSaveDetectedMap: Boolean
  controlNetThresholdA: Int
  controlNetThresholdB: Int
  controlNetWeight: Float

  """生成する枚数"""
  count: Int!

  """モデル"""
  model: String!

  """ネガティブプロンプト"""
  negativePrompt: String!

  """プロンプト"""
  prompt: String!

  """sampler"""
  sampler: String!

  """scale"""
  scale: Int!

  """seed"""
  seed: Float!

  """画像のサイズ"""
  sizeType: ImageGenerationSizeType!

  """steps"""
  steps: Int!
  t2tDenoisingStrengthSize: String

  """t2tパラメータ"""
  t2tImageUrl: String
  t2tInpaintingFillSize: String
  t2tMaskImageUrl: String

  """生成の方式"""
  type: ImageGenerationType!

  """アップスケールサイズ(x2, x4, x8)"""
  upscaleSize: Float

  """VAE"""
  vae: String!
}

input CreateMessageInput {
  recipientId: ID!
  text: String!
}

input CreateNoteInput {
  text: String!
}

input CreateNovelInput {
  text: String!
}

input CreatePassCheckoutSessionInput {
  passType: PassType!
}

input CreatePromptonAipicRequestInput {
  fee: Int
  note: String
  recipientId: String!
}

input CreatePromptonChatMessageInput {
  text: String!
}

input CreatePromptonCoffeeRequestInput {
  note: String!
  recipientId: String!
}

input CreatePromptonDeliverableInput {
  description: String
  fileId: String!
  fileType: String!
  name: String
  requestId: String!
}

input CreatePromptonFileInput {
  fileId: String!
  fileType: String!
  height: Int
  path: String!
  width: Int
}

input CreatePromptonFolderInput {
  description: String!
  isPublic: Boolean!
  name: String!
}

input CreatePromptonFolderKeyInput {
  folderId: String!
}

input CreatePromptonInquiryInput {
  body: String!
  companyName: String
  email: String!
  name: String!
  phoneNumber: String
}

input CreatePromptonPaymentMethodInput {
  redirectURL: String
}

type CreatePromptonPaymentMethodResult {
  checkoutURL: String!
}

input CreatePromptonPlanInput {
  category: String!
  description: String!
  featureCommercialUse: Boolean!
  featureCopyrightFree: Boolean!
  featureFanFiction: Boolean!
  featurePrivate: Boolean!
  imageFileId: String
  maximumQuantity: Int!
  message: String!
  minimumQuantity: Int!
  name: String!
  objectSlugs: [String!]!
  styleSlugs: [String!]!
  unitPrice: Int!
}

input CreatePromptonPlanRequestInput {
  fileIds: [String!]!
  note: String!
  planId: String!
  quantity: Int!
  recipientId: String!
}

input CreatePromptonProfileBlockInput {
  description: String
  siteURL: String
  title: String
}

input CreatePromptonPromptInput {
  description: String
  isBase: Boolean!
  isNsfw: Boolean!
  isSingle: Boolean!
  name: String
  text: String!
}

input CreatePromptonPromptWorkInput {
  fileId: String!
  fileName: String!
  isPublic: Boolean!
  promptId: String!
}

input CreatePromptonUserFromTokenInput {
  token: String!
}

input CreatePromptonUserInput {
  name: String!
}

input CreatePromptonWorkInput {
  fileId: String!
  fileName: String!
  fileType: String!
  folderId: String
  tagNameJA: String
}

input CreatePromptonWorkLikeInput {
  workId: String!
}

input CreateRecommendedWorkInput {
  workId: ID!
}

input CreateReservedImageGenerationTaskInput {
  clipSkip: Int
  controlNetControlMode: String
  controlNetEnabled: Boolean
  controlNetGuidance: Float
  controlNetGuidanceEnd: Float
  controlNetGuidanceStart: Float
  controlNetHrOption: String

  """ControlNetの設定"""
  controlNetImageUrl: String
  controlNetMaskImageUrl: String
  controlNetModel: String
  controlNetModule: String
  controlNetPixelPerfect: Boolean
  controlNetProcessorRes: Int
  controlNetResizeMode: String
  controlNetSaveDetectedMap: Boolean
  controlNetThresholdA: Int
  controlNetThresholdB: Int
  controlNetWeight: Float

  """生成する枚数"""
  count: Int!
  model: String!
  negativePrompt: String!
  prompt: String!
  sampler: String!
  scale: Int!
  seed: Float!

  """画像のサイズ"""
  sizeType: ImageGenerationSizeType!
  steps: Int!
  t2tDenoisingStrengthSize: String

  """t2tパラメータ"""
  t2tImageUrl: String
  t2tInpaintingFillSize: String
  t2tMaskImageUrl: String

  """生成の方式"""
  type: ImageGenerationType!

  """アップスケールサイズ(x2, x4, x8)"""
  upscaleSize: Float
  vae: String!
}

input CreateResponseCommentInput {
  commentId: ID!
  stickerId: ID
  text: String!
}

input CreateStickerInput {
  """公開状態"""
  accessType: AccessType!

  """カテゴリ"""
  categories: [String!]

  """ジャンル"""
  genre: StickerGenre

  """画像URL"""
  imageUrl: String!

  """タイトル"""
  title: String
}

input CreateUserProfileInput {
  """紹介"""
  biography: String
  displayName: String

  """紹介（英語）"""
  enBiography: String

  """GitHub"""
  githubAccountId: String

  """ヘッダー画像"""
  headerImageUrl: String

  """ホームURL"""
  homeUrl: String

  """アイコン画像"""
  iconUrl: String

  """Instagram"""
  instagramAccountId: String

  """メールアドレス"""
  mailAddress: String

  """X"""
  twitterAccountId: String
}

input CreateUserStickerInput {
  stickerId: ID!
}

input CreateWorkCommentInput {
  stickerId: ID
  text: String!
  workId: ID!
}

input CreateWorkInput {
  """生成情報の公開設定"""
  accessGenerationType: GenerationAccessType!

  """公開状態"""
  accessType: AccessType!

  """シリーズID"""
  albumId: ID
  enExplanation: String
  entitle: String

  """説明"""
  explanation: String
  imageHeight: Int!

  """テイスト"""
  imageStyle: ImageStyle!

  """画像"""
  imageUrls: [String!]!
  imageWidth: Int!

  """コメント許可"""
  isCommentEditable: Boolean!

  """宣伝作品かどうか"""
  isPromotion: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!
  largeThumbnailImageHeight: Int!

  """大きいサムネイル画像(最大縦横600px)"""
  largeThumbnailImageURL: String!
  largeThumbnailImageWidth: Int!

  """メイン画像のハッシュ値（同じ画像の重複投稿防止に使う）"""
  mainImageSha256: String!

  """Markdown"""
  md: String
  modelHash: String

  """モデル"""
  modelId: ID
  modelName: String
  negativePrompt: String
  noise: String

  """OGP画像URL"""
  ogpImageUrl: String
  otherGenerationParams: String
  pngInfo: String

  """生成情報"""
  prompt: String

  """年齢種別"""
  rating: Rating!

  """関連リンク"""
  relatedUrl: String

  """予約日"""
  reservedAt: Float
  sampler: String
  seed: String
  smallThumbnailImageHeight: Int!

  """小さいサムネイル画像(最大縦横400px)"""
  smallThumbnailImageURL: String!
  smallThumbnailImageWidth: Int!
  steps: String
  strength: String

  """お題ID"""
  subjectId: ID

  """タグ"""
  tags: [String!]

  """サムネイル位置"""
  thumbnailPosition: Float

  """題名"""
  title: String!

  """種別"""
  type: WorkType!

  """動画URL"""
  videoUrl: String
}

input CreateWorkLikeInput {
  workId: ID!
}

"""作品の日別テーマ"""
type DailyThemeNode implements Node {
  """日付"""
  dateText: String!

  """日にち"""
  day: Int!

  """作品"""
  firstWork: WorkNode
  id: ID!

  """月"""
  month: Int!

  """開始時刻"""
  startTime: Int!

  """タイトル"""
  title: String!

  """不明"""
  type: String!

  """作品"""
  works(limit: Int!, offset: Int!, where: UserWorksWhereInput): [WorkNode!]

  """作品数"""
  worksCount: Int!

  """年"""
  year: Int!
}

input DailyThemesWhereInput {
  day: Int
  endDate: String
  month: Int
  search: String
  startDate: String
  year: Int
}

input DecrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}

input DeleteAlbumInput {
  albumId: ID!
}

input DeleteAlbumWorkInput {
  albumId: ID!
  workId: ID!
}

input DeleteCommentInput {
  commentId: ID!
}

input DeleteFolderInput {
  folderId: ID!
}

input DeleteFolderWorkInput {
  folderId: ID!
  workId: ID!
}

input DeleteImageGenerationMemoInput {
  nanoid: String!
}

input DeleteImageGenerationResultInput {
  nanoid: String!
}

input DeleteMessageInput {
  messageId: ID!
}

input DeleteNoteInput {
  noteId: ID!
}

input DeleteNovelInput {
  novelId: ID!
}

input DeletePromptonFolderInput {
  folderId: String!
}

input DeletePromptonIntegrationInput {
  integrationId: String!
}

input DeletePromptonPlanInput {
  planId: String!
}

input DeletePromptonProfileBlockInput {
  profileBlockId: String!
}

input DeletePromptonPromptInput {
  promptId: String!
}

input DeletePromptonWorkInput {
  workId: String!
}

input DeletePromptonWorkLikeInput {
  workId: String!
}

input DeleteRecommendedWorkInput {
  workId: ID!
}

input DeleteStickerInput {
  stickerId: ID!
}

input DeleteUserStickerInput {
  stickerId: ID!
}

input DeleteWorkInput {
  workId: ID!
}

input DeleteWorkLikeInput {
  workId: ID!
}

"""並び順"""
enum Direction {
  ASC
  DESC
}

input EnablePromptonRequestChatInput {
  requestId: String!
}

input FeaturePromptonRequestWhereInput {
  userId: ID!
}

"""フィード"""
type FeedNode implements Node {
  """作成日"""
  createdAt: Int!

  """ID"""
  id: ID!

  """投稿一覧"""
  posts(limit: Int!, offset: Int!, where: FeedPostsWhereInput): [FeedPostNode!]!
}

"""フィードへの投稿"""
type FeedPostNode implements Node {
  """本文"""
  content: String!

  """作成日"""
  createdAt: Int!

  """ID"""
  id: ID!

  """作品"""
  work: WorkNode
}

"""フィードの投稿一覧の条件"""
input FeedPostsWhereInput {
  """この日付以降"""
  afterDate: String

  """年齢種別"""
  ratings: [Rating!]
}

input FlipPromptonFolderWorkIndexInput {
  folderId: String!
  nextWorkId: String!
  workId: String!
}

enum FolderMode {
  """漫画（横）"""
  COMIC_HORIZONTAL

  """漫画（縦）"""
  COMIC_VERTICAL

  """通常"""
  NORMAL
}

"""フォルダ"""
type FolderNode implements Node {
  """作成日"""
  createdAt: Int!

  """説明"""
  description: String!
  id: ID!

  """削除済み"""
  isDeleted: Boolean!

  """非公開である"""
  isPrivate: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """ID"""
  nanoid: ID!

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """レーティング"""
  rating: Rating

  """シェア"""
  shareText: String

  """タグ一覧"""
  tags: [String!]

  """サムネイル画像"""
  thumbnailImageURL: String

  """タイトル"""
  title: String!

  """更新日"""
  updatedAt: Int!

  """ユーザ"""
  user: UserNode

  """ユーザID"""
  userId: ID

  """作品"""
  works(limit: Int!, offset: Int!): [WorkNode!]!

  """作品数"""
  worksCount: Int
}

input FoldersWhereInput {
  isPrivate: Boolean
  isSensitive: Boolean
  search: String
  tags: [String!]
  type: FolderType
  userId: ID
}

"""フォルダの種類"""
enum FolderType {
  """ブックマーク"""
  BOOKMARK

  """非公開"""
  PRIVATE

  """公開"""
  PUBLIC

  """おすすめ"""
  RECOMMENDED
}

input FolderWhereInput {
  nanoid: String!
}

input FollowersWhereInput {
  userId: Int!
}

input FollowingUsersWhereInput {
  userId: Int!
}

"""通知（フォロー）"""
type FollowNotificationNode implements Node {
  createdAt: Int!
  id: ID!

  """種別"""
  type: String!

  """ユーザ"""
  user: UserNode
  userId: ID
}

input FollowPromptonUserInput {
  userId: String!
}

"""タグをフォローする"""
input FollowTagInput {
  tagName: String!
}

input FollowUserInput {
  userId: ID!
}

"""生成情報の公開設定"""
enum GenerationAccessType {
  """非公開"""
  PRIVATE

  """公開"""
  PUBLIC

  """公開（復元可能）"""
  PUBLIC_RESTORABLE
}

input HotWorksWhereInput {
  isSensitive: Boolean
}

type ImageGenerationEngineStatus {
  """通常の予測生成秒数"""
  normalPredictionGenerationWait: Int!

  """通常の生成タスク数"""
  normalTasksCount: Int!

  """優先1の予測生成秒数"""
  standardPredictionGenerationWait: Int!

  """優先1の生成タスク数"""
  standardTasksCount: Int!
}

"""画像生成メモ"""
type ImageGenerationMemoNode implements Node {
  clipSkip: Int!

  """作成時刻"""
  createdAt: Int

  """説明"""
  explanation: String!
  height: Int!
  id: ID!

  """削除済み"""
  isDeleted: Boolean!

  """モデル"""
  model: ImageGeneratorNode!
  nanoid: String!

  """ネガティブプロンプト"""
  negativePrompts: String!

  """プロンプト"""
  prompts: String!

  """サンプラー"""
  sampler: String!
  scale: Int!
  seed: Int!
  steps: Int!

  """タイトル"""
  title: String!

  """ユーザID"""
  userId: ID

  """VAE"""
  vae: String!
  width: Int!
}

input ImageGenerationMemoOrderBy {
  createdAt: Direction
}

"""予約済み画像生成"""
type ImageGenerationReservedTaskNode implements Node {
  clipSkip: Int!

  """ControlNetの設定"""
  controlNetControlMode: String
  controlNetEnabled: Boolean
  controlNetGuidance: Float
  controlNetGuidanceEnd: Float
  controlNetGuidanceStart: Float
  controlNetHrOption: String
  controlNetModel: String
  controlNetModule: String
  controlNetPixelPerfect: Boolean
  controlNetProcessorRes: Int
  controlNetResizeMode: String
  controlNetSaveDetectedMap: Boolean
  controlNetThresholdA: Int
  controlNetThresholdB: Int
  controlNetWeight: Float

  """予約開始した時刻"""
  createdAt: Int

  """生成の方式"""
  generationType: ImageGenerationType!
  id: ID!

  """削除済み"""
  isDeleted: Boolean!

  """生成済み"""
  isGenerated: Boolean!
  model: ImageGeneratorNode!
  nanoid: String
  negativePrompt: String!
  prompt: String!
  sampler: String!
  scale: Int!
  seed: Float!
  sizeType: ImageGenerationSizeType!
  steps: Int!
  t2tDenoisingStrengthSize: String
  t2tImageUrl: String
  t2tInpaintingFillSize: String
  t2tMaskImageUrl: String

  """Token"""
  token: String

  """アップスケールサイズ(x2, x4, x8)"""
  upscaleSize: Float
  vae: String
}

"""画像生成"""
type ImageGenerationResultNode implements Node {
  clipSkip: Int!

  """生成が完了した時刻"""
  completedAt: Int

  """ControlNetの設定"""
  controlNetControlMode: String
  controlNetEnabled: Boolean
  controlNetGuidance: Float
  controlNetGuidanceEnd: Float
  controlNetGuidanceStart: Float
  controlNetHrOption: String
  controlNetModel: String
  controlNetModule: String
  controlNetPixelPerfect: Boolean
  controlNetProcessorRes: Int
  controlNetResizeMode: String
  controlNetSaveDetectedMap: Boolean
  controlNetThresholdA: Int
  controlNetThresholdB: Int
  controlNetWeight: Float

  """予想生成秒数"""
  estimatedSeconds: Int

  """生成の方式"""
  generationType: ImageGenerationType!
  id: ID!

  """画像ファイル名"""
  imageFileName: String
  imageUrl: String

  """保護済みかどうか"""
  isProtected: Boolean
  model: ImageGeneratorNode!
  modelHash: String
  nanoid: String
  negativePrompt: String!

  """画像投稿時に設定できるモデル識別子"""
  postModelId: String
  prompt: String!

  """お気に入り度"""
  rating: Int
  sampler: String!
  scale: Int!
  seed: Float!
  sizeKind: ImageGenerationSizeKind!
  sizeType: ImageGenerationSizeType!

  """生成状態"""
  status: ImageGenerationStatus!
  steps: Int!
  t2tDenoisingStrengthSize: String
  t2tImageUrl: String
  t2tInpaintingFillSize: String
  t2tMaskImageUrl: String
  thumbnailImageFileName: String
  thumbnailToken: String
  thumbnailUrl: String
  token: String

  """アップスケールサイズ(x2, x4, x8)"""
  upscaleSize: Float
  vae: String
}

input ImageGenerationResultsWhereInput {
  dateText: String
  fromDate: String
  isProtected: Boolean
  minRating: Int

  """Nanoid一覧"""
  nanoids: [String!]
  rating: Int
}

"""画像生成のサイズの種類"""
enum ImageGenerationSizeKind {
  LANDSCAPE
  PORTRAIT
  SQUARE
  TALL_PORTRAIT
  WIDE_LANDSCAPE
}

"""画像生成のサイズ"""
enum ImageGenerationSizeType {
  """SD1 384x960"""
  SD1_384_960

  """SD1 512x512"""
  SD1_512_512

  """SD1 512x768"""
  SD1_512_768

  """SD1 768x512"""
  SD1_768_512

  """SD1_960_384"""
  SD1_960_384

  """SD2 576x1440"""
  SD2_576_1440

  """SD2 768x768"""
  SD2_768_768

  """SD2 768x1152"""
  SD2_768_1152

  """SD2 768x1200"""
  SD2_768_1200

  """SD2 1152x768"""
  SD2_1152_768

  """SD2 1200x768"""
  SD2_1200_768

  """SD2 1440x576"""
  SD2_1440_576

  """SD3 640x1536"""
  SD3_640_1536

  """SD3 832x1216"""
  SD3_832_1216

  """SD3 896x896"""
  SD3_896_896

  """SD3 896x1152"""
  SD3_896_1152

  """SD3 960x384"""
  SD3_960_384

  """SD3 1024x1024"""
  SD3_1024_1024

  """SD3 1152x896"""
  SD3_1152_896

  """SD3 1152x1152"""
  SD3_1152_1152

  """SD3 1216x832"""
  SD3_1216_832

  """SD3 1216x1216"""
  SD3_1216_1216

  """SD3 1536x640"""
  SD3_1536_640
}

"""画像生成の状態"""
enum ImageGenerationStatus {
  """キャンセル済み"""
  CANCELED

  """完了"""
  DONE

  """エラー"""
  ERROR

  """処理中"""
  IN_PROGRESS

  """保留"""
  PENDING

  """予約"""
  RESERVED
}

"""画像生成"""
type ImageGenerationTaskNode implements Node {
  clipSkip: Int!

  """生成が完了した時刻"""
  completedAt: Int

  """ControlNetの設定"""
  controlNetControlMode: String
  controlNetEnabled: Boolean
  controlNetGuidance: Float
  controlNetGuidanceEnd: Float
  controlNetGuidanceStart: Float
  controlNetHrOption: String
  controlNetModel: String
  controlNetModule: String
  controlNetPixelPerfect: Boolean
  controlNetProcessorRes: Int
  controlNetResizeMode: String
  controlNetSaveDetectedMap: Boolean
  controlNetThresholdA: Int
  controlNetThresholdB: Int
  controlNetWeight: Float
  count: Int!

  """予想生成秒数"""
  estimatedSeconds: Int

  """生成の方式"""
  generationType: ImageGenerationType!
  id: ID!

  """画像ファイル名"""
  imageFileName: String
  imageUrl: String

  """削除済み"""
  isDeleted: Boolean!

  """保護済みかどうか"""
  isProtected: Boolean
  model: ImageGeneratorNode!
  nanoid: String
  negativePrompt: String!
  prompt: String!

  """お気に入り度"""
  rating: Int
  sampler: String!
  scale: Int!
  seed: Float!
  sizeKind: ImageGenerationSizeKind!
  sizeType: ImageGenerationSizeType!

  """生成状態"""
  status: ImageGenerationStatus!
  steps: Int!
  t2tDenoisingStrengthSize: String
  t2tImageUrl: String
  t2tInpaintingFillSize: String
  t2tMaskImageUrl: String
  thumbnailImageFileName: String
  thumbnailToken: String
  thumbnailUrl: String
  token: String

  """アップスケールサイズ(x2, x4, x8)"""
  upscaleSize: Float
  vae: String
}

input ImageGenerationTasksWhereInput {
  dateText: String
  fromDate: String
  isProtected: Boolean
  minRating: Int
  rating: Int

  """UUID一覧"""
  uuids: [String!]
}

"""画像生成の種類"""
enum ImageGenerationType {
  """画像から"""
  IMAGE_TO_IMAGE

  """画像から"""
  INPAINTING

  """テキストから"""
  TEXT_TO_IMAGE
}

"""画像生成サービス"""
type ImageGeneratorNode implements Node {
  id: ID!

  """名前"""
  name: String!

  """推奨プロンプト"""
  recommendedPrompt: String!

  """SD種別（SD1, SD2, SDXL）"""
  type: String!
}

"""画像生成LoRA"""
type ImageLoraModelNode implements Node {
  """説明"""
  description: String

  """種別"""
  genre: String
  id: ID!

  """ライセンス"""
  license: String

  """名前"""
  name: String!

  """プロンプト"""
  prompts: [String!]!

  """コード"""
  slug: String!

  """サムネイル画像のURL"""
  thumbnailImageURL: String
}

"""AIモデルの種類"""
enum ImageModelCategory {
  """獣"""
  ANIMAL

  """少女アニメ"""
  ANIME_GIRL

  """背景"""
  BACKGROUND

  """グラビア"""
  BIKINI_MODEL

  """フィギュア"""
  FIGURE

  """男子イラスト"""
  ILLUSTRATION_BOY

  """少女イラスト"""
  ILLUSTRATION_GIRL
}

"""画像生成モデル"""
type ImageModelNode implements Node {
  """カテゴリ"""
  category: ImageModelCategory!

  """説明"""
  description: String

  """表示名"""
  displayName: String!
  id: ID!

  """ライセンス"""
  license: String

  """モデル名"""
  modelName: String!

  """名前"""
  name: String!

  """プロンプト"""
  prompts: [String!]!

  """コード"""
  slug: String!

  """スタイル"""
  style: ImageStyle!

  """サムネイル画像"""
  thumbnailImageURL: String

  """StableDiffusionの種類"""
  type: String!

  """参考作品"""
  works(limit: Int!, offset: Int!, where: WorksWhereInput): [WorkNode!]!
}

input ImageModelWhereInput {
  """ID"""
  id: [ID!]

  """モデル名(空白は詰める)"""
  name: String
}

"""画像"""
type ImageNode implements Node {
  """ダウンロードURL"""
  downloadURL: String!
  id: ID!

  """種類"""
  type: String!
}

"""投稿（画像）"""
type ImagePostNode implements Node {
  """閲覧権限の種類"""
  accessType: AccessType!

  """運営による閲覧権限の種類"""
  adminAccessType: AdminAccessType!

  """シリーズ情報"""
  album: AlbumNode

  """ブックマーク数"""
  bookmarksCount: Int!

  """clipSkip"""
  clipSkip: Int

  """コメント"""
  comment(id: ID!): CommentNode!

  """コメント"""
  comments(limit: Int!, offset: Int!): [CommentNode!]!

  """コメント数"""
  commentsCount: Int!

  """作成日"""
  createdAt: Int!

  """デイリーランキング"""
  dailyRanking: Int

  """テーマ"""
  dailyTheme: DailyThemeNode

  """説明"""
  description: String

  """説明(英語)"""
  enDescription: String

  """タイトル(英語)"""
  enTitle: String

  """生成情報公開設定"""
  generationAccessType: GenerationAccessType!

  """生成機で生成した場合のモデルID"""
  generationModelId: ID
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")

  """画像の比率"""
  imageAspectRatio: Float!

  """画像の高さ"""
  imageHeight: Int!

  """画像ID"""
  imageId: ID! @deprecated(reason: "廃止")

  """画像URL"""
  imageURL: String!

  """画像の幅"""
  imageWidth: Int!

  """ブックマークしている"""
  isBookmarked: Boolean!

  """コメント編集許可"""
  isCommentsEditable: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """生成画像でプロンプト公開作品かどうか"""
  isGeneration: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """自分自身が推薦しているかどうか"""
  isMyRecommended: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """いいねしたユーザ一覧"""
  likedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """いいね数"""
  likesCount: Int!

  """画像生成関連の設定"""
  model: String

  """画像生成関連の設定"""
  modelHash: String

  """マンスリーランキング"""
  monthlyRanking: Int

  """ネガティブプロンプト"""
  negativePrompt: String

  """次の作品"""
  nextPost: ImagePostNode

  """画像生成関連の設定"""
  noise: String

  """OGP画像URL"""
  ogpThumbnailImageUrl: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """その他の画像生成関連の設定"""
  otherGenerationParams: String

  """pngInfo"""
  pngInfo: String

  """前の作品"""
  previousPost: ImagePostNode

  """プロンプト"""
  prompt: String

  """プロンプトの閲覧権限の種類"""
  promptAccessType: AccessType!

  """年齢制限"""
  rating: Rating

  """関連するタグ"""
  relatedTags(limit: Int!, offset: Int!): [TagNode!]!

  """関連URL"""
  relatedUrl: String

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [ImagePostNode!]!

  """画像生成関連の設定"""
  sampler: String

  """画像生成関連の設定"""
  scale: Int

  """シード値"""
  seed: Float

  """シェア"""
  shareText: String

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """画像生成関連の設定"""
  steps: Int

  """画像生成関連の設定"""
  strength: String

  """テイスト"""
  style: ImageStyle!

  """作品"""
  subPosts: [SubWorkNode!]!

  """複数画像数"""
  subPostsCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!

  """サムネイル画像の位置"""
  thumbnailImagePosition: Float

  """タイトル"""
  title: String!

  """更新日"""
  updatedAt: Int!

  """ユーザ"""
  user: UserNode!

  """ユーザID"""
  userId: ID!

  """VAE"""
  vae: String

  """閲覧数"""
  viewsCount: Int!

  """ウィークリーランキング"""
  weeklyRanking: Int

  """作品投稿時に選択したモデルID"""
  workModelId: Int
}

"""画像のスタイル"""
enum ImageStyle {
  """イラスト"""
  ILLUSTRATION

  """リアル"""
  REAL

  """セミリアル"""
  SEMI_REAL
}

input IncrementPromptonProfileBlockIndexInput {
  profileBlockId: String!
}

"""通知（いいねされた作品）"""
type LikedWorkNotificationNode implements Node {
  """時刻"""
  createdAt: Int!
  id: ID!

  """匿名かどうか"""
  isAnonymous: Boolean!

  """種別"""
  type: String!

  """いいねしたユーザ"""
  user: UserNode
  userId: ID

  """作品"""
  work: WorkNode
  workId: ID
}

"""通知（作品のいいね集計）"""
type LikedWorksSummaryNotificationNode implements Node {
  """時刻"""
  createdAt: Int!
  id: ID!

  """メッセージ"""
  message: String

  """種別"""
  type: String!
}

type LoginResult {
  token: String!
}

input LoginWithPasswordInput {
  login: String!
  password: String!
}

input LoginWithWordPressTokenInput {
  token: String!
}

input MarkPromptonFolderAsPrivateInput {
  folderId: String!
}

input MarkPromptonFolderAsPublicInput {
  folderId: String!
}

input MarkPromptonPlanAsPrivateInput {
  planId: String!
}

input MarkPromptonPlanAsPublicInput {
  planId: String!
}

input MarkPromptonWorkAsPrivateInput {
  workId: String!
}

input MarkPromptonWorkAsPublicInput {
  workId: String!
}

input MarkPromptonWorkAsUserHeaderInput {
  workId: String!
}

"""メッセージ"""
type MessageNode implements Node {
  createdAt: Int!
  id: ID!

  """自身のメッセージである"""
  isMine: Boolean!

  """既読済みである"""
  isRead: Boolean!

  """自身である"""
  isViewer: Boolean! @deprecated(reason: "isMine")

  """メッセージ"""
  text: String

  """送信者"""
  user: UserNode!
}

"""メッセージのスレッド"""
type MessageThreadNode implements Node {
  id: ID!
  latestMessage: MessageNode!
  messages(limit: Int!, offset: Int!): [MessageNode!]!
  recipient: UserNode!
  updatedAt: Int!
}

"""マイルストーン"""
type MilestoneNode implements Node {
  description: String!
  dueDate: String
  id: ID!
  isDone: Boolean!
  pageURL: String!
  title: String!
  version: String!
}

input MilestonesWhereInput {
  repository: String!
}

type Mutation {
  """リクエストを受諾する"""
  acceptPromptonRequest(input: AcceptPromptonRequestInput!): PromptonRequestNode!

  """作品をフォルダに追加する"""
  addPromptonTagToWork(input: AddPromptonTagToWorkInput!): PromptonWorkNode!

  """作品をフォルダに追加する"""
  addPromptonWorkToFolder(input: AddPromptonWorkToFolderInput!): PromptonFolderNode!

  """ユーザをブロックする"""
  blockPromptonUser(input: BlockPromptonUserInput!): PromptonUserNode!

  """予約生成をキャンセルする"""
  cancelImageGenerationReservedTask(input: CancelImageGenerationReservedTaskInput!): ImageGenerationTaskNode!

  """生成をキャンセルする"""
  cancelImageGenerationTask(input: CancelImageGenerationTaskInput!): ImageGenerationTaskNode!

  """リクエストをキャンセルする"""
  cancelPromptonRequest(input: CancelPromptonRequestInput!): PromptonRequestNode!

  """フォルダを有償化にする"""
  changePromptonFolderToPaid(input: ChangePromptonFolderToPaidInput!): PromptonFolderNode!

  """ユーザ設定有無を確認する（初ログインかどうか）"""
  checkUserSetting: Boolean!

  """リクエストを完了とする"""
  closePromptonRequest(input: ClosePromptonRequestInput!): PromptonRequestNode!

  """アカウントを作成する"""
  createAccount(input: CreateAccountInput!): UserNode!

  """シリーズを作成する"""
  createAlbum(input: CreateAlbumInput!): AlbumNode!

  """フォルダに作品を追加する"""
  createAlbumWork(input: CreateAlbumWorkInput!): WorkNode!

  """カスタマーポータルのURLを作成する"""
  createCustomerPortalSession: String!

  """フォルダに作品を追加する"""
  createFolder(input: CreateFolderInput!): FolderNode!

  """フォルダに作品を追加する"""
  createFolderWork(input: CreateFolderWorkInput!): WorkNode!

  """画像生成のメモを作成する"""
  createImageGenerationMemo(input: CreateImageGenerationMemoInput!): ImageGenerationMemoNode!

  """画像生成のタスクを作成する"""
  createImageGenerationTask(input: CreateImageGenerationTaskInput!): ImageGenerationTaskNode!

  """メッセージを作成する"""
  createMessage(input: CreateMessageInput!): MessageNode!

  """コラムを作成する"""
  createNote(input: CreateNoteInput!): NoteNode!

  """小説を作成する"""
  createNovel(input: CreateNovelInput!): NovelNode!

  """パスのチェックアウトのURLを作成する"""
  createPassCheckoutSession(input: CreatePassCheckoutSessionInput): String!

  """支援リクエストを作成する"""
  createPromptonAipicRequest(input: CreatePromptonAipicRequestInput!): PromptonRequestNode!

  """コーヒーリクエストを作成する"""
  createPromptonCoffeeRequest(input: CreatePromptonCoffeeRequestInput!): PromptonRequestNode!

  """納品物を作成する"""
  createPromptonDeliverable(input: CreatePromptonDeliverableInput!): PromptonWorkNode!

  """ファイルを作成する"""
  createPromptonFile(input: CreatePromptonFileInput!): PromptonFileNode!

  """フォルダを作成する"""
  createPromptonFolder(input: CreatePromptonFolderInput!): PromptonFolderNode!

  """フォルダの鍵を作成する"""
  createPromptonFolderKey(input: CreatePromptonFolderKeyInput!): PromptonFolderKeyNode!

  """お問い合わせを作成する"""
  createPromptonInquiry(input: CreatePromptonInquiryInput!): Boolean

  """決済方法を登録する"""
  createPromptonPaymentMethod(input: CreatePromptonPaymentMethodInput!): CreatePromptonPaymentMethodResult

  """プランを作成する"""
  createPromptonPlan(input: CreatePromptonPlanInput!): PromptonPlanNode!

  """プランリクエストを作成する"""
  createPromptonPlanRequest(input: CreatePromptonPlanRequestInput!): PromptonRequestNode!

  """ユーザのプロフィールを作成する"""
  createPromptonProfileBlock(input: CreatePromptonProfileBlockInput!): PromptonUserNode!

  """プロンプトを作成する"""
  createPromptonPrompt(input: CreatePromptonPromptInput!): PromptonPromptNode!

  """プロンプトの作品を追加する"""
  createPromptonPromptWork(input: CreatePromptonPromptWorkInput!): PromptonPromptNode!

  """ユーザを作成する"""
  createPromptonUser(input: CreatePromptonUserInput!): Boolean

  """Aipictorsのトークンからユーザを作成する"""
  createPromptonUserFromToken(input: CreatePromptonUserFromTokenInput!): Boolean

  """作品を作成する"""
  createPromptonWork(input: CreatePromptonWorkInput!): PromptonWorkNode!

  """作品のスキを作成する"""
  createPromptonWorkLike(input: CreatePromptonWorkLikeInput!): PromptonWorkNode!

  """推薦作品を作成する"""
  createRecommendedWork(input: CreateRecommendedWorkInput!): WorkNode!

  """予約画像生成のタスクを作成する"""
  createReservedImageGenerationTask(input: CreateReservedImageGenerationTaskInput!): ImageGenerationReservedTaskNode!

  """リプライのコメントを作成する"""
  createResponseComment(input: CreateResponseCommentInput!): CommentNode!

  """スタンプを作成する"""
  createSticker(input: CreateStickerInput!): StickerNode!

  """ユーザ情報が存在するかチェックして存在しない場合は作成する"""
  createUserInfo: UserNode!

  """ユーザのプロフィールを作成する"""
  createUserProfile(input: CreateUserProfileInput!): UserNode!

  """マイスタンプを追加する"""
  createUserSticker(input: CreateUserStickerInput!): StickerNode!

  """作品を作成する"""
  createWork(input: CreateWorkInput!): WorkNode!

  """作品のコメントを作成する"""
  createWorkComment(input: CreateWorkCommentInput!): CommentNode!

  """作品のスキを作成する"""
  createWorkLike(input: CreateWorkLikeInput!): WorkNode!

  """ユーザのプロフィールのインデックスを更新する"""
  decrementPromptonProfileBlockIndex(input: DecrementPromptonProfileBlockIndexInput!): PromptonUserNode!

  """シリーズを削除する"""
  deleteAlbum(input: DeleteAlbumInput!): AlbumNode!

  """シリーズから作品を削除する"""
  deleteAlbumWork(input: DeleteAlbumWorkInput!): WorkNode!

  """作品のコメントを削除する"""
  deleteComment(input: DeleteCommentInput!): CommentNode!

  """シリーズを削除する"""
  deleteFolder(input: DeleteFolderInput!): FolderNode!

  """フォルダから作品を削除する"""
  deleteFolderWork(input: DeleteFolderWorkInput!): FolderNode

  """生成メモを削除する"""
  deleteImageGenerationMemo(input: DeleteImageGenerationMemoInput!): ImageGenerationMemoNode!

  """生成履歴を削除する"""
  deleteImageGenerationResult(input: DeleteImageGenerationResultInput!): ImageGenerationResultNode!

  """メッセージを削除する"""
  deleteMessage(input: DeleteMessageInput!): MessageNode!

  """コラムを削除する"""
  deleteNote(input: DeleteNoteInput!): NoteNode!

  """小説を削除する"""
  deleteNovel(input: DeleteNovelInput!): NovelNode!

  """フォルダを削除する"""
  deletePromptonFolder(input: DeletePromptonFolderInput!): PromptonFolderNode!

  """インテグレーション（LINE）を削除する"""
  deletePromptonIntegration(input: DeletePromptonIntegrationInput!): Viewer!

  """決済方法を削除する"""
  deletePromptonPaymentMethod: Boolean

  """プランを削除する"""
  deletePromptonPlan(input: DeletePromptonPlanInput!): PromptonPlanNode!

  """ユーザのプロフィールのインデックスを更新する"""
  deletePromptonProfileBlock(input: DeletePromptonProfileBlockInput!): PromptonUserNode!

  """プロンプトを削除する"""
  deletePromptonPrompt(input: DeletePromptonPromptInput!): PromptonPromptNode!

  """作品を削除する"""
  deletePromptonWork(input: DeletePromptonWorkInput!): PromptonWorkNode!

  """作品のスキを削除する"""
  deletePromptonWorkLike(input: DeletePromptonWorkLikeInput!): PromptonWorkNode!

  """推薦作品を削除する"""
  deleteRecommendedWork(input: DeleteRecommendedWorkInput!): Boolean!

  """予約生成履歴を削除する"""
  deleteReservedImageGenerationTasks: [ImageGenerationReservedTaskNode]!

  """スタンプを削除する"""
  deleteSticker(input: DeleteStickerInput!): StickerNode!

  """ユーザースタンプを削除する"""
  deleteUserSticker(input: DeleteUserStickerInput!): StickerNode!

  """作品を削除する"""
  deleteWork(input: DeleteWorkInput!): WorkNode!

  """作品のスキを削除する"""
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode!

  """リクエストのチャットを有効化する"""
  enablePromptonRequestChat(input: EnablePromptonRequestChatInput!): PromptonRequestNode!

  """ユーザのプロフィールのインデックスを更新する"""
  flipPromptonFolderWorkIndex(input: FlipPromptonFolderWorkIndexInput!): [PromptonWorkNode!]!

  """ユーザをフォローする"""
  followPromptonUser(input: FollowPromptonUserInput!): PromptonUserNode

  """タグをフォローする"""
  followTag(input: FollowTagInput!): Boolean!

  """ユーザをフォローする"""
  followUser(input: FollowUserInput!): UserNode!

  """ユーザのプロフィールのインデックスを更新する"""
  incrementPromptonProfileBlockIndex(input: IncrementPromptonProfileBlockIndexInput!): PromptonUserNode!

  """パスワードでログインする"""
  loginWithPassword(input: LoginWithPasswordInput!): LoginResult!

  """WordPressのトークンでログインする"""
  loginWithWordPressToken(input: LoginWithWordPressTokenInput!): LoginResult!

  """フォルダを非公開にする"""
  markPromptonFolderAsPrivate(input: MarkPromptonFolderAsPrivateInput!): PromptonFolderNode!

  """フォルダを公開する"""
  markPromptonFolderAsPublic(input: MarkPromptonFolderAsPublicInput!): PromptonFolderNode!

  """プランを非公開にする"""
  markPromptonPlanAsPrivate(input: MarkPromptonPlanAsPrivateInput!): PromptonPlanNode!

  """プランを公開する"""
  markPromptonPlanAsPublic(input: MarkPromptonPlanAsPublicInput!): PromptonPlanNode!

  """作品を非公開にする"""
  markPromptonWorkAsPrivate(input: MarkPromptonWorkAsPrivateInput!): PromptonWorkNode!

  """作品を公開にする"""
  markPromptonWorkAsPublic(input: MarkPromptonWorkAsPublicInput!): PromptonWorkNode!

  """作品をユーザのヘッダーに設定する"""
  markPromptonWorkAsUserHeader(input: MarkPromptonWorkAsUserHeaderInput!): PromptonUserNode

  """タグをミュートする"""
  muteTag(input: MuteTagInput!): MutedTagNode

  """ユーザをミュートする"""
  muteUser(input: MuteUserInput!): UserNode!

  """作品をピン留めする"""
  pinPromptonWork(input: PinPromptonWorkInput!): PromptonWorkNode!

  """リクエストを拒否する"""
  rejectPromptonRequest(input: RejectPromptonRequestInput!): PromptonRequestNode!

  """作品をフォルダから削除する"""
  removePromptonTagFromWork(input: RemovePromptonTagFromWorkInput!): PromptonWorkNode!

  """作品をフォルダから削除する"""
  removePromptonWorkFromFolder(input: RemovePromptonWorkFromFolderInput!): PromptonFolderNode!

  """シリーズを報告する"""
  reportAlbum(input: ReportAlbumInput!): Boolean

  """コメントを報告する"""
  reportComment(input: ReportCommentInput!): Boolean

  """フォルダを報告する"""
  reportFolder(input: ReportFolderInput!): Boolean

  """スタンプを報告する"""
  reportSticker(input: ReportStickerInput!): Boolean

  """ユーザを報告する"""
  reportUser(input: ReportUserInput!): Boolean

  """作品を報告する"""
  reportWork(input: ReportWorkInput!): Boolean

  """チャットのメッセージを送信する"""
  sendPromptonChatMessage(input: CreatePromptonChatMessageInput!): [PromptonMessageNode!]!

  """メッセージを送信する"""
  sendPromptonMessage(input: SendPromptonMessageInput!): [PromptonMessageNode!]!

  """メッセージを送信する"""
  sendPromptonRequestMessage(input: SendPromptonRequestMessageInput!): [PromptonMessageNode!]!

  """ユーザのフォローを解除する"""
  signImageGenerationTerms(input: SignImageGenerationTermsInput!): UserNode!

  """テスト通知を送信する"""
  testPromptonIntegration(input: TestPromptonIntegrationInput!): Boolean

  """ユーザのフォローは解除する"""
  unfollowPromptonUser(input: UnfollowPromptonUserInput!): PromptonUserNode

  """タグをフォロー解除する"""
  unfollowTag(input: UnfollowTagInput!): Boolean!

  """ユーザのフォローを解除する"""
  unfollowUser(input: UnfollowUserInput!): UserNode!

  """タグのミュートを解除する"""
  unmuteTag(input: UnmuteTagInput!): TagNode!

  """ユーザのミュートを解除する"""
  unmuteUser(input: UnmuteUserInput!): UserNode!

  """作品のピン留めを解除する"""
  unpinPromptonWork(input: UnpinPromptonWorkInput!): PromptonWorkNode!

  """フォルダのウォッチを解除する"""
  unwatchFolder(input: UnwatchFolderInput!): UserNode!

  """アカウントのFCMトークンを変更する"""
  updateAccountFcmToken(input: UpdateAccountFcmTokenInput!): UserNode!

  """アカウントのログインIDを作成する"""
  updateAccountLogin(input: UpdateAccountLoginInput!): UserNode!

  """アカウントのパスワードを変更する"""
  updateAccountPassword(input: UpdateAccountPasswordInput!): UserNode!

  """アカウントのWebFCMトークンを変更する"""
  updateAccountWebFcmToken(input: UpdateAccountWebFcmTokenInput!): UserNode!

  """シリーズを更新する"""
  updateAlbum(input: UpdateAlbumInput!): AlbumNode!

  """お気に入りスタンプを更新する"""
  updateBookmarkedSticker(input: UpdateBookmarkedStickerInput!): StickerNode

  """シリーズを更新する"""
  updateFolder(input: UpdateFolderInput!): FolderNode!

  """画像生成のメモを変更する"""
  updateImageGenerationMemo(input: UpdateImageGenerationMemoInput!): ImageGenerationMemoNode!

  """ログイン時間を更新する"""
  updateLoggedInAt(input: CreateUserProfileInput!): Boolean!

  """ノートを更新する"""
  updateNote(input: UpdateNoteInput!): NoteNode!

  """小説を更新する"""
  updateNovel(input: UpdateNovelInput!): NovelNode!

  """フォルダを更新する"""
  updatePromptonFolder(input: UpdatePromptonFolderInput!): PromptonFolderNode!

  """プランを更新する"""
  updatePromptonPlan(input: UpdatePromptonPlanInput!): PromptonPlanNode!

  """プランを順序を上げる"""
  updatePromptonPlanSort(input: UpdatePromptonPlanSortInput!): PromptonPlanNode!

  """ユーザのプロフィールを更新する"""
  updatePromptonProfileBlock(input: UpdatePromptonProfileBlockInput!): PromptonUserNode!

  """プロンプトを更新する"""
  updatePromptonPrompt(input: UpdatePromptonPromptInput!): PromptonPromptNode!

  """ユーザのアイコンを更新する"""
  updatePromptonUserAvatar(input: UpdatePromptonUserAvatarInput!): PromptonUserNode!

  """ユーザのヘッダー画像を更新する"""
  updatePromptonUserHeaderImage(input: UpdatePromptonUserHeaderImageInput!): PromptonUserNode!

  """ユーザのインボイスの登録番号を更新する"""
  updatePromptonUserInvoiceRegistrationNumber(input: UpdatePromptonUserInvoiceRegistrationNumberInput!): PromptonUserNode!

  """ユーザのユーザ名を更新する"""
  updatePromptonUserLogin(input: UpdatePromptonUserLoginInput!): PromptonUserNode!

  """ユーザのプロフィールを更新する"""
  updatePromptonUserProfile(input: UpdatePromptonUserProfileInput!): PromptonUserNode!

  """作品を更新する"""
  updatePromptonWork(input: UpdatePromptonWorkInput!): PromptonWorkNode!

  """画像生成のタスクの保護を変更する"""
  updateProtectedImageGenerationResult(input: UpdateProtectedImageGenerationResultInput!): ImageGenerationResultNode!

  """画像生成のモデルのレーティングを変更する"""
  updateRatingImageGenerationModel(input: UpdateRatingImageGenerationModelInput!): UserSettingNode!

  """画像生成のタスクのレーティングを変更する"""
  updateRatingImageGenerationResult(input: UpdateRatingImageGenerationResultInput!): ImageGenerationResultNode!

  """スタンプを更新する"""
  updateSticker(input: UpdateStickerInput!): StickerNode!

  """ユーザのプロフィールを作成する"""
  updateUserProfile(input: UpdateUserProfileInput!): UserNode!

  """ユーザの設定を更新する"""
  updateUserSetting(input: UpdateUserSettingInput!): UserSettingNode!

  """作品を更新する"""
  updateWork(input: UpdateWorkInput!): WorkNode!

  """作品のタグを更新する"""
  updateWorkTags(input: UpdateWorkTagsInput!): WorkNode!

  """フォルダをウォッチする"""
  watchFolder(input: WatchFolderInput!): FolderNode!
}

"""ミュートタグ"""
type MutedTagNode implements Node {
  id: ID!

  """名前"""
  name: String!
}

input MuteTagInput {
  tagName: String!
}

input MuteUserInput {
  userId: ID!
}

input NewCommentsWhereInput {
  """センシティブである"""
  isSensitive: Boolean

  """年齢種別"""
  ratings: [Rating!]
}

input NewUsersWorksWhereInput {
  """フォロー中のユーザのみ"""
  isFollowing: Boolean

  """フォロー外のユーザのみ"""
  isNotFollowing: Boolean

  """(〜)最新の日付"""
  isNowCreatedAt: Boolean
  isSensitive: Boolean

  """年齢種別"""
  ratings: [Rating!]

  """昇順/降順"""
  sort: Sort

  """スタイル(テイスト)"""
  style: ImageStyle
}

"""ノード"""
interface Node {
  id: ID!
}

"""ノート"""
type NoteNode implements Node {
  createdAt: Int!
  id: ID!
  user: UserNode!
}

"""投稿（ノート）"""
type NotePostNode implements Node {
  """閲覧権限の種類"""
  accessType: AccessType!

  """運営による閲覧権限の種類"""
  adminAccessType: AdminAccessType!

  """シリーズ情報"""
  album: AlbumNode

  """ブックマーク数"""
  bookmarksCount: Int!

  """コメント"""
  comment(id: ID!): CommentNode!

  """コメント"""
  comments(limit: Int!, offset: Int!): [CommentNode!]!

  """コメント数"""
  commentsCount: Int!

  """作成日"""
  createdAt: Int!

  """デイリーランキング"""
  dailyRanking: Int

  """テーマ"""
  dailyTheme: DailyThemeNode

  """説明"""
  description: String

  """説明(英語)"""
  enDescription: String

  """タイトル(英語)"""
  enTitle: String
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")

  """画像の比率"""
  imageAspectRatio: Float!

  """画像の高さ"""
  imageHeight: Int!

  """画像ID"""
  imageId: ID! @deprecated(reason: "廃止")

  """画像URL"""
  imageURL: String!

  """画像の幅"""
  imageWidth: Int!

  """ブックマークしている"""
  isBookmarked: Boolean!

  """コメント編集許可"""
  isCommentsEditable: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """自分自身が推薦しているかどうか"""
  isMyRecommended: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """いいねしたユーザ一覧"""
  likedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """いいね数"""
  likesCount: Int!

  """マークダウンテキスト"""
  markdownText: String

  """マンスリーランキング"""
  monthlyRanking: Int

  """次の作品"""
  nextPost: NotePostNode

  """OGP画像URL"""
  ogpThumbnailImageUrl: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """関連するタグ"""
  previousPost(limit: Int!, offset: Int!): [TagNode!]!

  """前の作品"""
  previousWork: NotePostNode

  """年齢制限"""
  rating: Rating

  """関連URL"""
  relatedUrl: String

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [NotePostNode!]!

  """シェア"""
  shareText: String

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """テイスト"""
  style: ImageStyle!

  """作品"""
  subPosts: [SubWorkNode!]!

  """複数画像数"""
  subPostsCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!

  """サムネイル画像の位置"""
  thumbnailImagePosition: Float

  """タイトル"""
  title: String!

  """更新日"""
  updatedAt: Int!

  """ユーザ"""
  user: UserNode!

  """ユーザID"""
  userId: ID!

  """閲覧数"""
  viewsCount: Int!

  """ウィークリーランキング"""
  weeklyRanking: Int
}

"""通知"""
union NotificationNode = FollowNotificationNode | LikedWorkNotificationNode | LikedWorksSummaryNotificationNode | WorkAwardNotificationNode | WorkCommentNotificationNode | WorkCommentReplyNotificationNode

input NotificationsWhereInput {
  """返信済みではない"""
  isUnsentReply: Boolean
  type: NotificationType
}

"""通知の種類"""
enum NotificationType {
  """コメントの返信"""
  COMMENT_REPLY

  """フォロー"""
  FOLLOW

  """作品のいいね"""
  LIKED_WORK

  """いいねの集計"""
  LIKED_WORKS_SUMMARY

  """作品のランキング結果"""
  WORK_AWARD

  """作品のコメント"""
  WORK_COMMENT
}

"""小説"""
type NovelNode implements Node {
  createdAt: Int!
  id: ID!
  user: UserNode!
}

"""投稿（小説）"""
type NovelPostNode implements Node {
  """閲覧権限の種類"""
  accessType: AccessType!

  """運営による閲覧権限の種類"""
  adminAccessType: AdminAccessType!

  """シリーズ情報"""
  album: AlbumNode

  """ブックマーク数"""
  bookmarksCount: Int!

  """コメント"""
  comment(id: ID!): CommentNode!

  """コメント"""
  comments(limit: Int!, offset: Int!): [CommentNode!]!

  """コメント数"""
  commentsCount: Int!

  """作成日"""
  createdAt: Int!

  """デイリーランキング"""
  dailyRanking: Int

  """テーマ"""
  dailyTheme: DailyThemeNode

  """説明"""
  description: String

  """説明(英語)"""
  enDescription: String

  """タイトル(英語)"""
  enTitle: String
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")

  """画像の比率"""
  imageAspectRatio: Float!

  """画像の高さ"""
  imageHeight: Int!

  """画像ID"""
  imageId: ID! @deprecated(reason: "廃止")

  """画像URL"""
  imageURL: String!

  """画像の幅"""
  imageWidth: Int!

  """ブックマークしている"""
  isBookmarked: Boolean!

  """コメント編集許可"""
  isCommentsEditable: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """自分自身が推薦しているかどうか"""
  isMyRecommended: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """いいねしたユーザ一覧"""
  likedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """いいね数"""
  likesCount: Int!

  """マークダウンテキスト"""
  markdownText: String

  """マンスリーランキング"""
  monthlyRanking: Int

  """次の作品"""
  nextPost: NovelPostNode

  """OGP画像URL"""
  ogpThumbnailImageUrl: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """前の作品"""
  previousPost: NovelPostNode

  """年齢制限"""
  rating: Rating

  """関連するタグ"""
  relatedTags(limit: Int!, offset: Int!): [TagNode!]!

  """関連URL"""
  relatedUrl: String

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [NovelPostNode!]!

  """シェア"""
  shareText: String

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """テイスト"""
  style: ImageStyle!

  """作品"""
  subPosts: [SubWorkNode!]!

  """複数画像数"""
  subPostsCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!

  """サムネイル画像の位置"""
  thumbnailImagePosition: Float

  """タイトル"""
  title: String!

  """更新日"""
  updatedAt: Int!

  """ユーザ"""
  user: UserNode!

  """ユーザID"""
  userId: ID!

  """閲覧数"""
  viewsCount: Int!

  """ウィークリーランキング"""
  weeklyRanking: Int
}

type PassNode implements Node {
  createdAt: Int!
  id: ID!

  """無効である"""
  isDisabled: Boolean!
  isExpired: Boolean!
  payment: PaymentNode
  periodEnd: Int!
  periodStart: Int!
  price: Int!
  trialPeriodEnd: Int
  trialPeriodStart: Int
  type: PassType!
  user: UserNode!
}

"""パスの種類"""
enum PassType {
  """ライト"""
  LITE

  """プレミアム"""
  PREMIUM

  """スタンダード"""
  STANDARD

  """2日プラン"""
  TWO_DAYS
}

"""決済履歴"""
type PaymentNode implements Node {
  amount: Int!
  createdAt: Int!
  id: ID!
  isRefunded: Boolean!
  pass: PassNode
  stripeInvoiceId: String
  stripePaymentIntentId: String
  type: PaymentType!
  user: UserNode!
}

"""サブスク"""
enum PaymentType {
  PASS_LITE
  PASS_PREMIUM
  PASS_STANDARD
}

input PinPromptonWorkInput {
  workId: String!
}

input PopularWorksWhereInput {
  date: String
  isSensitive: Boolean

  """廃止予定"""
  rating: Rating
}

"""作品"""
union PostNode = AnimationPostNode | ImagePostNode | NotePostNode | NovelPostNode

"""投稿の並び順"""
enum PostOrderBy {
  """投稿時刻"""
  CREATION_DATE

  """いいね数"""
  LIKES_COUNT

  """閲覧数"""
  VIEWS_COUNT
}

input PostsWhereInput {
  """公開範囲"""
  accessTypes: [AccessType!]

  """センシティブである"""
  isSensitive: Boolean!

  """ソート"""
  orderBy: PostOrderBy

  """年齢種別"""
  ratings: [Rating!]

  """昇順/降順"""
  sort: Sort

  """スタイル(テイスト)"""
  style: ImageStyle
}

"""年齢制限の設定"""
enum PreferenceRating {
  """全年齢"""
  G

  """全年齢+R15"""
  R15

  """全年齢+R15+R18G+R18"""
  R18

  """全年齢+R15+R18G"""
  R18G
}

"""プロモーション"""
type PromotionNode implements Node {
  description: String!
  endDateTime: Int!
  id: ID!
  imageURL: String
  pageURL: String
  startDateTime: Int!
  title: String!
}

"""プロンプトのカテゴリー"""
type PromptCategoryNode implements Node {
  id: ID!
  name: String!
  prompts: [PromptNode!]!
}

"""プロンプト"""
type PromptNode implements Node {
  id: ID!
  name: String!
  words: [String!]!
}

"""Stripeのアカウント"""
type PromptonAccountNode implements Node {
  chargesEnabled: Boolean!
  detailsSubmitted: Boolean!
  id: ID!
  loginLink: String
  payoutsEnabled: Boolean!
}

"""Stripeの顧客"""
type PromptonCustomerNode implements Node {
  id: ID!
}

"""ファイル"""
type PromptonFileNode implements Node {
  createdAt: Int!
  downloadURL: String

  """大きいサイズの画像URL"""
  headerImageURL: String!
  height: Int
  id: ID!

  """画像URL"""
  imageURL: String!
  name: String!
  path: String!

  """画像URL"""
  rectangleImageURL: String!

  """サムネイルのURL"""
  rectangleThumbnailImageURL: String!

  """サムネイルの正方形の画像URL"""
  squareThumbnailImageURL: String!

  """サムネイルのURL"""
  thumbnailImageURL: String!
  type: String!
  width: Int
}

type PromptonFolderKeyNode implements Node {
  createdAt: Int!
  folder: PromptonFolderNode!
  folderId: ID!
  id: ID!
  payments: [PromptonPaymentNode!]!
  user: PromptonUserNode!
  userId: ID!
}

"""フォルダ"""
type PromptonFolderNode implements Node {
  """色"""
  color: String

  """作成日"""
  createdAt: Int!

  """説明"""
  description: String

  """商用利用"""
  featureCommercialUse: Boolean
  id: ID!

  """画像ファイル"""
  imageFile: PromptonFileNode!

  """画像ファイルのID"""
  imageFileId: ID

  """削除済み"""
  isDeleted: Boolean!

  """NSFW"""
  isNSFW: Boolean!

  """有償"""
  isPaid: Boolean!

  """公開されているかどうか"""
  isPublic: Boolean!

  """表示形式"""
  mode: FolderMode!

  """名前"""
  name: String!

  """NSFW理由"""
  nsfwReason: String

  """プラン"""
  plans: [PromptonPlanNode!]!

  """値段"""
  price: Int!

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!

  """作成日"""
  updatedAt: Int!

  """ユーザ"""
  user: PromptonUserNode!

  """ユーザID"""
  userId: ID!

  """ログインユーザ"""
  viewer: PromptonFolderViewerNode

  """フォルダの鍵のID"""
  viewerFolderId: ID!

  """フォルダの鍵"""
  viewerFolderKey: PromptonFolderKeyNode

  """作品"""
  works(limit: Int!, offset: Int!): [PromptonWorkNode!]

  """作品数"""
  worksCount: Int!
}

input PromptonFoldersWhereInput {
  isPaid: Boolean
  search: String
  userId: String
}

type PromptonFolderViewerNode implements Node {
  folderId: ID!
  folderKey: PromptonFolderKeyNode
  id: ID!
}

"""ユーザの関係"""
type PromptonFriendshipNode implements Node {
  createdAt: Int!
  followee: PromptonUserNode
  followeeId: ID!
  follower: PromptonUserNode
  followerId: ID!
  id: ID!
  status: String!
}

type PromptonIntegrationNode implements Node {
  applicationId: ID!
  createdAt: Int!
  id: ID!
  user: PromptonUserNode
  userId: ID!
}

"""ラベル"""
type PromptonLabelNode implements Node {
  count: Int!
  firstWork: PromptonWorkNode
  id: ID!
  name: String!
  nameJA: String!
  works(limit: Int!, offset: Int!): [PromptonWorkNode!]
}

input PromptonLabelsWhereInput {
  search: String
}

"""メッセージ"""
type PromptonMessageNode implements Node {
  createdAt: Int!
  id: ID!
  isDeleted: Boolean!
  isMine: Boolean!
  isRead: Boolean!
  recipient: PromptonUserNode
  recipientId: ID
  role: String!
  sender: PromptonUserNode
  senderId: ID
  text: String!
  type: String!
}

"""メッセージのスレッド"""
type PromptonMessageThreadNode implements Node {
  id: ID!
  latestMessage: PromptonMessageNode!
  messages(limit: Int!, offset: Int!): [PromptonMessageNode!]!
  recipient: PromptonUserNode!
  request: PromptonRequestNode
  updatedAt: Int!
}

"""決済履歴"""
type PromptonPaymentIntentNode implements Node {
  id: ID!
}

type PromptonPaymentMethodNode implements Node {
  cardBrand: String!
  cardExpMonth: String!
  cardExpYear: String!
  cardFunding: String!
  cardLast4: String!
  id: ID!
  isLiveMode: Boolean!
  type: String!
}

"""決済"""
type PromptonPaymentNode implements Node {
  amount: Int!
  createdAt: Int!
  id: ID!
  isError: Boolean!
  purpose: String!
  purposeText: String!
  request: PromptonRequestNode
  transactionId: String
  user: PromptonUserNode!
}

"""出金履歴"""
type PromptonPayoutNode implements Node {
  id: ID!
}

"""プラン"""
type PromptonPlanNode implements Node {
  category: String!
  categoryDescription: String!
  categoryText: String!
  createdAt: Int!
  description: String!
  featureCommercialUse: Boolean!
  featureCopyrightFree: Boolean!
  featureFanFiction: Boolean!
  featurePrivate: Boolean!
  folders: [PromptonFolderNode!]!
  id: ID!

  """画像ファイル"""
  imageFile: PromptonFileNode

  """画像ファイルのID"""
  imageFileId: ID
  isActive: Boolean!
  isDeleted: Boolean!
  isFlexible: Boolean!
  isPublic: Boolean!
  maximumFee: Int!
  maximumQuantity: Int!
  message: String
  minimumFee: Int!
  minimumQuantity: Int!
  name: String!
  objectSlugs: [PromptonSlug!]!
  requests: [PromptonRequestNode!]
  requestsCount: Int!
  sort: Int!
  styleSlugs: [PromptonSlug!]!
  unitPrice: Int!
  updatedAt: Int!
  user: PromptonUserNode
  userId: ID!
}

input PromptonPlansWhereInput {
  category: String
  isPaid: Boolean
  isUnique: Boolean
  objectSlugs: [String!]
  search: String
  styleSlugs: [String!]
}

type PromptonProfileBlockNode implements Node {
  description: String
  id: ID!
  imageURL: String
  index: Int!
  siteURL: String
  title: String
  type: String!
  userId: ID!
}

"""プロンプト"""
type PromptonPromptNode implements Node {
  createdAt: Int!
  description: String
  firstWork: PromptonWorkNode
  id: ID!
  isBase: Boolean!
  isDeleted: Boolean!
  isNsfw: Boolean!
  isPublic: Boolean!
  isSingle: Boolean!
  likesCount: Int!
  secondWork: PromptonWorkNode
  text: String!
  texts: [String!]
  title: String
  titleJA: String
  updatedAt: Int!
  user: PromptonUserNode
  works: [PromptonWorkNode!]!
}

"""リクエスト"""
type PromptonRequestNode implements Node {
  """手数料"""
  commission: Int!
  createdAt: Int!

  """納品物"""
  deliverables: [PromptonWorkNode!]!
  featureChat: Boolean!
  featureCommercialUse: Boolean!
  featureCopyrightFree: Boolean!
  featureFanFiction: Boolean!
  featurePrivate: Boolean!
  fee: Int!
  files: [PromptonFileNode!]!
  firstDeliverable: PromptonWorkNode
  folder: PromptonFolderNode
  hasSignature: Boolean!
  id: ID!
  isAccepted: Boolean!
  isAipic: Boolean!
  isCanceled: Boolean!
  isCanceledByRecipient: Boolean!
  isCanceledBySender: Boolean!
  isCoffee: Boolean!
  isCompleted: Boolean!

  """取り込み中"""
  isInProgress: Boolean!
  isPending: Boolean!

  """公開されているかどうか"""
  isPublic: Boolean!
  isRejected: Boolean!
  isTimeout: Boolean!

  """最後のメッセージ"""
  lastMessage: PromptonMessageNode

  """メッセージ"""
  messages(limit: Int!, offset: Int!): [PromptonMessageNode!]!
  note: String!
  noteTruncated: String!

  """関連する決済"""
  payments: [PromptonPaymentNode!]!
  plan: PromptonPlanNode
  planDescription: String
  planFeatureChat: Boolean
  planFeatureCommercialUse: Boolean
  planFeatureCopyrightFree: Boolean
  planFeatureFanFiction: Boolean
  planFeaturePrivate: Boolean
  planId: String
  planName: String
  planUnitPrice: Int
  quantity: Int!

  """受け取ったユーザ"""
  recipient: PromptonUserNode!
  recipientId: ID!

  """送ったユーザ"""
  sender: PromptonUserNode!
  senderId: ID!
  signature: String
  status: PromptonRequestStatus!
  unitPrice: Int!
}

"""状況"""
enum PromptonRequestStatus {
  """キャンセル"""
  CANCELED

  """完了"""
  COMPLETED

  """取組中"""
  IN_PROGRESS

  """拒否"""
  REJECTED

  """時間切れ"""
  TIMEOUT
}

type PromptonSlug {
  name: String!
  value: String!
}

type PromptonTagNode implements Node {
  firstWork: PromptonWorkNode
  folders: [PromptonFolderNode!]!
  foldersCount: Int!
  id: ID!
  name: String!
  nameJA: String!
  slug: String
  updatedAt: Int!
  users: [PromptonUserNode!]!
  usersCount: Int!
  works(limit: Int!, offset: Int!): [PromptonWorkNode!]!
  worksCount: Int!
}

input PromptonTagsWhereInput {
  isPinned: Boolean
  search: String
}

"""ユーザ"""
type PromptonUserNode implements Node {
  """承認済みのリクエスト"""
  acceptedRequests: [PromptonRequestNode!]!

  """依頼された数"""
  acceptedRequestsCount: Int!

  """ユーザー"""
  aipicsUser: UserNode

  """アイコンのファイル"""
  avatarImageFile: PromptonFileNode

  """アイコンのID"""
  avatarImageId: String

  """アイコンの画像URL"""
  avatarImageURL: String

  """自己紹介"""
  biography: String!
  deviantartURL: String

  """ユーザ名"""
  deviantartUsername: String

  """フォルダ"""
  firstFolder: PromptonFolderNode

  """作品"""
  firstWork: PromptonWorkNode

  """フォルダ"""
  folders(limit: Int!, offset: Int!): [PromptonFolderNode!]!

  """フォローしている数"""
  followeesCount: Int

  """フォローされている数"""
  followersCount: Int

  """関係"""
  friendships: [PromptonFriendshipNode!]!
  githubURL: String

  """ユーザ名"""
  githubUsername: String
  hasProfileURL: Boolean!

  """マイページのヘッダー画像のファイル"""
  headerImageFile: PromptonFileNode!
  headerImageFileId: String
  id: ID!
  instagramURL: String

  """ユーザ名"""
  instagramUsername: String

  """ログインしているユーザをブロックされているかどうか"""
  isBlocked: Boolean!

  """削除済みかどうか"""
  isDeleted: Boolean!

  """ログインしているユーザをフォローしているかどうか"""
  isFollowee: Boolean!

  """ログインしているユーザにフォローされているかどうか"""
  isFollower: Boolean!

  """制作依頼を受け付けているかどうか"""
  isRequestable: Boolean!

  """リクエストされた作品"""
  latestRequestedWork: PromptonWorkNode

  """最新の作品"""
  latestWork: PromptonWorkNode

  """ログイン名（英数字のみ）"""
  login: String!

  """メッセージ"""
  message: String!

  """名前（日本語の使用が可能）"""
  name: String!
  pixivURL: String

  """ユーザ名"""
  pixivUsername: String

  """プラン"""
  plans: [PromptonPlanNode!]!

  """プロフィール"""
  profileBlocks: [PromptonProfileBlockNode!]!

  """対応中のリクエスト数"""
  queueRequestsCount: Int!

  """リクエスト作品"""
  requestWorks(limit: Int!, offset: Int!): [PromptonWorkNode!]!

  """リクエストされた作品"""
  requestedWorks: [PromptonWorkNode!]!

  """依頼した数"""
  requestsCount: Int!
  siteDescription: String
  siteImageURL: String
  siteTitle: String

  """サイトURL"""
  siteURL: String

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!
  tumblrURL: String

  """ユーザ名"""
  tumblrUsername: String
  twitterURL: String

  """ユーザ名"""
  twitterUsername: String
  updatedAt: Int!

  """関連する作品"""
  works(limit: Int!, offset: Int!, where: PromptonUserWorksWhereInput): [PromptonWorkNode!]!

  """作品の数"""
  worksCount: Int!
}

input PromptonUsersWhereInput {
  search: String
}

input PromptonUserWorksWhereInput {
  isUncategorized: Boolean
}

"""作品"""
type PromptonWorkNode implements Node {
  """セーフサーチ・アダルト関連の内容である可能性"""
  annotationAdult: String

  """セーフサーチ・医療関連の内容である可能性"""
  annotationMedical: String

  """セーフサーチ・性的な内容である可能性"""
  annotationRacy: String

  """セーフサーチ・悪ふざけの内容である可能性"""
  annotationSpoof: String

  """セーフサーチ・暴力的な内容である可能性"""
  annotationViolence: String

  """説明"""
  body: String

  """関連する色"""
  colors: [String!]!
  createdAt: Int!

  """検出されたプロンプト"""
  detectedPrompt: String

  """検出されたシード値"""
  detectedSeed: String

  """検出されたソフトウェア"""
  detectedSoftware: String

  """ファイルのID"""
  file: PromptonFileNode!

  """ファイルのID"""
  fileId: String
  folderIndex: Int!
  homeIndex: Int!
  id: ID!

  """プロンプト"""
  inputtedPrompt: String

  """ログインしているユーザが作品に対してブックマーク済みかどうか"""
  isBookmarked: Boolean!

  """著作権を譲渡しているかどうか"""
  isCopyrightFreeRequest: Boolean!

  """削除されているかどうか"""
  isDeleted: Boolean!

  """ログインしているユーザが作品に対していいね済みかどうか"""
  isLiked: Boolean!

  """自分の作品かどうか"""
  isMine: Boolean!

  """NSFW作品かどうか"""
  isNSFW: Boolean!

  """ピン留めされているかどうか"""
  isPinned: Boolean!

  """プライベートリクエストかどうか"""
  isPrivateRequest: Boolean!

  """公開されているかどうか"""
  isPublic: Boolean!

  """リクエスト作品かどうか"""
  isRequest: Boolean!

  """関連するラベル"""
  labels: [PromptonLabelNode!]!

  """いいね数"""
  likesCount: Int!

  """NSFW理由"""
  nsfwReason: String

  """ファイルのID"""
  rectangleImageFile: PromptonFileNode

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [PromptonWorkNode!]!

  """関連するリクエスト"""
  request: PromptonRequestNode

  """プロンプト"""
  runtimePrompt: String

  """シード値"""
  seed: String

  """ソフトウェア"""
  software: String

  """関連するタグ"""
  tags: [PromptonTagNode!]!
  tagsCount: Int!

  """タイトル"""
  title: String
  updatedAt: Int!

  """ユーザ"""
  user: PromptonUserNode!

  """閲覧数"""
  viewsCount: Int!

  """関連するWebカラー"""
  webColors: [String!]!
}

input PromptonWorksWhereInput {
  color: String
  search: String
  tagSlugs: [String!]
}

type Query {
  """モデル"""
  aiModel(where: AiModelWhereInput!): AiModelNode

  """モデル"""
  aiModels(limit: Int!, offset: Int!, where: AiModelWhereInput): [AiModelNode!]

  """シリーズ"""
  album(id: ID!): AlbumNode

  """シリーズ"""
  albums(limit: Int!, offset: Int!, where: AlbumsWhereInput): [AlbumNode!]

  """シリーズ数"""
  albumsCount(where: AlbumsWhereInput): Int!

  """運営からのお知らせ"""
  announcements(limit: Int!, offset: Int!): [AnnouncementNode!]!

  """イベント"""
  appEvent(slug: String): AppEventNode

  """イベント一覧"""
  appEvents(limit: Int!, offset: Int!, where: AppEventsWhereInput): [AppEventNode!]!

  """
  全期間の人気作品
  ※キャッシュ不可
  """
  bestWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """カテゴリ"""
  categories: [CategoryNode!]!

  """カテゴリ"""
  category(id: ID!): CategoryNode!

  """コメント"""
  comments(limit: Int!, offset: Int!, orderBy: CommentsOrderBy!, where: CommentsWhereInput!): [CommentNode!]!

  """ControlNetテンプレート一覧"""
  controlNetCategories: [ControlNetCategoryNode!]!

  """日別テーマ"""
  dailyTheme(day: Int, id: ID, month: Int, year: Int): DailyThemeNode

  """日別テーマ"""
  dailyThemes(limit: Int!, offset: Int!, where: DailyThemesWhereInput): [DailyThemeNode!]!

  """指定したユーザが支援リクエストを許可しているかどうか"""
  featurePromptonRequest(where: FeaturePromptonRequestWhereInput!): Boolean

  """フィード"""
  feed(userId: ID!): FeedNode

  """フォルダ"""
  folder(id: ID, where: FolderWhereInput): FolderNode

  """フォルダ"""
  folders(limit: Int!, offset: Int!, where: FoldersWhereInput): [FolderNode!]

  """フォルダ数"""
  foldersCount(where: FoldersWhereInput): Int

  """フォロワー"""
  followers(limit: Int!, offset: Int!, where: FollowersWhereInput!): [UserNode!]!

  """フォロー中ユーザ"""
  followingUsers(limit: Int!, offset: Int!, where: FollowingUsersWhereInput!): [UserNode!]!

  """ホームのタグ"""
  homeTags: [TagNode!]!

  """トレンドのセンシティブタグ"""
  hotSensitiveTags: [TagNode!]!

  """トレンドのタグ"""
  hotTags: [TagNode!]!

  """
  1日以内の人気の作品
  ※キャッシュ不可
  """
  hotWorks(where: HotWorksWhereInput): [WorkNode!]!

  """画像生成のタスク状況"""
  imageGenerationEngineStatus: ImageGenerationEngineStatus!

  """画像生成メモ"""
  imageGenerationMemo(id: ID!): ImageGenerationMemoNode!

  """画像生成メモ一覧"""
  imageGenerationMemos(limit: Int!, offset: Int!, orderBy: ImageGenerationMemoOrderBy): [ImageGenerationMemoNode]!

  """予約画像生成履歴"""
  imageGenerationReservedTask(id: ID!): ImageGenerationTaskNode!

  """画像生成履歴"""
  imageGenerationResult(id: ID!): ImageGenerationResultNode!

  """画像生成履歴"""
  imageGenerationTask(id: ID!): ImageGenerationTaskNode!

  """画像生成サービス"""
  imageGenerators: [ImageGeneratorNode!]!

  """画像生成モデル"""
  imageLoraModel(id: ID!): ImageLoraModelNode!

  """画像生成モデル"""
  imageLoraModels: [ImageLoraModelNode!]!

  """画像生成モデル"""
  imageModel(where: ImageModelWhereInput): ImageModelNode!

  """画像生成モデル"""
  imageModels: [ImageModelNode!]!

  """マイルストーン"""
  milestones(where: MilestonesWhereInput!): [MilestoneNode!]!

  """画像生成ネガティブキーワード"""
  negativePromptCategories: [PromptCategoryNode!]!

  """新規コメント"""
  newComments(limit: Int!, offset: Int!, where: NewCommentsWhereInput): [CommentNode!]!

  """新規投稿ユーザ"""
  newPostedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """
  新しいユーザの初投稿作品一覧
  ※キャッシュ不可
  """
  newUserWorks(limit: Int!, offset: Int!, where: NewUsersWorksWhereInput): [WorkNode!]!

  """
  全期間の人気作品
  ※キャッシュ不可
  """
  popularWorks(where: PopularWorksWhereInput!): [WorkNode!]!

  """投稿"""
  posts(limit: Int!, offset: Int!, where: PostsWhereInput!): [PostNode!]!

  """プロモーション"""
  promotion(id: ID!): PromotionNode

  """プロモーション"""
  promotions(limit: Int!, offset: Int!): [PromotionNode!]!

  """画像生成キーワード"""
  promptCategories: [PromptCategoryNode!]!
  promptonFolder(id: ID!): PromptonFolderNode
  promptonFolders(limit: Int!, offset: Int!, where: PromptonFoldersWhereInput): [PromptonFolderNode!]!
  promptonLabel(id: ID, name: String): PromptonLabelNode
  promptonLabels(limit: Int!, offset: Int!, where: PromptonLabelsWhereInput): [PromptonLabelNode!]!

  """メッセージのスレッド"""
  promptonMessageThread(threadId: ID!): PromptonMessageThreadNode
  promptonPlan(id: ID!): PromptonPlanNode
  promptonPlans(limit: Int!, offset: Int!, where: PromptonPlansWhereInput): [PromptonPlanNode!]!
  promptonRequest(id: ID!): PromptonRequestNode
  promptonTag(id: ID, slug: String): PromptonTagNode
  promptonTags(limit: Int!, offset: Int!, where: PromptonTagsWhereInput): [PromptonTagNode!]!
  promptonUser(id: ID!): PromptonUserNode
  promptonUsers(limit: Int!, offset: Int!, where: PromptonUsersWhereInput): [PromptonUserNode!]!
  promptonWork(id: ID!): PromptonWorkNode
  promptonWorks(limit: Int!, offset: Int!, where: PromptonWorksWhereInput): [PromptonWorkNode!]!

  """推奨タグ一覧（ログインユーザ関係なく）"""
  recommendedTags(limit: Int!, where: RecommendedTagsWhereInput!): [RecommendedTagNode!]!

  """プロンプトに基づいた推奨タグ"""
  recommendedTagsFromPrompts(prompts: String!): [TagNode!]!

  """おすすめユーザ"""
  recommendedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """支援リクエスト"""
  requests(limit: Int!, offset: Int!, where: RequestsWhereInput!): [PromptonRequestNode!]!

  """スタンプ"""
  sticker(id: ID!): StickerNode

  """スタンプ"""
  stickers(limit: Int!, offset: Int!, where: StickersWhereInput): [StickerNode!]!

  """スタンプ総数"""
  stickersCount(where: StickersWhereInput): Int!

  """タグ"""
  tag(name: String!): TagNode

  """全てのタグ"""
  tags(limit: Int!, offset: Int!, where: TagsWhereInput): [TagNode!]!

  """ユーザ"""
  user(id: ID!): UserNode

  """ユーザのシリーズ"""
  userAlbum(where: UserAlbumWhereInput): AlbumNode

  """ユーザ設定"""
  userSetting: UserSettingNode

  """ユーザ"""
  users(limit: Int!, offset: Int!, where: UsersWhereInput): [UserNode!]!

  """ログイン中のユーザ"""
  viewer: Viewer

  """ホワイトリスト用のタグ"""
  whiteListTags(where: WhiteListTagsInput): [TagNode!]!

  """作品"""
  work(id: ID!, isUpdateHistory: Boolean): WorkNode

  """
  ランキング履歴
  ※キャッシュ不可
  """
  workAwards(limit: Int!, offset: Int!, where: WorkAwardsWhereInput!): [WorkAwardNode!]!

  """
  作品
  ※キャッシュ不可
  """
  works(limit: Int!, offset: Int!, where: WorksWhereInput): [WorkNode!]!

  """
  作品数
  ※キャッシュ不可
  """
  worksCount(where: WorksWhereInput): Int!
}

"""年齢制限"""
enum Rating {
  """全年齢"""
  G

  """R15"""
  R15

  """R18"""
  R18

  """R18+"""
  R18G
}

"""推奨タグ"""
type RecommendedTagNode {
  tagName: String!
  thumbnailUrl: String!
}

input RecommendedTagsWhereInput {
  isSensitive: Boolean
}

input RejectPromptonRequestInput {
  requestId: String!
}

input RemovePromptonTagFromWorkInput {
  tagId: String!
  workId: String!
}

input RemovePromptonWorkFromFolderInput {
  folderId: String!
  workId: String!
}

input ReportAlbumInput {
  albumId: ID!
  reason: ReportReason!
}

input ReportCommentInput {
  commentId: ID!
  reason: ReportReason!
}

input ReportFolderInput {
  folderId: ID!
  reason: ReportReason!
}

"""報告理由"""
enum ReportReason {
  """対象年齢が異なる（過度な性的表現など）"""
  AGE_MISMATCH

  """実写に見える作品で、児童ポルノと認定される恐れのある内容が含まれている"""
  CHILD_PORNOGRAPHY

  """商業用の広告や宣伝、勧誘を目的とする情報が含まれている"""
  COMMERCIAL_CONTENT

  """過度なグロテスク表現が含まれている"""
  EXCESSIVE_GORE

  """サイトで禁止されているコンテンツへの誘導が含まれている"""
  ILLEGAL_CONTENT

  """必要なモザイク加工がされていない"""
  NO_MOSAIC

  """その他"""
  OTHER

  """プライバシーまたは肖像権を侵害している"""
  PRIVACY_VIOLATION

  """テイストが異なる"""
  TASTE_MISMATCH

  """無断転載している"""
  UNAUTHORIZED_REPOST
}

input ReportStickerInput {
  reason: ReportReason!
  stickerId: ID!
}

input ReportUserInput {
  reason: ReportReason!
  userId: ID!
}

input ReportWorkInput {
  comment: String!
  reason: ReportReason!
  workId: ID!
}

input RequestsWhereInput {
  status: PromptonRequestStatus
}

input SendPromptonMessageInput {
  recipientId: ID!
  text: String!
}

input SendPromptonRequestMessageInput {
  recipientId: ID!
  requestId: ID!
  text: String!
}

input SignImageGenerationTermsInput {
  version: Int!
}

enum Sort {
  ASC
  DESC
}

enum StickerAccessType {
  """非公開"""
  PRIVATE

  """公開"""
  PUBLIC
}

"""ステッカーの種類"""
enum StickerGenre {
  """動物"""
  ANIMAL

  """背景"""
  BACKGROUND

  """人物"""
  CHARACTER

  """機械"""
  MACHINE

  """物"""
  OBJECT
}

"""スタンプ"""
type StickerNode implements Node {
  """閲覧の種類"""
  accessType: AccessType!

  """カテゴリ"""
  categories: [String!]!
  createdAt: Int!

  """ダウンロード数"""
  downloadsCount: Int!

  """ジャンル"""
  genre: StickerGenre!
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")
  imageId: ID @deprecated(reason: "廃止")
  imageUrl: String

  """削除済み"""
  isDeleted: Boolean!

  """マイスタンプに追加している"""
  isDownloaded: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """いいね数"""
  likesCount: Int!

  """タイトル"""
  title: String!
  usedAt: Int

  """ユーザ"""
  user: UserNode!
  userId: ID!

  """使用回数"""
  usesCount: Int!
  viewer: StickerViewerNode @deprecated(reason: "isLikedを使用する")
}

"""ステッカーの並び順"""
enum StickerOrderBy {
  DATE_CREATED
  DATE_DOWNLOADED
  DATE_USED
}

"""スタンプの保存状態"""
enum StickerSavedType {
  """他人の作成スタンプ（ダウンロード済み）"""
  DOWNLOADED

  """自身の作成スタンプ（未公開）"""
  PRIVATE_CREATED

  """自身の作成スタンプ（公開）"""
  PUBLIC_CREATED
}

input StickersWhereInput {
  """カテゴリ"""
  categories: [String!]

  """作成者"""
  creatorUserId: ID

  """ジャンル"""
  genre: StickerGenre

  """ソート"""
  orderBy: StickerOrderBy

  """検索ワード"""
  search: String

  """昇順/降順"""
  sort: Sort
}

type StickerViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
}

type SubWorkNode implements Node {
  id: ID!

  """画像のURL"""
  image: ImageNode! @deprecated(reason: "廃止")
  imageId: ID @deprecated(reason: "廃止")

  """画像のURL"""
  imageUrl: String

  """サムネイル画像のURL"""
  thumbnailImage: ImageNode! @deprecated(reason: "廃止")
  thumbnailImageId: ID! @deprecated(reason: "廃止")
}

"""タグ"""
type TagNode implements Node {
  """最初の作品"""
  firstWork: WorkNode
  id: ID!

  """いいねしている"""
  isLiked: Boolean!

  """ミュートしている"""
  isMuted: Boolean!

  """保存している"""
  isWatched: Boolean!

  """いいね数"""
  likesCount: Int!

  """名前"""
  name: String!
  viewer: TagViewerNode

  """関連する作品"""
  works(limit: Int!, offset: Int!, where: WorksWhereInput): [WorkNode!]

  """作品数"""
  worksCount: Int!
}

input TagsWhereInput {
  search: String
}

type TagViewerNode implements Node {
  id: ID!
  isLiked: Boolean!
  isMuted: Boolean!
  isWatched: Boolean!
}

input TestPromptonIntegrationInput {
  integrationId: String!
}

input UnfollowPromptonUserInput {
  userId: String!
}

"""タグのフォローを解除する"""
input UnfollowTagInput {
  tagName: String!
}

input UnfollowUserInput {
  userId: ID!
}

input UnmuteTagInput {
  tagName: String!
}

input UnmuteUserInput {
  userId: ID!
}

input UnpinPromptonWorkInput {
  workId: String!
}

input UnwatchFolderInput {
  userId: ID!
}

input UpdateAccountFcmTokenInput {
  token: String
}

input UpdateAccountLoginInput {
  login: String!
}

input UpdateAccountPasswordInput {
  currentPassword: String
  newPassword: String!
}

input UpdateAccountWebFcmTokenInput {
  token: String
}

input UpdateAlbumInput {
  albumId: ID!
  description: String

  """ヘッダー画像"""
  headerImageUrl: String
  title: String
  workIds: [ID!]
}

"""お気に入りスタンプを更新する"""
input UpdateBookmarkedStickerInput {
  """お気に入りするか、解除するかどうか"""
  isBookmarked: Boolean!

  """スタンプID"""
  stickerId: ID!

  """お気に入りスタンプ種別（返信、コメント）"""
  type: BookmarkedStickerType!
}

input UpdateFolderInput {
  folderId: ID!
  title: String!
}

input UpdateImageGenerationMemoInput {
  clipSkip: Int!
  explanation: String!
  height: Int!
  modelId: ID!
  nanoid: String!
  negativePrompts: String!
  prompts: String!
  sampler: String!
  scale: Int!
  seed: Int!
  steps: Int!
  title: String!
  vae: String!
  width: Int!
}

input UpdateNoteInput {
  noteId: ID!
}

input UpdateNovelInput {
  novelId: ID!
}

input UpdatePromptonFolderInput {
  description: String!
  folderId: String!
  imageFileId: String
  name: String!
}

input UpdatePromptonPlanInput {
  category: String!
  description: String!
  featureCommercialUse: Boolean!
  featureCopyrightFree: Boolean!
  featureFanFiction: Boolean!
  featurePrivate: Boolean!
  imageFileId: String
  maximumQuantity: Int!
  message: String!
  minimumQuantity: Int!
  name: String!
  objectSlugs: [String!]!
  planId: String!
  styleSlugs: [String!]!
  unitPrice: Int!
}

input UpdatePromptonPlanSortInput {
  planId: String!
}

input UpdatePromptonProfileBlockInput {
  description: String
  profileBlockId: String!
  siteURL: String
  title: String
}

input UpdatePromptonPromptInput {
  description: String
  isBase: Boolean!
  isNsfw: Boolean!
  isSingle: Boolean!
  name: String!
  promptId: String!
}

input UpdatePromptonUserAvatarInput {
  avatarFileId: String
}

input UpdatePromptonUserHeaderImageInput {
  imageFileId: String!
}

input UpdatePromptonUserInvoiceRegistrationNumberInput {
  invoiceRegistrationNumber: String
}

input UpdatePromptonUserLoginInput {
  login: String!
}

input UpdatePromptonUserProfileInput {
  biography: String
  deviantartUsername: String
  githubUsername: String
  instagramUsername: String
  name: String!
  pixivUsername: String
  tumblrUsername: String
  twitterUsername: String
}

input UpdatePromptonWorkInput {
  body: String
  title: String
  workId: String!
}

input UpdateProtectedImageGenerationResultInput {
  isProtected: Boolean!
  nanoid: String!
}

input UpdateRatingImageGenerationModelInput {
  modelId: ID!
  rating: Int!
}

input UpdateRatingImageGenerationResultInput {
  nanoid: String!
  rating: Int!
}

input UpdateStickerInput {
  """公開状態"""
  accessType: StickerAccessType!

  """カテゴリ"""
  categories: [String!]

  """ジャンル"""
  genre: StickerGenre
  stickerId: ID!

  """タイトル"""
  title: String
}

input UpdateUserProfileInput {
  """紹介"""
  biography: String
  displayName: String

  """紹介（英語）"""
  enBiography: String

  """センシティブなピックアップ作品ID"""
  featuredSensitiveWorkIds: [ID!]

  """ピックアップ作品ID"""
  featuredWorkIds: [ID!]

  """GitHub"""
  githubAccountId: String

  """ヘッダー画像"""
  headerImageUrl: String

  """ホームURL"""
  homeUrl: String

  """アイコン画像"""
  iconUrl: String

  """Instagram"""
  instagramAccountId: String

  """メールアドレス"""
  mailAddress: String

  """X"""
  twitterAccountId: String
}

input UpdateUserSettingInput {
  """支援機能（チップ）リクエスト許可"""
  featurePromptonRequest: Boolean

  """いいね通知"""
  isAnonymousLike: Boolean

  """センシティブいいね通知"""
  isAnonymousSensitiveLike: Boolean

  """センシティブ画像をぼかす"""
  isBlurSensitiveImage: Boolean

  """コメント通知"""
  isNotifyComment: Boolean

  """閲覧コンテンツ"""
  preferenceRating: PreferenceRating

  """セーフモード（全年齢のみ表示）"""
  safetyMode: Boolean
}

input UpdateWorkInput {
  """生成情報の公開設定"""
  accessGenerationType: GenerationAccessType!

  """公開状態"""
  accessType: AccessType!

  """シリーズID"""
  albumId: ID
  enExplanation: String
  entitle: String

  """説明"""
  explanation: String

  """作品ID"""
  id: ID!
  imageHeight: Int!

  """テイスト"""
  imageStyle: ImageStyle!

  """画像"""
  imageUrls: [String!]!
  imageWidth: Int!

  """コメント許可"""
  isCommentEditable: Boolean!

  """宣伝作品かどうか"""
  isPromotion: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!
  largeThumbnailImageHeight: Int!

  """大きいサムネイル画像(最大縦横600px)"""
  largeThumbnailImageURL: String!
  largeThumbnailImageWidth: Int!

  """メイン画像のハッシュ値（同じ画像の重複投稿防止に使う）"""
  mainImageSha256: String!

  """Markdown"""
  md: String
  modelHash: String

  """モデル"""
  modelId: ID
  modelName: String
  negativePrompt: String
  noise: String

  """OGP画像URL"""
  ogpImageUrl: String
  otherGenerationParams: String
  pngInfo: String

  """生成情報"""
  prompt: String

  """年齢種別"""
  rating: Rating!

  """関連リンク"""
  relatedUrl: String

  """予約日"""
  reservedAt: Float
  sampler: String
  seed: String
  smallThumbnailImageHeight: Int!

  """小さいサムネイル画像(最大縦横400px)"""
  smallThumbnailImageURL: String!
  smallThumbnailImageWidth: Int!
  steps: String
  strength: String

  """お題ID"""
  subjectId: ID

  """タグ"""
  tags: [String!]

  """サムネイル位置"""
  thumbnailPosition: Float

  """題名"""
  title: String!

  """種別"""
  type: WorkType!

  """動画URL"""
  videoUrl: String
}

input UpdateWorkTagsInput {
  """作品ID"""
  id: ID!

  """タグ"""
  tags: [String!]
}

input UserAlbumInput {
  isSensitive: Boolean
  search: String
}

input UserAlbumWhereInput {
  """リンク名"""
  link: String!

  """作成者のログインユーザID"""
  userId: ID!
}

input UserFolderInput {
  isSensitive: Boolean
  search: String
}

"""ユーザ"""
type UserNode implements Node {
  """シリーズ"""
  albums(limit: Int!, offset: Int!, where: UserAlbumInput): [AlbumNode!]!

  """入賞回数"""
  awardsCount: Int!

  """紹介"""
  biography: String

  """ブックマーク作品"""
  bookmarkWorks(limit: Int!, offset: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """作成日"""
  createdAt: Int!

  """付けたブックマーク数"""
  createdBookmarksCount: Int!

  """送ったコメント数"""
  createdCommentsCount: Int!

  """送ったいいね数"""
  createdLikesCount: Int!

  """付けた閲覧数"""
  createdViewsCount: Int!

  """紹介（英語）"""
  enBiography: String

  """FCMトークン"""
  fcmToken: String

  """センシティブなピックアップ作品"""
  featuredSensitiveWorks: [WorkNode!]

  """ピックアップ作品"""
  featuredWorks: [WorkNode!]

  """フォルダ"""
  folders(limit: Int!, offset: Int!, where: UserFolderInput): [FolderNode!]!

  """フォロー数"""
  followCount: Int!

  """フォロー（ユーザがフォローしているユーザ)"""
  followees(limit: Int!, offset: Int!): [UserNode!]!

  """フォロー数（ユーザにフォローされているユーザの数）"""
  followeesCount: Int!

  """フォロワー（ユーザをフォローしているユーザ）"""
  followers(limit: Int!, offset: Int!): [UserNode!]!

  """フォロワー数（ユーザをフォローしているユーザの数）"""
  followersCount: Int!

  """生成済み回数"""
  generatedCount: Int!

  """GitHub"""
  githubAccountId: String

  """画像生成機能の利用規約に同意済みである"""
  hasSignedImageGenerationTerms: Boolean!

  """ヘッダー画像"""
  headerImage: ImageNode @deprecated(reason: "廃止")

  """ヘッダー画像のID"""
  headerImageId: ID @deprecated(reason: "廃止")

  """ヘッダー画像URL"""
  headerImageUrl: String

  """アイコン画像"""
  iconImage: ImageNode @deprecated(reason: "廃止")

  """アイコン画像のID"""
  iconImageId: ID @deprecated(reason: "廃止")

  """アイコン画像URL"""
  iconUrl: String
  id: ID!

  """Instagram"""
  instagramAccountId: String

  """フォローしている"""
  isFollowee: Boolean!

  """フォローされている"""
  isFollower: Boolean!

  """ミュートしている"""
  isMuted: Boolean!

  """いいね作品"""
  likedWorks(limit: Int!, offset: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """ログインID"""
  login: String!

  """MailAddress"""
  mailAddress: String

  """表示名"""
  name: String!
  nanoid: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """プロンプトンのユーザ"""
  promptonUser: PromptonUserNode

  """受け取ったいいね数"""
  receivedLikesCount: Int!

  """受け取った閲覧数"""
  receivedViewsCount: Int!

  """シェア"""
  shareText: String

  """サイトURL"""
  siteURL: String

  """スタンプ"""
  stickers(limit: Int!, offset: Int!): [StickerNode!]!

  """X"""
  twitterAccountId: String
  viewer: UserViewerNode

  """WebFCMトークン"""
  webFcmToken: String

  """アワード（作品）"""
  workAwards(limit: Int!, offset: Int!, where: AwardsWhereInput): [WorkAwardNode!]!
  workCreatedAt: Int

  """
  作品
  ※キャッシュ不可
  """
  works(limit: Int!, offset: Int!, where: UserWorksWhereInput): [WorkNode!]!

  """投稿した作品数"""
  worksCount: Int!
}

"""ユーザの設定"""
type UserSettingNode implements Node {
  enabledEditCategory: Boolean!
  favoritedImageGenerationModelIds: [Int!]!
  featurePromptonRequest: Boolean!
  id: ID!

  """全年齢作品のいいねを匿名にするかどうか"""
  isAnonymousLike: Boolean!

  """センシティブ作品のいいねを匿名にするかどうか"""
  isAnonymousSensitiveLike: Boolean!

  """コメント通知するかどうか"""
  isNotifyComment: Boolean!

  """閲覧コンテンツ"""
  preferenceRating: PreferenceRating!

  """ダークモードを使用する"""
  useDarkMode: Boolean!
  useDisableGenerateTime: Int!
  user: UserNode!
  userId: ID!
}

input UserStickersWhereInput {
  """カテゴリ"""
  categories: [String!]

  """スタンプの保存状態"""
  savedTypes: [StickerSavedType!]

  """検索ワード"""
  search: String
}

input UsersWhereInput {
  search: String
}

type UserViewerNode implements Node {
  id: ID!
  isFollowee: Boolean!
  isFollower: Boolean!
  isMuted: Boolean!
}

input UserWorksWhereInput {
  """Aipictorsで生成された作品を取得するかどうか"""
  isGeneration: Boolean

  """センシティブな作品を取得するかどうか"""
  isSensitive: Boolean

  """モデル名"""
  modelName: String

  """検索ワード"""
  search: String
}

"""ログイン中のユーザ"""
type Viewer {
  """シリーズ"""
  albums(limit: Int!, offset: Int!): [AlbumNode!]!

  """連続で生成可能な最大タスク数"""
  availableConsecutiveImageGenerationsCount: Int!

  """利用可能なLoRA数"""
  availableImageGenerationLoraModelsCount: Int!

  """レーティング可能な最大数"""
  availableImageGenerationMaxRatingCount: Int!

  """利用可能な最大タスク数"""
  availableImageGenerationMaxTasksCount: Int!

  """保存したスタンプ"""
  availableStickers(limit: Int!, offset: Int!): [StickerNode!]!

  """ブックマークフォルダID"""
  bookmarkFolderId: String

  """お気に入りスタンプ一覧"""
  bookmarkedStickers(limit: Int!, offset: Int!, type: BookmarkedStickerType): [StickerNode!]!

  """現在の有効な画像生成のメモ"""
  currentImageGenerationMemos: [ImageGenerationMemoNode!]!

  """現在の有効な画像生成のタスク"""
  currentImageGenerationResults: [ImageGenerationResultNode!]!

  """現在のパス"""
  currentPass: PassNode
  currentPromptonRequests(limit: Int!, offset: Int!): [PromptonRequestNode!]!

  """
  カスタマーポータル
  ※非推奨
  """
  customerPortalURL: String

  """お気に入りのモデル一覧"""
  favoritedImageGenerationModels: [ImageModelNode!]!

  """全年齢作品のいいねを匿名にする"""
  featureAnonymousLike: Boolean!

  """センシティブ作品のいいねを匿名にする"""
  featureAnonymousSensitiveLike: Boolean!

  """コメント通知するかどうか"""
  featureCommentNotification: Boolean!

  """プロンプトン機能が有効である"""
  featurePrompton: Boolean!

  """フィードの作品"""
  feedWorks(limit: Int!, offset: Int!): [WorkNode!]!

  """コレクション"""
  folders(limit: Int!, offset: Int!): [FolderNode!]!
  hasNextPromptonRequests: Boolean!
  hasUnreadMessage: Boolean!
  id: ID!

  """有効な画像生成の結果"""
  imageGenerationResults(limit: Int!, offset: Int!, where: ImageGenerationResultsWhereInput): [ImageGenerationResultNode!]!

  """有効な画像生成のタスク"""
  imageGenerationTasks(limit: Int!, offset: Int!, where: ImageGenerationTasksWhereInput): [ImageGenerationTaskNode!]!

  """生成待ち人数（自身も含む）"""
  imageGenerationWaitCount: Int!

  """現在の予約生成中の画像生成のタスク"""
  inProgressImageGenerationReservedTasksCount: Int!

  """現在の生成中の画像生成のコスト"""
  inProgressImageGenerationTasksCost: Int!

  """現在の生成中の画像生成のタスク"""
  inProgressImageGenerationTasksCount: Int!

  """センシティブ画像をぼかすかどうか"""
  isBlurSensitiveImage: Boolean!
  likedPromptonWorks(limit: Int!, offset: Int!): [PromptonWorkNode!]!

  """いいねした作品"""
  likedWorks(limit: Int!, offset: Int!): [WorkNode!]!

  """LINEアカウントID"""
  lineUserId: String

  """メッセージのスレッド"""
  messageThread(threadId: ID!): MessageThreadNode

  """メッセージのスレッド"""
  messageThreads(limit: Int!, offset: Int!): [MessageThreadNode!]!

  """ミュートしたタグ"""
  mutedTags(limit: Int!, offset: Int!): [MutedTagNode!]!

  """ミュートしたユーザ"""
  mutedUsers(limit: Int!, offset: Int!): [UserNode!]!
  nextPromptonRequests: [PromptonRequestNode!]!

  """通知"""
  notifications(limit: Int!, offset: Int!, where: NotificationsWhereInput): [NotificationNode!]!

  """通知数"""
  notificationsCount(where: NotificationsWhereInput): Int!

  """決済履歴"""
  payments: [PaymentNode!]!
  pendingPromptonRequests(limit: Int!, offset: Int!): [PromptonRequestNode!]!
  promptonDeliverables(limit: Int!, offset: Int!): [PromptonWorkNode!]!
  promptonFollowees(limit: Int!, offset: Int!): [PromptonUserNode!]!
  promptonIntegrations(limit: Int!, offset: Int!): [PromptonIntegrationNode!]!

  """登録番号"""
  promptonInvoiceRegistrationNumber: String

  """メッセージのスレッド"""
  promptonMessageThreads(limit: Int!, offset: Int!): [PromptonMessageThreadNode!]!

  """Stripeの決済履歴"""
  promptonPaymentIntents(limit: Int!, offset: Int!): [PromptonPaymentIntentNode!]!

  """Stripeの決済方法"""
  promptonPaymentMethod: PromptonPaymentMethodNode

  """Stripeの決済履歴"""
  promptonPayments(limit: Int!, offset: Int!): [PromptonPaymentNode!]!

  """Stripeの出金履歴"""
  promptonPayouts(limit: Int!, offset: Int!): [PromptonPayoutNode!]!
  promptonPrompts(limit: Int!, offset: Int!): [PromptonPromptNode!]!
  promptonRequests(limit: Int!, offset: Int!): [PromptonRequestNode!]!

  """Stripeのアカウント"""
  promptonStripeAccount: PromptonAccountNode

  """Stripeのアカウントの登録のリンク"""
  promptonStripeAccountLink: String

  """Stripeの顧客"""
  promptonStripeCustomer: PromptonCustomerNode
  promptonUser: PromptonUserNode!
  receivedPromptonRequests(limit: Int!, offset: Int!): [PromptonRequestNode!]!

  """今日の有効な画像生成のタスクの数"""
  remainingImageGenerationTasksCount: Int!

  """現在の有効な画像生成の累計タスクの数"""
  remainingImageGenerationTasksTotalCount: Int!
  sentPromptonRequests(limit: Int!, offset: Int!): [PromptonRequestNode!]!

  """作成したスタンプ"""
  stickers(limit: Int!, offset: Int!): [StickerNode!]!

  """お問い合わせ対応のメッセージ"""
  supportMessages(limit: Int!, offset: Int!): [MessageNode!]!

  """認証トークン"""
  token: String

  """ユーザ"""
  user: UserNode!

  """保存したスタンプ"""
  userStickers(limit: Int!, offset: Int!, orderBy: StickerOrderBy, where: UserStickersWhereInput): [StickerNode!]!

  """保存したスタンプ総数"""
  userStickersCount(orderBy: StickerOrderBy, where: UserStickersWhereInput): Int!

  """本人確認のURL"""
  verificationUrl: String!

  """保存したコレクション"""
  watchedFolders(limit: Int!, offset: Int!): [FolderNode!]!

  """自分の作品"""
  works(limit: Int!, offset: Int!): [WorkNode!]!
}

input WatchFolderInput {
  folderId: ID!
}

input WhiteListTagsInput {
  isSensitive: Boolean
  search: String
}

"""アワード（作品）"""
type WorkAwardNode implements Node {
  dateText: String!
  id: ID!
  index: Int!

  """ランキング集計時のいいね数"""
  snapshotLikedCount: Int!

  """ユーザ"""
  user: UserNode!
  userId: ID!

  """作品"""
  work: WorkNode!
  workId: ID
}

"""通知（作品のランキング）"""
type WorkAwardNotificationNode implements Node {
  """時刻"""
  createdAt: Int!
  id: ID!

  """メッセージ"""
  message: String

  """種別"""
  type: String!

  """作品"""
  work: WorkNode
  workId: ID
}

input WorkAwardsWhereInput {
  date: String
  day: Int
  isSensitive: Boolean
  month: Int
  type: AwardType
  weekIndex: Int
  year: Int
}

"""通知（コメント）"""
type WorkCommentNotificationNode implements Node {
  createdAt: Int!
  id: ID!
  message: String
  myReplies: [CommentNode!]
  sticker: StickerNode
  stickerId: ID

  """種別"""
  type: String!
  user: UserNode
  userId: ID
  work: WorkNode
  workId: ID
}

"""通知（リプライ）"""
type WorkCommentReplyNotificationNode implements Node {
  createdAt: Int!
  id: ID!

  """メッセージ"""
  message: String

  """スタンプ"""
  sticker: StickerNode
  stickerId: ID

  """種別"""
  type: String!

  """ユーザ"""
  user: UserNode
  userId: ID

  """作品"""
  work: WorkNode
  workId: ID
}

"""作品"""
type WorkNode implements Node {
  """閲覧権限の種類"""
  accessType: AccessType!

  """運営による閲覧権限の種類"""
  adminAccessType: AdminAccessType!

  """シリーズ情報"""
  album: AlbumNode

  """ブックマーク数"""
  bookmarksCount: Int!

  """clipSkip"""
  clipSkip: Int

  """コメント"""
  comment(id: ID!): CommentNode!

  """コメント"""
  comments(limit: Int!, offset: Int!): [CommentNode!]!

  """コメント数"""
  commentsCount: Int!

  """作成日"""
  createdAt: Int!

  """デイリーランキング"""
  dailyRanking: Int

  """テーマ"""
  dailyTheme: DailyThemeNode

  """説明"""
  description: String

  """説明(英語)"""
  enDescription: String

  """タイトル(英語)"""
  enTitle: String!

  """生成情報公開設定"""
  generationAccessType: String!

  """生成機で生成した場合のモデルID"""
  generationModelId: ID

  """HTML（コラム、小説用）"""
  html: String!
  id: ID!

  """画像"""
  image: ImageNode @deprecated(reason: "廃止")

  """画像の比率"""
  imageAspectRatio: Float!

  """画像の高さ"""
  imageHeight: Int!

  """画像ID"""
  imageId: ID! @deprecated(reason: "廃止")

  """画像URL"""
  imageURL: String!

  """画像の幅"""
  imageWidth: Int!

  """ブックマークしている"""
  isBookmarked: Boolean!

  """コメント編集許可"""
  isCommentsEditable: Boolean!

  """削除済み"""
  isDeleted: Boolean!

  """生成画像でプロンプト公開作品かどうか"""
  isGeneration: Boolean!

  """コレクションに追加している"""
  isInCollection: Boolean!

  """いいねしている"""
  isLiked: Boolean!

  """自分自身が推薦しているかどうか"""
  isMyRecommended: Boolean!

  """プロモーション作品かどうか"""
  isPromotion: Boolean!

  """センシティブである"""
  isSensitive: Boolean!

  """タグ編集許可"""
  isTagEditable: Boolean!

  """画像（大）URL（サムネイル）"""
  largeThumbnailImage: ImageNode @deprecated(reason: "廃止")

  """画像（大）の高さ"""
  largeThumbnailImageHeight: Int!
  largeThumbnailImageId: ID! @deprecated(reason: "廃止")

  """画像（大）のURL"""
  largeThumbnailImageURL: String!

  """画像（大）の幅"""
  largeThumbnailImageWidth: Int!

  """いいねしたユーザ"""
  likedUsers(limit: Int!, offset: Int!): [UserNode!]!

  """いいね数"""
  likesCount: Int!

  """マークダウン（コラム、小説用）"""
  md: String!

  """画像生成関連の設定"""
  model: String

  """画像生成関連の設定"""
  modelHash: String

  """マンスリーランキング"""
  monthlyRanking: Int

  """nanoid"""
  nanoid: String

  """ネガティブプロンプト"""
  negativePrompt: String

  """次の作品"""
  nextWork: WorkNode

  """画像生成関連の設定"""
  noise: String

  """画像URL（サムネイル）"""
  ogpThumbnailImage: ImageNode @deprecated(reason: "廃止")

  """OGP画像"""
  ogpThumbnailImageId: ID! @deprecated(reason: "廃止")

  """OGP画像URL"""
  ogpThumbnailImageUrl: String

  """Open Graph 説明"""
  openGraphDescription: String

  """Open Graph 画像"""
  openGraphImageURL: String

  """Open Graph タイトル"""
  openGraphTitle: String

  """その他の画像生成関連の設定"""
  otherGenerationParams: String

  """pngInfo"""
  pngInfo: String

  """前の作品"""
  previousWork: WorkNode

  """プロンプト"""
  prompt: String

  """プロンプトの閲覧権限の種類"""
  promptAccessType: AccessType!

  """年齢制限"""
  rating: Rating

  """関連するタグ"""
  relatedTags(limit: Int!, offset: Int!): [TagNode!]!

  """関連URL"""
  relatedUrl: String

  """関連する作品"""
  relatedWorks(limit: Int!, offset: Int!): [WorkNode!]!

  """画像生成関連の設定"""
  sampler: String

  """画像生成関連の設定"""
  scale: Float

  """シード値"""
  seed: Float

  """シェア"""
  shareText: String

  """画像（小）の高さ"""
  smallThumbnailImageHeight: Int!

  """画像（小）のURL"""
  smallThumbnailImageURL: String!

  """画像（小）の幅"""
  smallThumbnailImageWidth: Int!

  """画像生成関連の設定"""
  steps: Int

  """画像生成関連の設定"""
  strength: String

  """テイスト"""
  style: ImageStyle!

  """作品"""
  subWorks: [SubWorkNode!]!

  """複数画像数"""
  subWorksCount: Int!

  """タグ名"""
  tagNames: [String!]!
  tags: [TagNode!]!
  thumbnailImage: ImageNode @deprecated(reason: "廃止")

  """画像URL（サムネイル）"""
  thumbnailImageId: ID! @deprecated(reason: "廃止")

  """サムネイル画像の位置"""
  thumbnailImagePosition: Float

  """タイトル"""
  title: String!

  """種類"""
  type: String!

  """更新日"""
  updatedAt: Int!

  """URL"""
  url: String

  """ユーザ"""
  user: UserNode!

  """ユーザID"""
  userId: ID!

  """uuid"""
  uuid: String

  """VAE"""
  vae: String

  """非推奨"""
  viewer: WorkViewerNode @deprecated(reason: "isLikedを使用する")

  """閲覧数"""
  viewsCount: Int!

  """ウィークリーランキング"""
  weeklyRanking: Int

  """作品投稿時に選択したモデルID"""
  workModelId: Int
}

"""投稿（旧）の並び順"""
enum WorkOrderBy {
  """公開状態でソート"""
  ACCESS_TYPE

  """ブックマーク数でソート"""
  BOOKMARKS_COUNT

  """コメント数でソート"""
  COMMENTS_COUNT

  """投稿日でソート"""
  DATE_CREATED

  """英語名でソート"""
  EN_NAME

  """いいね数でソート"""
  LIKES_COUNT

  """名前でソート"""
  NAME

  """閲覧数でソート"""
  VIEWS_COUNT

  """作品種別でソート"""
  WORK_TYPE
}

input WorksWhereInput {
  """公開範囲"""
  accessTypes: [AccessType!]

  """(〜)作成日 ISO 8601フォーマット"""
  beforeCreatedAt: String

  """作成日(〜)"""
  createdAtAfter: String

  """生成モデル"""
  generationModelId: ID

  """プロンプトが存在する"""
  hasPrompt: Boolean

  """ID"""
  ids: [ID!]

  """画像生成の作品"""
  isFeatured: Boolean

  """フォロー中のユーザのみ"""
  isFollowing: Boolean

  """非公開作品も含む"""
  isIncludePrivate: Boolean

  """フォロー外のユーザのみ"""
  isNotFollowing: Boolean

  """(〜)最新の日付"""
  isNowCreatedAt: Boolean

  """1人1作品"""
  isOneWorkPerUser: Boolean

  """プロンプト公開"""
  isPromptPublic: Boolean

  """推薦"""
  isRecommended: Boolean

  """センシティブである"""
  isSensitive: Boolean

  """お題参加"""
  isThemeParticipated: Boolean

  """使用モデル名"""
  modelNames: [String!]

  """ソート"""
  orderBy: WorkOrderBy

  """投稿者名"""
  ownerName: String

  """プロンプト"""
  prompts: [String!]

  """年齢種別"""
  ratings: [Rating!]

  """作品を推薦したユーザID"""
  recommendedWorksUserId: ID

  """検索"""
  search: String

  """使用サービス"""
  serviceNames: [String!]

  """昇順/降順"""
  sort: Sort

  """スタイル(テイスト)"""
  style: ImageStyle

  """お題"""
  subjectId: Int

  """タグの名前"""
  tagNames: [String!]

  """ユーザID"""
  userId: ID

  """作品形式"""
  workType: WorkType

  """作品形式"""
  workTypes: [WorkType!]
}

"""作品の種類"""
enum WorkType {
  """コラム"""
  COLUMN

  """小説"""
  NOVEL

  """動画"""
  VIDEO

  """画像"""
  WORK
}

type WorkViewerNode implements Node {
  id: ID!
  isBookmarked: Boolean!
  isLiked: Boolean!
}

